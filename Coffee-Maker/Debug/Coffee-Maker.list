
Coffee-Maker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800ab80  0800ab80  0001ab80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f4  0800b0f4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0fc  0800b0fc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  200001ec  0800b2f0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0800b2f0  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b3e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b11  00000000  00000000  00040d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  000463f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b836  00000000  00000000  00047de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d158  00000000  00000000  0007361e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010973a  00000000  00000000  00090776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086e0  00000000  00000000  00199f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab68 	.word	0x0800ab68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800ab68 	.word	0x0800ab68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000ea8:	1d39      	adds	r1, r7, #4
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <__io_putchar+0x20>)
 8000eb2:	f006 f9d8 	bl	8007266 <HAL_UART_Transmit>
	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000820 	.word	0x20000820

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f001 fca5 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ece:	f000 fa07 	bl	80012e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ed2:	f000 fa67 	bl	80013a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fc71 	bl	80017bc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000eda:	f000 fb07 	bl	80014ec <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000ede:	f000 fb3d 	bl	800155c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000ee2:	f000 fb79 	bl	80015d8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ee6:	f000 fb9d 	bl	8001624 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000eea:	f000 fbd9 	bl	80016a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000eee:	f000 fc07 	bl	8001700 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef2:	f000 fc35 	bl	8001760 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ef6:	f000 fa83 	bl	8001400 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Automatically turn on energy saver mode
  energy_save = 1;
 8000efa:	4b66      	ldr	r3, [pc, #408]	; (8001094 <main+0x1d0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4864      	ldr	r0, [pc, #400]	; (8001098 <main+0x1d4>)
 8000f06:	f003 fd93 	bl	8004a30 <HAL_GPIO_WritePin>

  //Set strong Brew variable and turn on LED
  strong_brew = 1;
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <main+0x1d8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, ARD_D5_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	4860      	ldr	r0, [pc, #384]	; (8001098 <main+0x1d4>)
 8000f16:	f003 fd8b 	bl	8004a30 <HAL_GPIO_WritePin>

  //Cup size selector
  cup_size = 1;
 8000f1a:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <main+0x1dc>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  cup_choice = 12;
 8000f20:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <main+0x1e0>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
  //Start with 12oz cup selected
  HAL_GPIO_WritePin(GPIOA, ARD_D1_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f003 fd7f 	bl	8004a30 <HAL_GPIO_WritePin>

  //Water temperature sensor
  BSP_TSENSOR_Init();
 8000f32:	f001 fb93 	bl	800265c <BSP_TSENSOR_Init>
  water_temp = BSP_TSENSOR_ReadTemp();
 8000f36:	f001 fbad 	bl	8002694 <BSP_TSENSOR_ReadTemp>
 8000f3a:	eef0 7a40 	vmov.f32	s15, s0
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <main+0x1e4>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]

  // Water level variable (Max water == 100 | Min Water = 0;
  water_level = 0;
 8000f44:	4b59      	ldr	r3, [pc, #356]	; (80010ac <main+0x1e8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]

  //Time tracker in seconds
  int time_sec = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]

  //Turn On Power LED2 at Start
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f54:	4850      	ldr	r0, [pc, #320]	; (8001098 <main+0x1d4>)
 8000f56:	f003 fd6b 	bl	8004a30 <HAL_GPIO_WritePin>

  printf("Power On\r\n\n");
 8000f5a:	4855      	ldr	r0, [pc, #340]	; (80010b0 <main+0x1ec>)
 8000f5c:	f007 fda2 	bl	8008aa4 <puts>

  printf("---Coffee-Maker V1.0---\r\n");
 8000f60:	4854      	ldr	r0, [pc, #336]	; (80010b4 <main+0x1f0>)
 8000f62:	f007 fd9f 	bl	8008aa4 <puts>
  printf("Brewing Start\r\n");
 8000f66:	4854      	ldr	r0, [pc, #336]	; (80010b8 <main+0x1f4>)
 8000f68:	f007 fd9c 	bl	8008aa4 <puts>
  {
	  /* USER CODE BEGIN 3 */

	  //Check water level
	  //If water level is below 25% capacity, turn on Add Water LED
	  HAL_ADC_Start(&hadc1);
 8000f6c:	4853      	ldr	r0, [pc, #332]	; (80010bc <main+0x1f8>)
 8000f6e:	f002 f873 	bl	8003058 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000f72:	2164      	movs	r1, #100	; 0x64
 8000f74:	4851      	ldr	r0, [pc, #324]	; (80010bc <main+0x1f8>)
 8000f76:	f002 f95d 	bl	8003234 <HAL_ADC_PollForConversion>
	  water_level = HAL_ADC_GetValue(&hadc1) / 100;
 8000f7a:	4850      	ldr	r0, [pc, #320]	; (80010bc <main+0x1f8>)
 8000f7c:	f002 fa32 	bl	80033e4 <HAL_ADC_GetValue>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <main+0x1fc>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <main+0x1e8>)
 8000f8e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000f90:	484a      	ldr	r0, [pc, #296]	; (80010bc <main+0x1f8>)
 8000f92:	f002 f91b 	bl	80031cc <HAL_ADC_Stop>
	  if (water_level == 0 || water_level > 25)
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <main+0x1e8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <main+0xe2>
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <main+0x1e8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b19      	cmp	r3, #25
 8000fa4:	dd0e      	ble.n	8000fc4 <main+0x100>
	  {
		  // 0 level will mock that the water level is full
		  if (water_level == 0)
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <main+0x1e8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <main+0xf0>
		  {
			  water_level = 100;
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <main+0x1e8>)
 8000fb0:	2264      	movs	r2, #100	; 0x64
 8000fb2:	601a      	str	r2, [r3, #0]
		  }
		  HAL_GPIO_WritePin(GPIOA, ARD_D9_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f003 fd37 	bl	8004a30 <HAL_GPIO_WritePin>
 8000fc2:	e00a      	b.n	8000fda <main+0x116>
	  }
	  else if (water_level <= 25)
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <main+0x1e8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b19      	cmp	r3, #25
 8000fca:	dc06      	bgt.n	8000fda <main+0x116>
	  {
		  HAL_GPIO_WritePin(GPIOA, ARD_D9_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f003 fd2b 	bl	8004a30 <HAL_GPIO_WritePin>
	  }

	  //if LED2 on after 25 seconds
	  if((time_sec != 0) && (time_sec % 25 == 0) && energy_save && HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d050      	beq.n	8001082 <main+0x1be>
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <main+0x1fc>)
 8000fe4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe8:	10da      	asrs	r2, r3, #3
 8000fea:	17cb      	asrs	r3, r1, #31
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009a      	lsls	r2, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	1aca      	subs	r2, r1, r3
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d141      	bne.n	8001082 <main+0x1be>
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <main+0x1d0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d03d      	beq.n	8001082 <main+0x1be>
 8001006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100a:	4823      	ldr	r0, [pc, #140]	; (8001098 <main+0x1d4>)
 800100c:	f003 fcf8 	bl	8004a00 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d035      	beq.n	8001082 <main+0x1be>
	  {
		  //Turn off Power LED
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101c:	481e      	ldr	r0, [pc, #120]	; (8001098 <main+0x1d4>)
 800101e:	f003 fd07 	bl	8004a30 <HAL_GPIO_WritePin>

		  printf("Brew Status: Finished\r\n");
 8001022:	4828      	ldr	r0, [pc, #160]	; (80010c4 <main+0x200>)
 8001024:	f007 fd3e 	bl	8008aa4 <puts>
		  if(strong_brew)
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <main+0x1d8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <main+0x174>
		  {
			  printf("Strong Brew: Enabled\r\n");
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <main+0x204>)
 8001032:	f007 fd37 	bl	8008aa4 <puts>
 8001036:	e002      	b.n	800103e <main+0x17a>
		  }
		  else
		  {
			  printf("Strong Brew: Disabled\r\n");
 8001038:	4824      	ldr	r0, [pc, #144]	; (80010cc <main+0x208>)
 800103a:	f007 fd33 	bl	8008aa4 <puts>
		  }
		  printf("Cup size: %doz\r\n\n", cup_choice);
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <main+0x1e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <main+0x20c>)
 8001046:	f007 fca7 	bl	8008998 <iprintf>

		  printf("Water Temp: %f C\r\n", water_temp);
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <main+0x1e4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa7a 	bl	8000548 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <main+0x210>)
 800105a:	f007 fc9d 	bl	8008998 <iprintf>
		  printf("Water Level: %d\r\n", water_level);
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <main+0x1e8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	481c      	ldr	r0, [pc, #112]	; (80010d8 <main+0x214>)
 8001066:	f007 fc97 	bl	8008998 <iprintf>

		  printf("Brewing Stop\r\n");
 800106a:	481c      	ldr	r0, [pc, #112]	; (80010dc <main+0x218>)
 800106c:	f007 fd1a 	bl	8008aa4 <puts>
		  printf("---Have a great day!---\r\n");
 8001070:	481b      	ldr	r0, [pc, #108]	; (80010e0 <main+0x21c>)
 8001072:	f007 fd17 	bl	8008aa4 <puts>
		  printf("---Fran Clan Roasts---\r\n\n");
 8001076:	481b      	ldr	r0, [pc, #108]	; (80010e4 <main+0x220>)
 8001078:	f007 fd14 	bl	8008aa4 <puts>
		  printf("Power off\r\n\n");
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <main+0x224>)
 800107e:	f007 fd11 	bl	8008aa4 <puts>
	  }

	  //Increment timer
	  time_sec++;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3301      	adds	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f001 fc38 	bl	8002900 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001090:	e76c      	b.n	8000f6c <main+0xa8>
 8001092:	bf00      	nop
 8001094:	20000278 	.word	0x20000278
 8001098:	48000400 	.word	0x48000400
 800109c:	200008a8 	.word	0x200008a8
 80010a0:	200008a4 	.word	0x200008a4
 80010a4:	200008b0 	.word	0x200008b0
 80010a8:	2000081c 	.word	0x2000081c
 80010ac:	200008ac 	.word	0x200008ac
 80010b0:	0800ab80 	.word	0x0800ab80
 80010b4:	0800ab8c 	.word	0x0800ab8c
 80010b8:	0800aba8 	.word	0x0800aba8
 80010bc:	200007b8 	.word	0x200007b8
 80010c0:	51eb851f 	.word	0x51eb851f
 80010c4:	0800abb8 	.word	0x0800abb8
 80010c8:	0800abd0 	.word	0x0800abd0
 80010cc:	0800abe8 	.word	0x0800abe8
 80010d0:	0800ac00 	.word	0x0800ac00
 80010d4:	0800ac14 	.word	0x0800ac14
 80010d8:	0800ac28 	.word	0x0800ac28
 80010dc:	0800ac3c 	.word	0x0800ac3c
 80010e0:	0800ac4c 	.word	0x0800ac4c
 80010e4:	0800ac68 	.word	0x0800ac68
 80010e8:	0800ac84 	.word	0x0800ac84

080010ec <HAL_GPIO_EXTI_Callback>:
/**
  * @brief Interrupt to toggle LED2
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	// Prevent unused argument(s) compilation warning
	UNUSED(GPIO_Pin);

	// Toggle Auto Turn off
	if(GPIO_Pin == ARD_D13_Pin)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d10e      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		energy_save = !energy_save;
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4b5f      	ldr	r3, [pc, #380]	; (800128c <HAL_GPIO_EXTI_Callback+0x1a0>)
 800110e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, ARD_D8_Pin);
 8001110:	2104      	movs	r1, #4
 8001112:	485f      	ldr	r0, [pc, #380]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001114:	f003 fca4 	bl	8004a60 <HAL_GPIO_TogglePin>
			printf("Brewing Start\r\n");
		}

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	}
}
 8001118:	e0b3      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
	else if(GPIO_Pin == ARD_D14_Pin)
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001120:	d10e      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x54>
		strong_brew = !strong_brew;
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001134:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, ARD_D5_Pin);
 8001136:	2110      	movs	r1, #16
 8001138:	4855      	ldr	r0, [pc, #340]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800113a:	f003 fc91 	bl	8004a60 <HAL_GPIO_TogglePin>
}
 800113e:	e0a0      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
	else if(GPIO_Pin == ARD_D15_Pin)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001146:	d155      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0x108>
		cup_size++;
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001150:	6013      	str	r3, [r2, #0]
		if (cup_size == 1)
 8001152:	4b51      	ldr	r3, [pc, #324]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10f      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x8e>
			cup_choice = 12;
 800115a:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800115c:	220c      	movs	r2, #12
 800115e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, ARD_D4_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2108      	movs	r1, #8
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f003 fc62 	bl	8004a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ARD_D1_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2101      	movs	r1, #1
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f003 fc5c 	bl	8004a30 <HAL_GPIO_WritePin>
}
 8001178:	e083      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
		else if (cup_size == 2)
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d10f      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0xb6>
			cup_choice = 10;
 8001182:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001184:	220a      	movs	r2, #10
 8001186:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, ARD_D1_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f003 fc4e 	bl	8004a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, ARD_D2_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119a:	4841      	ldr	r0, [pc, #260]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800119c:	f003 fc48 	bl	8004a30 <HAL_GPIO_WritePin>
}
 80011a0:	e06f      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
		else if (cup_size == 3)
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d10e      	bne.n	80011c8 <HAL_GPIO_EXTI_Callback+0xdc>
			cup_choice = 8;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_GPIO_EXTI_Callback+0x1b0>)
 80011ac:	2208      	movs	r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, ARD_D2_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	483a      	ldr	r0, [pc, #232]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80011b8:	f003 fc3a 	bl	8004a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ARD_D3_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4833      	ldr	r0, [pc, #204]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011c2:	f003 fc35 	bl	8004a30 <HAL_GPIO_WritePin>
}
 80011c6:	e05c      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
		else if (cup_size == 4)
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d158      	bne.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
			cup_choice = 6;
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_GPIO_EXTI_Callback+0x1b0>)
 80011d2:	2206      	movs	r2, #6
 80011d4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, ARD_D3_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	482d      	ldr	r0, [pc, #180]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011dc:	f003 fc28 	bl	8004a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ARD_D4_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2108      	movs	r1, #8
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f003 fc22 	bl	8004a30 <HAL_GPIO_WritePin>
			cup_size = 0;
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	e046      	b.n	8001282 <HAL_GPIO_EXTI_Callback+0x196>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 80011f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f8:	4825      	ldr	r0, [pc, #148]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80011fa:	f003 fc01 	bl	8004a00 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d030      	beq.n	8001266 <HAL_GPIO_EXTI_Callback+0x17a>
			printf("Brew Status: Paused\r\n");
 8001204:	4827      	ldr	r0, [pc, #156]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001206:	f007 fc4d 	bl	8008aa4 <puts>
			if(strong_brew)
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_EXTI_Callback+0x12e>
				printf("Strong Brew: Enabled\r\n");
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001214:	f007 fc46 	bl	8008aa4 <puts>
 8001218:	e002      	b.n	8001220 <HAL_GPIO_EXTI_Callback+0x134>
				printf("Strong Brew: Disabled\r\n");
 800121a:	4824      	ldr	r0, [pc, #144]	; (80012ac <HAL_GPIO_EXTI_Callback+0x1c0>)
 800121c:	f007 fc42 	bl	8008aa4 <puts>
			printf("Cup size: %doz\r\n\n", cup_choice);
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	4822      	ldr	r0, [pc, #136]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001228:	f007 fbb6 	bl	8008998 <iprintf>
		    printf("Water Temp: %f C\r\n", water_temp);
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800123c:	f007 fbac 	bl	8008998 <iprintf>
			printf("Water Level: %d %%\r\n", water_level);
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001248:	f007 fba6 	bl	8008998 <iprintf>
			printf("Brewing Stop\r\n");
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800124e:	f007 fc29 	bl	8008aa4 <puts>
			printf("---Have a great day!---\r\n");
 8001252:	481d      	ldr	r0, [pc, #116]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001254:	f007 fc26 	bl	8008aa4 <puts>
			printf("---Fran Clan Roasts---\r\n\n");
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <HAL_GPIO_EXTI_Callback+0x1e0>)
 800125a:	f007 fc23 	bl	8008aa4 <puts>
			printf("Power off\r\n\n");
 800125e:	481c      	ldr	r0, [pc, #112]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001260:	f007 fc20 	bl	8008aa4 <puts>
 8001264:	e008      	b.n	8001278 <HAL_GPIO_EXTI_Callback+0x18c>
			printf("Power on\r\n\n");
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001268:	f007 fc1c 	bl	8008aa4 <puts>
			printf("---Coffee-Maker V1.0---\r\n");
 800126c:	481a      	ldr	r0, [pc, #104]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800126e:	f007 fc19 	bl	8008aa4 <puts>
			printf("Brewing Start\r\n");
 8001272:	481a      	ldr	r0, [pc, #104]	; (80012dc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001274:	f007 fc16 	bl	8008aa4 <puts>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800127e:	f003 fbef 	bl	8004a60 <HAL_GPIO_TogglePin>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000278 	.word	0x20000278
 8001290:	48000400 	.word	0x48000400
 8001294:	200008a8 	.word	0x200008a8
 8001298:	200008a4 	.word	0x200008a4
 800129c:	200008b0 	.word	0x200008b0
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	0800ac90 	.word	0x0800ac90
 80012a8:	0800abd0 	.word	0x0800abd0
 80012ac:	0800abe8 	.word	0x0800abe8
 80012b0:	0800ac00 	.word	0x0800ac00
 80012b4:	2000081c 	.word	0x2000081c
 80012b8:	0800ac14 	.word	0x0800ac14
 80012bc:	200008ac 	.word	0x200008ac
 80012c0:	0800aca8 	.word	0x0800aca8
 80012c4:	0800ac3c 	.word	0x0800ac3c
 80012c8:	0800ac4c 	.word	0x0800ac4c
 80012cc:	0800ac68 	.word	0x0800ac68
 80012d0:	0800ac84 	.word	0x0800ac84
 80012d4:	0800acc0 	.word	0x0800acc0
 80012d8:	0800ab8c 	.word	0x0800ab8c
 80012dc:	0800aba8 	.word	0x0800aba8

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	; 0x58
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fee0 	bl	80080b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001306:	f004 fae3 	bl	80058d0 <HAL_PWREx_ControlVoltageScaling>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001310:	f000 fbc6 	bl	8001aa0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001314:	f004 fabe 	bl	8005894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <SystemClock_Config+0xc0>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <SystemClock_Config+0xc0>)
 8001320:	f023 0318 	bic.w	r3, r3, #24
 8001324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001328:	2314      	movs	r3, #20
 800132a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001340:	2301      	movs	r3, #1
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001348:	2328      	movs	r3, #40	; 0x28
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fbd9 	bl	8005b14 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001368:	f000 fb9a 	bl	8001aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	230f      	movs	r3, #15
 800136e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2303      	movs	r3, #3
 8001372:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	2104      	movs	r1, #4
 8001384:	4618      	mov	r0, r3
 8001386:	f004 ffab 	bl	80062e0 <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001390:	f000 fb86 	bl	8001aa0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001394:	f005 fc94 	bl	8006cc0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001398:	bf00      	nop
 800139a:	3758      	adds	r7, #88	; 0x58
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000

080013a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0a2      	sub	sp, #136	; 0x88
 80013a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2288      	movs	r2, #136	; 0x88
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 fe7f 	bl	80080b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80013b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013c0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013d0:	2318      	movs	r3, #24
 80013d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013d4:	2307      	movs	r3, #7
 80013d6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80013e0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80013e4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4618      	mov	r0, r3
 80013ea:	f005 f97f 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80013f4:	f000 fb54 	bl	8001aa0 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3788      	adds	r7, #136	; 0x88
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001424:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <MX_ADC1_Init+0xe4>)
 8001426:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001442:	2204      	movs	r2, #4
 8001444:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800144e:	2200      	movs	r2, #0
 8001450:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001454:	2201      	movs	r2, #1
 8001456:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <MX_ADC1_Init+0xe0>)
 8001484:	f001 fc92 	bl	8002dac <HAL_ADC_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800148e:	f000 fb07 	bl	8001aa0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <MX_ADC1_Init+0xe0>)
 800149e:	f002 fd43 	bl	8003f28 <HAL_ADCEx_MultiModeConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014a8:	f000 fafa 	bl	8001aa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_ADC1_Init+0xe8>)
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b0:	2306      	movs	r3, #6
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014b8:	237f      	movs	r3, #127	; 0x7f
 80014ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014bc:	2304      	movs	r3, #4
 80014be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0xe0>)
 80014ca:	f001 ff99 	bl	8003400 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80014d4:	f000 fae4 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200007b8 	.word	0x200007b8
 80014e4:	50040000 	.word	0x50040000
 80014e8:	3ac04000 	.word	0x3ac04000

080014ec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_DFSDM1_Init+0x68>)
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <MX_DFSDM1_Init+0x6c>)
 80014f4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_DFSDM1_Init+0x68>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_DFSDM1_Init+0x68>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001504:	2202      	movs	r2, #2
 8001506:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_DFSDM1_Init+0x68>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_DFSDM1_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001524:	2204      	movs	r2, #4
 8001526:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_DFSDM1_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001530:	2201      	movs	r2, #1
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_DFSDM1_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_DFSDM1_Init+0x68>)
 8001542:	f002 feb3 	bl	80042ac <HAL_DFSDM_ChannelInit>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800154c:	f000 faa8 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000240 	.word	0x20000240
 8001558:	40016020 	.word	0x40016020

0800155c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <MX_I2C2_Init+0x78>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001568:	f640 6214 	movw	r2, #3604	; 0xe14
 800156c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001576:	2201      	movs	r2, #1
 8001578:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_I2C2_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_I2C2_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_I2C2_Init+0x74>)
 800159a:	f003 fa93 	bl	8004ac4 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 fa7c 	bl	8001aa0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <MX_I2C2_Init+0x74>)
 80015ac:	f003 ff92 	bl	80054d4 <HAL_I2CEx_ConfigAnalogFilter>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80015b6:	f000 fa73 	bl	8001aa0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_I2C2_Init+0x74>)
 80015be:	f003 ffd4 	bl	800556a <HAL_I2CEx_ConfigDigitalFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80015c8:	f000 fa6a 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000708 	.word	0x20000708
 80015d4:	40005800 	.word	0x40005800

080015d8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <MX_QUADSPI_Init+0x48>)
 80015e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015e4:	2202      	movs	r2, #2
 80015e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015f0:	2210      	movs	r2, #16
 80015f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015f6:	2217      	movs	r2, #23
 80015f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_QUADSPI_Init+0x44>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_QUADSPI_Init+0x44>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_QUADSPI_Init+0x44>)
 8001608:	f004 f9c8 	bl	800599c <HAL_QSPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001612:	f000 fa45 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200008b4 	.word	0x200008b4
 8001620:	a0001000 	.word	0xa0001000

08001624 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_SPI3_Init+0x74>)
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <MX_SPI3_Init+0x78>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_SPI3_Init+0x74>)
 8001630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_SPI3_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI3_Init+0x74>)
 800163e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001642:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_SPI3_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_SPI3_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI3_Init+0x74>)
 8001652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001656:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_SPI3_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI3_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI3_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_SPI3_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI3_Init+0x74>)
 8001672:	2207      	movs	r2, #7
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_SPI3_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI3_Init+0x74>)
 800167e:	2208      	movs	r2, #8
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_SPI3_Init+0x74>)
 8001684:	f005 fcfe 	bl	8007084 <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800168e:	f000 fa07 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000754 	.word	0x20000754
 800169c:	40003c00 	.word	0x40003c00

080016a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <MX_USART1_UART_Init+0x5c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016e4:	f005 fd71 	bl	80071ca <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 f9d7 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000820 	.word	0x20000820
 80016fc:	40013800 	.word	0x40013800

08001700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <MX_USART3_UART_Init+0x5c>)
 8001708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART3_UART_Init+0x58>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USART3_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART3_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART3_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART3_UART_Init+0x58>)
 8001744:	f005 fd41 	bl	80071ca <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 f9a7 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000027c 	.word	0x2000027c
 800175c:	40004800 	.word	0x40004800

08001760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800176a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176e:	2206      	movs	r2, #6
 8001770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001774:	2202      	movs	r2, #2
 8001776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177a:	2202      	movs	r2, #2
 800177c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a4:	f003 ff2d 	bl	8005602 <HAL_PCD_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f977 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000300 	.word	0x20000300

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d2:	4bac      	ldr	r3, [pc, #688]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4aab      	ldr	r2, [pc, #684]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017d8:	f043 0310 	orr.w	r3, r3, #16
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4ba9      	ldr	r3, [pc, #676]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4ba6      	ldr	r3, [pc, #664]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4aa5      	ldr	r2, [pc, #660]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4ba3      	ldr	r3, [pc, #652]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4ba0      	ldr	r3, [pc, #640]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a9f      	ldr	r2, [pc, #636]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b9d      	ldr	r3, [pc, #628]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b9a      	ldr	r3, [pc, #616]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a99      	ldr	r2, [pc, #612]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b97      	ldr	r3, [pc, #604]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b94      	ldr	r3, [pc, #592]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a93      	ldr	r2, [pc, #588]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b91      	ldr	r3, [pc, #580]	; (8001a84 <MX_GPIO_Init+0x2c8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001850:	488d      	ldr	r0, [pc, #564]	; (8001a88 <MX_GPIO_Init+0x2cc>)
 8001852:	f003 f8ed 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D1_Pin|ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin
 8001856:	2200      	movs	r2, #0
 8001858:	f248 110d 	movw	r1, #33037	; 0x810d
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f003 f8e6 	bl	8004a30 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D3_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001864:	2200      	movs	r2, #0
 8001866:	f24f 0115 	movw	r1, #61461	; 0xf015
 800186a:	4888      	ldr	r0, [pc, #544]	; (8001a8c <MX_GPIO_Init+0x2d0>)
 800186c:	f003 f8e0 	bl	8004a30 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f245 0181 	movw	r1, #20609	; 0x5081
 8001876:	4886      	ldr	r0, [pc, #536]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 8001878:	f003 f8da 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4883      	ldr	r0, [pc, #524]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 8001884:	f003 f8d4 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800188e:	4881      	ldr	r0, [pc, #516]	; (8001a94 <MX_GPIO_Init+0x2d8>)
 8001890:	f003 f8ce 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2120      	movs	r1, #32
 8001898:	487c      	ldr	r0, [pc, #496]	; (8001a8c <MX_GPIO_Init+0x2d0>)
 800189a:	f003 f8c9 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2101      	movs	r1, #1
 80018a2:	4879      	ldr	r0, [pc, #484]	; (8001a88 <MX_GPIO_Init+0x2cc>)
 80018a4:	f003 f8c4 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018a8:	f240 1315 	movw	r3, #277	; 0x115
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4871      	ldr	r0, [pc, #452]	; (8001a88 <MX_GPIO_Init+0x2cc>)
 80018c2:	f002 fdff 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018c6:	234a      	movs	r3, #74	; 0x4a
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <MX_GPIO_Init+0x2dc>)
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	486b      	ldr	r0, [pc, #428]	; (8001a88 <MX_GPIO_Init+0x2cc>)
 80018da:	f002 fdf3 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e4:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <MX_GPIO_Init+0x2e0>)
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4868      	ldr	r0, [pc, #416]	; (8001a94 <MX_GPIO_Init+0x2d8>)
 80018f4:	f002 fde6 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D10_Pin ARD_D4_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin
 80018f8:	f248 130d 	movw	r3, #33037	; 0x810d
 80018fc:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f002 fdd6 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin;
 8001918:	2302      	movs	r3, #2
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001928:	2308      	movs	r3, #8
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D0_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f002 fdc5 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 800193a:	2320      	movs	r3, #32
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <MX_GPIO_Init+0x2dc>)
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f002 fdb8 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001964:	2305      	movs	r3, #5
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f002 fda7 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001976:	f24f 0335 	movw	r3, #61493	; 0xf035
 800197a:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	483f      	ldr	r0, [pc, #252]	; (8001a8c <MX_GPIO_Init+0x2d0>)
 8001990:	f002 fd98 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8001994:	f648 4304 	movw	r3, #35844	; 0x8c04
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <MX_GPIO_Init+0x2dc>)
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4839      	ldr	r0, [pc, #228]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 80019aa:	f002 fd8b 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin ARD_D2_Pin PMOD_RESET_Pin
                           STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|ARD_D2_Pin|PMOD_RESET_Pin
 80019ae:	f247 0381 	movw	r3, #28801	; 0x7081
 80019b2:	617b      	str	r3, [r7, #20]
                          |STSAFE_A100_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4832      	ldr	r0, [pc, #200]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 80019c8:	f002 fd7c 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80019cc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	482b      	ldr	r0, [pc, #172]	; (8001a94 <MX_GPIO_Init+0x2d8>)
 80019e6:	f002 fd6d 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_GPIO1_EXTI7_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin;
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <MX_GPIO_Init+0x2dc>)
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL53L0X_GPIO1_EXTI7_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4825      	ldr	r0, [pc, #148]	; (8001a94 <MX_GPIO_Init+0x2d8>)
 80019fe:	f002 fd61 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a02:	2302      	movs	r3, #2
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481c      	ldr	r0, [pc, #112]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 8001a1e:	f002 fd51 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a22:	2378      	movs	r3, #120	; 0x78
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_GPIO_Init+0x2d4>)
 8001a3e:	f002 fd41 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_GPIO_Init+0x2dc>)
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_GPIO_Init+0x2d0>)
 8001a58:	f002 fd34 	bl	80044c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2017      	movs	r0, #23
 8001a62:	f002 fbec 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a66:	2017      	movs	r0, #23
 8001a68:	f002 fc05 	bl	8004276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2028      	movs	r0, #40	; 0x28
 8001a72:	f002 fbe4 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a76:	2028      	movs	r0, #40	; 0x28
 8001a78:	f002 fbfd 	bl	8004276 <HAL_NVIC_EnableIRQ>

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48001000 	.word	0x48001000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48000800 	.word	0x48000800
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	10210000 	.word	0x10210000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2d      	ldr	r2, [pc, #180]	; (8001bc8 <HAL_ADC_MspInit+0xd4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d154      	bne.n	8001bc0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_ADC_MspInit+0xd8>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001b76:	233f      	movs	r3, #63	; 0x3f
 8001b78:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <HAL_ADC_MspInit+0xdc>)
 8001b8a:	f002 fc9b 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001b8e:	2310      	movs	r3, #16
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b92:	230b      	movs	r3, #11
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba4:	f002 fc8e 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bac:	230b      	movs	r3, #11
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_ADC_MspInit+0xe0>)
 8001bbc:	f002 fc82 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3730      	adds	r7, #48	; 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	50040000 	.word	0x50040000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0ac      	sub	sp, #176	; 0xb0
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2288      	movs	r2, #136	; 0x88
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f006 fa5b 	bl	80080b4 <memset>
  if(DFSDM1_Init == 0)
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d142      	bne.n	8001c8c <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fd68 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c22:	f7ff ff3d 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c56:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c70:	2306      	movs	r3, #6
 8001c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c7e:	f002 fc21 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a02      	ldr	r2, [pc, #8]	; (8001c94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c8a:	6013      	str	r3, [r2, #0]
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	37b0      	adds	r7, #176	; 0xb0
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000208 	.word	0x20000208
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	48001000 	.word	0x48001000

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0ac      	sub	sp, #176	; 0xb0
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2288      	movs	r2, #136	; 0x88
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 f9f7 	bl	80080b4 <memset>
  if(hi2c->Instance==I2C2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <HAL_I2C_MspInit+0xb0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d13b      	bne.n	8001d48 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fd05 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ce8:	f7ff feda 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <HAL_I2C_MspInit+0xb8>)
 8001d2c:	f002 fbca 	bl	80044c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001d36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_I2C_MspInit+0xb4>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	37b0      	adds	r7, #176	; 0xb0
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40005800 	.word	0x40005800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_I2C_MspDeInit+0x3c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10f      	bne.n	8001d8e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_I2C_MspDeInit+0x40>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_I2C_MspDeInit+0x40>)
 8001d74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7e:	4808      	ldr	r0, [pc, #32]	; (8001da0 <HAL_I2C_MspDeInit+0x44>)
 8001d80:	f002 fd4a 	bl	8004818 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_I2C_MspDeInit+0x44>)
 8001d8a:	f002 fd45 	bl	8004818 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40005800 	.word	0x40005800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000400 	.word	0x48000400

08001da4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_QSPI_MspInit+0x7c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d128      	bne.n	8001e18 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_QSPI_MspInit+0x80>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001df6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001dfa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e08:	230a      	movs	r3, #10
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <HAL_QSPI_MspInit+0x84>)
 8001e14:	f002 fb56 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	a0001000 	.word	0xa0001000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	48001000 	.word	0x48001000

08001e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_SPI_MspInit+0x7c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d128      	bne.n	8001ea0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_SPI_MspInit+0x80>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e90:	2306      	movs	r3, #6
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_SPI_MspInit+0x84>)
 8001e9c:	f002 fb12 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40003c00 	.word	0x40003c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000800 	.word	0x48000800

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ae      	sub	sp, #184	; 0xb8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	2288      	movs	r2, #136	; 0x88
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f006 f8ed 	bl	80080b4 <memset>
  if(huart->Instance==USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a42      	ldr	r2, [pc, #264]	; (8001fe8 <HAL_UART_MspInit+0x134>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13b      	bne.n	8001f5c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fbfb 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff fdd0 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a33      	ldr	r2, [pc, #204]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f30:	23c0      	movs	r3, #192	; 0xc0
 8001f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f56:	f002 fab5 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5a:	e040      	b.n	8001fde <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <HAL_UART_MspInit+0x140>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d13b      	bne.n	8001fde <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f66:	2304      	movs	r3, #4
 8001f68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fbba 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001f7e:	f7ff fd8f 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_UART_MspInit+0x138>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <HAL_UART_MspInit+0x144>)
 8001fda:	f002 fa73 	bl	80044c4 <HAL_GPIO_Init>
}
 8001fde:	bf00      	nop
 8001fe0:	37b8      	adds	r7, #184	; 0xb8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400
 8001ff4:	40004800 	.word	0x40004800
 8001ff8:	48000c00 	.word	0x48000c00

08001ffc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800201c:	d154      	bne.n	80020c8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204e:	f002 fa39 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002052:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002064:	230a      	movs	r3, #10
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f002 fa27 	bl	80044c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 800207c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d114      	bne.n	80020c4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80020b2:	f003 fc63 	bl	800597c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_PCD_MspInit+0xd4>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020c2:	e001      	b.n	80020c8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80020c4:	f003 fc5a 	bl	800597c <HAL_PWREx_EnableVddUSB>
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 fbce 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800212c:	2020      	movs	r0, #32
 800212e:	f002 fcb1 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002132:	2040      	movs	r0, #64	; 0x40
 8002134:	f002 fcae 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002138:	2080      	movs	r0, #128	; 0x80
 800213a:	f002 fcab 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800213e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002142:	f002 fca7 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002146:	f44f 7000 	mov.w	r0, #512	; 0x200
 800214a:	f002 fca3 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}

08002152 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002156:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800215a:	f002 fc9b 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800215e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002162:	f002 fc97 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002166:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800216a:	f002 fc93 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800216e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002172:	f002 fc8f 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
	return 1;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_kill>:

int _kill(int pid, int sig)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002194:	f005 ff56 	bl	8008044 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	2216      	movs	r2, #22
 800219c:	601a      	str	r2, [r3, #0]
	return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_exit>:

void _exit (int status)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffe7 	bl	800218a <_kill>
	while (1) {}		/* Make sure we hang here */
 80021bc:	e7fe      	b.n	80021bc <_exit+0x12>

080021be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e00a      	b.n	80021e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021d0:	f3af 8000 	nop.w
 80021d4:	4601      	mov	r1, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf0      	blt.n	80021d0 <_read+0x12>
	}

return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e009      	b.n	800221e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fe44 	bl	8000ea0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf1      	blt.n	800220a <_write+0x12>
	}
	return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_close>:

int _close(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	return -1;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002258:	605a      	str	r2, [r3, #4]
	return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f005 febc 	bl	8008044 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20018000 	.word	0x20018000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	2000020c 	.word	0x2000020c
 8002300:	200009e0 	.word	0x200009e0

08002304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <SystemInit+0x5c>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <SystemInit+0x5c>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <SystemInit+0x60>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a11      	ldr	r2, [pc, #68]	; (8002364 <SystemInit+0x60>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <SystemInit+0x60>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <SystemInit+0x60>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <SystemInit+0x60>)
 8002330:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002334:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002338:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <SystemInit+0x60>)
 800233c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002340:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <SystemInit+0x60>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <SystemInit+0x60>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SystemInit+0x60>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	40021000 	.word	0x40021000

08002368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800236c:	f7ff ffca 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002370:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002372:	e003      	b.n	800237c <LoopCopyDataInit>

08002374 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002376:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002378:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800237a:	3104      	adds	r1, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800237c:	480a      	ldr	r0, [pc, #40]	; (80023a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8002380:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002382:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002384:	d3f6      	bcc.n	8002374 <CopyDataInit>
	ldr	r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002388:	e002      	b.n	8002390 <LoopFillZerobss>

0800238a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800238a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800238c:	f842 3b04 	str.w	r3, [r2], #4

08002390 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <LoopForever+0x16>)
	cmp	r2, r3
 8002392:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002394:	d3f9      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f005 fe5b 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239a:	f7fe fd93 	bl	8000ec4 <main>

0800239e <LoopForever>:

LoopForever:
    b LoopForever
 800239e:	e7fe      	b.n	800239e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023a4:	0800b104 	.word	0x0800b104
	ldr	r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023ac:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 80023b0:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 80023b4:	200009dc 	.word	0x200009dc

080023b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_2_IRQHandler>
	...

080023bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <I2Cx_MspInit+0xa8>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <I2Cx_MspInit+0xa8>)
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <I2Cx_MspInit+0xa8>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80023dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023e2:	2312      	movs	r3, #18
 80023e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80023ee:	2304      	movs	r3, #4
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	481b      	ldr	r0, [pc, #108]	; (8002468 <I2Cx_MspInit+0xac>)
 80023fa:	f002 f863 	bl	80044c4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4818      	ldr	r0, [pc, #96]	; (8002468 <I2Cx_MspInit+0xac>)
 8002406:	f002 f85d 	bl	80044c4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <I2Cx_MspInit+0xa8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <I2Cx_MspInit+0xa8>)
 8002434:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002438:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	210f      	movs	r1, #15
 800243e:	2021      	movs	r0, #33	; 0x21
 8002440:	f001 fefd 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002444:	2021      	movs	r0, #33	; 0x21
 8002446:	f001 ff16 	bl	8004276 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	210f      	movs	r1, #15
 800244e:	2022      	movs	r0, #34	; 0x22
 8002450:	f001 fef5 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002454:	2022      	movs	r0, #34	; 0x22
 8002456:	f001 ff0e 	bl	8004276 <HAL_NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3728      	adds	r7, #40	; 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	48000400 	.word	0x48000400

0800246c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <I2Cx_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <I2Cx_Init+0x58>)
 800247e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff89 	bl	80023bc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f002 fb0a 	bl	8004ac4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80024b0:	2100      	movs	r1, #0
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f003 f80e 	bl	80054d4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40005800 	.word	0x40005800
 80024c4:	00702681 	.word	0x00702681

080024c8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	72fb      	strb	r3, [r7, #11]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	b299      	uxth	r1, r3
 80024ea:	88f8      	ldrh	r0, [r7, #6]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4603      	mov	r3, r0
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f002 fcb2 	bl	8004e68 <HAL_I2C_Mem_Read>
 8002504:	4603      	mov	r3, r0
 8002506:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	4619      	mov	r1, r3
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f832 	bl	800257c <I2Cx_Error>
  }
  return status;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b08a      	sub	sp, #40	; 0x28
 8002526:	af04      	add	r7, sp, #16
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	461a      	mov	r2, r3
 8002530:	4603      	mov	r3, r0
 8002532:	72fb      	strb	r3, [r7, #11]
 8002534:	460b      	mov	r3, r1
 8002536:	813b      	strh	r3, [r7, #8]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	b299      	uxth	r1, r3
 8002544:	88f8      	ldrh	r0, [r7, #6]
 8002546:	893a      	ldrh	r2, [r7, #8]
 8002548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4603      	mov	r3, r0
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f002 fb71 	bl	8004c40 <HAL_I2C_Mem_Write>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	4619      	mov	r1, r3
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f805 	bl	800257c <I2Cx_Error>
  }
  return status;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f002 fb2a 	bl	8004be2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff6c 	bl	800246c <I2Cx_Init>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <SENSOR_IO_Init+0x10>)
 80025a2:	f7ff ff63 	bl	800246c <I2Cx_Init>
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000097c 	.word	0x2000097c

080025b0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	460b      	mov	r3, r1
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	4613      	mov	r3, r2
 80025c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	79f9      	ldrb	r1, [r7, #7]
 80025c8:	2301      	movs	r3, #1
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	1d7b      	adds	r3, r7, #5
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <SENSOR_IO_Write+0x30>)
 80025d4:	f7ff ffa5 	bl	8002522 <I2Cx_WriteMultiple>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000097c 	.word	0x2000097c

080025e4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	4603      	mov	r3, r0
 80025ec:	460a      	mov	r2, r1
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	79f9      	ldrb	r1, [r7, #7]
 80025fe:	2301      	movs	r3, #1
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f107 030f 	add.w	r3, r7, #15
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2301      	movs	r3, #1
 800260a:	4804      	ldr	r0, [pc, #16]	; (800261c <SENSOR_IO_Read+0x38>)
 800260c:	f7ff ff5c 	bl	80024c8 <I2Cx_ReadMultiple>

  return read_value;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000097c 	.word	0x2000097c

08002620 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af02      	add	r7, sp, #8
 8002626:	603a      	str	r2, [r7, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	460b      	mov	r3, r1
 8002630:	71bb      	strb	r3, [r7, #6]
 8002632:	4613      	mov	r3, r2
 8002634:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	b29a      	uxth	r2, r3
 800263a:	79f9      	ldrb	r1, [r7, #7]
 800263c:	88bb      	ldrh	r3, [r7, #4]
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2301      	movs	r3, #1
 8002646:	4804      	ldr	r0, [pc, #16]	; (8002658 <SENSOR_IO_ReadMultiple+0x38>)
 8002648:	f7ff ff3e 	bl	80024c8 <I2Cx_ReadMultiple>
 800264c:	4603      	mov	r3, r0
 800264e:	b29b      	uxth	r3, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	2000097c 	.word	0x2000097c

0800265c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <BSP_TSENSOR_Init+0x30>)
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <BSP_TSENSOR_Init+0x34>)
 800266a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800266c:	f7ff ff96 	bl	800259c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <BSP_TSENSOR_Init+0x30>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2100      	movs	r1, #0
 8002678:	20be      	movs	r0, #190	; 0xbe
 800267a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002680:	79fb      	ldrb	r3, [r7, #7]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000210 	.word	0x20000210
 8002690:	20000004 	.word	0x20000004

08002694 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <BSP_TSENSOR_ReadTemp+0x18>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	20be      	movs	r0, #190	; 0xbe
 80026a0:	4798      	blx	r3
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80026a6:	eeb0 0a67 	vmov.f32	s0, s15
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000210 	.word	0x20000210

080026b0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2120      	movs	r1, #32
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff8e 	bl	80025e4 <SENSOR_IO_Read>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026f2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	2120      	movs	r1, #32
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff57 	bl	80025b0 <SENSOR_IO_Write>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	b2d8      	uxtb	r0, r3
 8002718:	f107 0208 	add.w	r2, r7, #8
 800271c:	2302      	movs	r3, #2
 800271e:	21b2      	movs	r1, #178	; 0xb2
 8002720:	f7ff ff7e 	bl	8002620 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2135      	movs	r1, #53	; 0x35
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff5a 	bl	80025e4 <SENSOR_IO_Read>
 8002730:	4603      	mov	r3, r0
 8002732:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002734:	7ffb      	ldrb	r3, [r7, #31]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b21b      	sxth	r3, r3
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	b21a      	sxth	r2, r3
 8002740:	7a3b      	ldrb	r3, [r7, #8]
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	019b      	lsls	r3, r3, #6
 800274c:	b21b      	sxth	r3, r3
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	b21a      	sxth	r2, r3
 8002754:	7a7b      	ldrb	r3, [r7, #9]
 8002756:	b21b      	sxth	r3, r3
 8002758:	4313      	orrs	r3, r2
 800275a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800275c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002760:	10db      	asrs	r3, r3, #3
 8002762:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002764:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002768:	10db      	asrs	r3, r3, #3
 800276a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	b2d8      	uxtb	r0, r3
 8002770:	f107 0208 	add.w	r2, r7, #8
 8002774:	2304      	movs	r3, #4
 8002776:	21bc      	movs	r1, #188	; 0xbc
 8002778:	f7ff ff52 	bl	8002620 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800277c:	7a7b      	ldrb	r3, [r7, #9]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	b21a      	sxth	r2, r3
 8002782:	7a3b      	ldrb	r3, [r7, #8]
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	7abb      	ldrb	r3, [r7, #10]
 8002792:	b21b      	sxth	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	2302      	movs	r3, #2
 80027a2:	21aa      	movs	r1, #170	; 0xaa
 80027a4:	f7ff ff3c 	bl	8002620 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027a8:	7a7b      	ldrb	r3, [r7, #9]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	7a3b      	ldrb	r3, [r7, #8]
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80027b6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	ee07 3a90 	vmov	s15, r3
}
 800280e:	eeb0 0a67 	vmov.f32	s0, s15
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002822:	2003      	movs	r0, #3
 8002824:	f001 fd00 	bl	8004228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002828:	2000      	movs	r0, #0
 800282a:	f000 f80d 	bl	8002848 <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	e001      	b.n	800283e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800283a:	f7ff f937 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283e:	79fb      	ldrb	r3, [r7, #7]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_InitTick+0x6c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d023      	beq.n	80028a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_InitTick+0x70>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_InitTick+0x6c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fd0d 	bl	8004292 <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d809      	bhi.n	8002898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002884:	2200      	movs	r2, #0
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f001 fcd7 	bl	800423e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_InitTick+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e007      	b.n	80028a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e004      	b.n	80028a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e001      	b.n	80028a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000018 	.word	0x20000018
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000014 	.word	0x20000014

080028c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000018 	.word	0x20000018
 80028e4:	200009c8 	.word	0x200009c8

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200009c8 	.word	0x200009c8

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002926:	bf00      	nop
 8002928:	f7ff ffde 	bl	80028e8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000018 	.word	0x20000018

08002948 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	609a      	str	r2, [r3, #8]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <LL_ADC_SetOffset+0x44>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	4313      	orrs	r3, r2
 80029e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	03fff000 	.word	0x03fff000

080029f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	461a      	mov	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3330      	adds	r3, #48	; 0x30
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	211f      	movs	r1, #31
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 011f 	and.w	r1, r3, #31
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	0d1b      	lsrs	r3, r3, #20
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2107      	movs	r1, #7
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	0d1b      	lsrs	r3, r3, #20
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b54:	40d9      	lsrs	r1, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	400b      	ands	r3, r1
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	0007ffff 	.word	0x0007ffff

08002b78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 031f 	and.w	r3, r3, #31
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6093      	str	r3, [r2, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be8:	d101      	bne.n	8002bee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c88:	f043 0202 	orr.w	r2, r3, #2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <LL_ADC_IsEnabled+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_ADC_IsEnabled+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsDisableOngoing+0x18>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsDisableOngoing+0x1a>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d101      	bne.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d101      	bne.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e136      	b.n	8003034 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fe8d 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fef1 	bl	8002bd4 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fed7 	bl	8002bb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff0c 	bl	8002c24 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fef0 	bl	8002bfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1c:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_ADC_Init+0x290>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a87      	ldr	r2, [pc, #540]	; (8003040 <HAL_ADC_Init+0x294>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e30:	e002      	b.n	8002e38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff feee 	bl	8002c24 <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff62 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80cf 	bne.w	8003022 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80cb 	bne.w	8003022 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fefb 	bl	8002c9c <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eac:	4865      	ldr	r0, [pc, #404]	; (8003044 <HAL_ADC_Init+0x298>)
 8002eae:	f7ff fef5 	bl	8002c9c <LL_ADC_IsEnabled>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4864      	ldr	r0, [pc, #400]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002eb6:	f7ff fef1 	bl	8002c9c <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	431c      	orrs	r4, r3
 8002ebe:	4863      	ldr	r0, [pc, #396]	; (800304c <HAL_ADC_Init+0x2a0>)
 8002ec0:	f7ff feec 	bl	8002c9c <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	485f      	ldr	r0, [pc, #380]	; (8003050 <HAL_ADC_Init+0x2a4>)
 8002ed4:	f7ff fd38 	bl	8002948 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e5b      	ldrb	r3, [r3, #25]
 8002edc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ee2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ee8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	045b      	lsls	r3, r3, #17
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_ADC_Init+0x2a8>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fef5 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff16 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 8002f5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13d      	bne.n	8002fde <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13a      	bne.n	8002fde <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f84:	f023 0302 	bic.w	r3, r3, #2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d118      	bne.n	8002fce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	611a      	str	r2, [r3, #16]
 8002fcc:	e007      	b.n	8002fde <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10c      	bne.n	8003000 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f023 010f 	bic.w	r1, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffe:	e007      	b.n	8003010 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020f 	bic.w	r2, r2, #15
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
 8003020:	e007      	b.n	8003032 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003032:	7ffb      	ldrb	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	20000000 	.word	0x20000000
 8003040:	053e2d63 	.word	0x053e2d63
 8003044:	50040000 	.word	0x50040000
 8003048:	50040100 	.word	0x50040100
 800304c:	50040200 	.word	0x50040200
 8003050:	50040300 	.word	0x50040300
 8003054:	fff0c007 	.word	0xfff0c007

08003058 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003060:	4857      	ldr	r0, [pc, #348]	; (80031c0 <HAL_ADC_Start+0x168>)
 8003062:	f7ff fd89 	bl	8002b78 <LL_ADC_GetMultimode>
 8003066:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fe63 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 809c 	bne.w	80031b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_Start+0x30>
 8003084:	2302      	movs	r3, #2
 8003086:	e097      	b.n	80031b8 <HAL_ADC_Start+0x160>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fe61 	bl	8003d58 <ADC_Enable>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 8083 	bne.w	80031a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_ADC_Start+0x16c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d002      	beq.n	80030c6 <HAL_ADC_Start+0x6e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_Start+0x70>
 80030c6:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <HAL_ADC_Start+0x170>)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f023 0206 	bic.w	r2, r3, #6
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
 80030fc:	e002      	b.n	8003104 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	221c      	movs	r2, #28
 800310a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <HAL_ADC_Start+0x16c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d002      	beq.n	8003124 <HAL_ADC_Start+0xcc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e000      	b.n	8003126 <HAL_ADC_Start+0xce>
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_ADC_Start+0x170>)
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	4293      	cmp	r3, r2
 800312c:	d008      	beq.n	8003140 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d002      	beq.n	8003140 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d114      	bne.n	800316a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fdc0 	bl	8002ce8 <LL_ADC_REG_StartConversion>
 8003168:	e025      	b.n	80031b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <HAL_ADC_Start+0x16c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d002      	beq.n	8003186 <HAL_ADC_Start+0x12e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	e000      	b.n	8003188 <HAL_ADC_Start+0x130>
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_ADC_Start+0x170>)
 8003188:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00f      	beq.n	80031b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800319e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
 80031a6:	e006      	b.n	80031b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031b0:	e001      	b.n	80031b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	50040300 	.word	0x50040300
 80031c4:	50040100 	.word	0x50040100
 80031c8:	50040000 	.word	0x50040000

080031cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Stop+0x16>
 80031de:	2302      	movs	r3, #2
 80031e0:	e023      	b.n	800322a <HAL_ADC_Stop+0x5e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031ea:	2103      	movs	r1, #3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fcf7 	bl	8003be0 <ADC_ConversionStop>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d111      	bne.n	8003220 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fe0d 	bl	8003e1c <ADC_Disable>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323e:	4866      	ldr	r0, [pc, #408]	; (80033d8 <HAL_ADC_PollForConversion+0x1a4>)
 8003240:	f7ff fc9a 	bl	8002b78 <LL_ADC_GetMultimode>
 8003244:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d102      	bne.n	8003254 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800324e:	2308      	movs	r3, #8
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e02a      	b.n	80032aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d002      	beq.n	8003266 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b09      	cmp	r3, #9
 8003264:	d111      	bne.n	800328a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0a4      	b.n	80033ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003284:	2304      	movs	r3, #4
 8003286:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003288:	e00f      	b.n	80032aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800328a:	4853      	ldr	r0, [pc, #332]	; (80033d8 <HAL_ADC_PollForConversion+0x1a4>)
 800328c:	f7ff fc82 	bl	8002b94 <LL_ADC_GetMultiDMATransfer>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e093      	b.n	80033ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032a6:	2304      	movs	r3, #4
 80032a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032aa:	f7ff fb1d 	bl	80028e8 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032b0:	e021      	b.n	80032f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d01d      	beq.n	80032f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032ba:	f7ff fb15 	bl	80028e8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <HAL_ADC_PollForConversion+0x9c>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d112      	bne.n	80032f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0204 	orr.w	r2, r3, #4
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e06b      	b.n	80033ce <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0d6      	beq.n	80032b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fba0 	bl	8002a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7e5b      	ldrb	r3, [r3, #25]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d118      	bne.n	800335a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b08      	cmp	r3, #8
 8003334:	d111      	bne.n	800335a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d105      	bne.n	800335a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_ADC_PollForConversion+0x1a8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d002      	beq.n	800336a <HAL_ADC_PollForConversion+0x136>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e000      	b.n	800336c <HAL_ADC_PollForConversion+0x138>
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_ADC_PollForConversion+0x1ac>)
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4293      	cmp	r3, r2
 8003372:	d008      	beq.n	8003386 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d002      	beq.n	8003386 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b09      	cmp	r3, #9
 8003384:	d104      	bne.n	8003390 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e00c      	b.n	80033aa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_ADC_PollForConversion+0x1a8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d002      	beq.n	80033a0 <HAL_ADC_PollForConversion+0x16c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e000      	b.n	80033a2 <HAL_ADC_PollForConversion+0x16e>
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_ADC_PollForConversion+0x1ac>)
 80033a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d104      	bne.n	80033ba <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2208      	movs	r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e008      	b.n	80033cc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	220c      	movs	r2, #12
 80033ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	50040300 	.word	0x50040300
 80033dc:	50040100 	.word	0x50040100
 80033e0:	50040000 	.word	0x50040000

080033e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0b6      	sub	sp, #216	; 0xd8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x22>
 800341e:	2302      	movs	r3, #2
 8003420:	e3c7      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x7b2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fc82 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 83a8 	bne.w	8003b8c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d824      	bhi.n	800348e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	3b02      	subs	r3, #2
 800344a:	2b03      	cmp	r3, #3
 800344c:	d81b      	bhi.n	8003486 <HAL_ADC_ConfigChannel+0x86>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <HAL_ADC_ConfigChannel+0x54>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003465 	.word	0x08003465
 8003458:	0800346d 	.word	0x0800346d
 800345c:	08003475 	.word	0x08003475
 8003460:	0800347d 	.word	0x0800347d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	220c      	movs	r2, #12
 8003468:	605a      	str	r2, [r3, #4]
          break;
 800346a:	e011      	b.n	8003490 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2212      	movs	r2, #18
 8003470:	605a      	str	r2, [r3, #4]
          break;
 8003472:	e00d      	b.n	8003490 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2218      	movs	r2, #24
 8003478:	605a      	str	r2, [r3, #4]
          break;
 800347a:	e009      	b.n	8003490 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003482:	605a      	str	r2, [r3, #4]
          break;
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2206      	movs	r2, #6
 800348a:	605a      	str	r2, [r3, #4]
          break;
 800348c:	e000      	b.n	8003490 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800348e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	f7ff faef 	bl	8002a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc46 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 80034ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fc66 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 80034ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 81a6 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 81a1 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7ff fafa 	bl	8002ad8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	08db      	lsrs	r3, r3, #3
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00a      	beq.n	800351c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003516:	f7ff fa4b 	bl	80029b0 <LL_ADC_SetOffset>
 800351a:	e17b      	b.n	8003814 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fa68 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x148>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fa5d 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 800353e:	4603      	mov	r3, r0
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 021f 	and.w	r2, r3, #31
 8003546:	e01e      	b.n	8003586 <HAL_ADC_ConfigChannel+0x186>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fa52 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800356a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800356e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e004      	b.n	8003584 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800357a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_ADC_ConfigChannel+0x19e>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	e018      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x1d0>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80035c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d106      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa21 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fa05 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <HAL_ADC_ConfigChannel+0x20e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f9fa 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	e01e      	b.n	800364c <HAL_ADC_ConfigChannel+0x24c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f9ef 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800362c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e004      	b.n	800364a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x264>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	e018      	b.n	8003696 <HAL_ADC_ConfigChannel+0x296>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800367c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800368c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003696:	429a      	cmp	r2, r3
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f9be 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f9a2 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x2d4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f997 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	e01e      	b.n	8003712 <HAL_ADC_ConfigChannel+0x312>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f98c 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e004      	b.n	8003710 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_ADC_ConfigChannel+0x32a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	0e9b      	lsrs	r3, r3, #26
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	e016      	b.n	8003758 <HAL_ADC_ConfigChannel+0x358>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800373c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800373e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e004      	b.n	8003758 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800374e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003758:	429a      	cmp	r2, r3
 800375a:	d106      	bne.n	800376a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f95d 	bl	8002a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f941 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x396>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2103      	movs	r1, #3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f936 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	e017      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x3c6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2103      	movs	r1, #3
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f92b 	bl	80029f8 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_ADC_ConfigChannel+0x3de>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0e9b      	lsrs	r3, r3, #26
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	e011      	b.n	8003802 <HAL_ADC_ConfigChannel+0x402>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e003      	b.n	8003802 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	2103      	movs	r1, #3
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f908 	bl	8002a24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fa3f 	bl	8002c9c <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 813f 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff f97c 	bl	8002b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a8e      	ldr	r2, [pc, #568]	; (8003a78 <HAL_ADC_ConfigChannel+0x678>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f040 8130 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADC_ConfigChannel+0x46c>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2b09      	cmp	r3, #9
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e019      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x4a0>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800387a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800387c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e003      	b.n	8003890 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2b09      	cmp	r3, #9
 8003898:	bf94      	ite	ls
 800389a:	2301      	movls	r3, #1
 800389c:	2300      	movhi	r3, #0
 800389e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d079      	beq.n	8003998 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4c0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	e015      	b.n	80038ec <HAL_ADC_ConfigChannel+0x4ec>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80038d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	069b      	lsls	r3, r3, #26
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x50c>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	e017      	b.n	800393c <HAL_ADC_ConfigChannel+0x53c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x562>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	051b      	lsls	r3, r3, #20
 8003960:	e018      	b.n	8003994 <HAL_ADC_ConfigChannel+0x594>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e003      	b.n	8003986 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003994:	430b      	orrs	r3, r1
 8003996:	e080      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x5b4>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	3301      	adds	r3, #1
 80039ac:	069b      	lsls	r3, r3, #26
 80039ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b2:	e015      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x5e0>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80039cc:	2320      	movs	r3, #32
 80039ce:	e003      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	069b      	lsls	r3, r3, #26
 80039dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x600>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	3301      	adds	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	e017      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x630>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	e003      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	ea42 0103 	orr.w	r1, r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x65c>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	3b1e      	subs	r3, #30
 8003a54:	051b      	lsls	r3, r3, #20
 8003a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	e01d      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x698>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	613b      	str	r3, [r7, #16]
  return result;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003a74:	2320      	movs	r3, #32
 8003a76:	e005      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x684>
 8003a78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f003 021f 	and.w	r2, r3, #31
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b1e      	subs	r3, #30
 8003a92:	051b      	lsls	r3, r3, #20
 8003a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7ff f81a 	bl	8002ad8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <HAL_ADC_ConfigChannel+0x7bc>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d07a      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab0:	4843      	ldr	r0, [pc, #268]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ab2:	f7fe ff6f 	bl	8002994 <LL_ADC_GetCommonPathInternalCh>
 8003ab6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a41      	ldr	r2, [pc, #260]	; (8003bc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d12c      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d126      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x6e4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_ADC_ConfigChannel+0x7cc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d15d      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aec:	4619      	mov	r1, r3
 8003aee:	4834      	ldr	r0, [pc, #208]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003af0:	f7fe ff3d 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	4a36      	ldr	r2, [pc, #216]	; (8003bd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f9      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1c:	e040      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d118      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x75a>
 8003b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d112      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x748>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_ADC_ConfigChannel+0x7cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d12d      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b50:	4619      	mov	r1, r3
 8003b52:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b54:	f7fe ff0b 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b58:	e024      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_ADC_ConfigChannel+0x7dc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d120      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11a      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d115      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b82:	4619      	mov	r1, r3
 8003b84:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b86:	f7fe fef2 	bl	800296e <LL_ADC_SetCommonPathInternalCh>
 8003b8a:	e00c      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b9e:	e002      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ba4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	37d8      	adds	r7, #216	; 0xd8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	80080000 	.word	0x80080000
 8003bc0:	50040300 	.word	0x50040300
 8003bc4:	c7520000 	.word	0xc7520000
 8003bc8:	50040000 	.word	0x50040000
 8003bcc:	50040200 	.word	0x50040200
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	053e2d63 	.word	0x053e2d63
 8003bd8:	cb840000 	.word	0xcb840000
 8003bdc:	80000001 	.word	0x80000001

08003be0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f89e 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f8bf 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 8003c08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8098 	beq.w	8003d48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02a      	beq.n	8003c7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7e5b      	ldrb	r3, [r3, #25]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d126      	bne.n	8003c7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7e1b      	ldrb	r3, [r3, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d122      	bne.n	8003c7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c3a:	e014      	b.n	8003c66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <ADC_ConversionStop+0x174>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d90d      	bls.n	8003c60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0210 	orr.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e074      	b.n	8003d4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d1e3      	bne.n	8003c3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d014      	beq.n	8003cac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f856 	bl	8002d38 <LL_ADC_REG_IsConversionOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f813 	bl	8002cc2 <LL_ADC_IsDisableOngoing>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f832 	bl	8002d10 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d014      	beq.n	8003cdc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f865 	bl	8002d86 <LL_ADC_INJ_IsConversionOngoing>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fffb 	bl	8002cc2 <LL_ADC_IsDisableOngoing>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f841 	bl	8002d5e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d005      	beq.n	8003cee <ADC_ConversionStop+0x10e>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d105      	bne.n	8003cf4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ce8:	230c      	movs	r3, #12
 8003cea:	617b      	str	r3, [r7, #20]
        break;
 8003cec:	e005      	b.n	8003cfa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	617b      	str	r3, [r7, #20]
        break;
 8003cf2:	e002      	b.n	8003cfa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	617b      	str	r3, [r7, #20]
        break;
 8003cf8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cfa:	f7fe fdf5 	bl	80028e8 <HAL_GetTick>
 8003cfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d00:	e01b      	b.n	8003d3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d02:	f7fe fdf1 	bl	80028e8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d914      	bls.n	8003d3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e007      	b.n	8003d4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1dc      	bne.n	8003d02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	a33fffff 	.word	0xa33fffff

08003d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ff99 	bl	8002c9c <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d14d      	bne.n	8003e0c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <ADC_Enable+0xc0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f043 0210 	orr.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e039      	b.n	8003e0e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe ff54 	bl	8002c4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fda0 	bl	80028e8 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003daa:	e028      	b.n	8003dfe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe ff73 	bl	8002c9c <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe ff43 	bl	8002c4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc6:	f7fe fd8f 	bl	80028e8 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d914      	bls.n	8003dfe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d00d      	beq.n	8003dfe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e007      	b.n	8003e0e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d1cf      	bne.n	8003dac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	8000003f 	.word	0x8000003f

08003e1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe ff4a 	bl	8002cc2 <LL_ADC_IsDisableOngoing>
 8003e2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe ff31 	bl	8002c9c <LL_ADC_IsEnabled>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d047      	beq.n	8003ed0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d144      	bne.n	8003ed0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030d 	and.w	r3, r3, #13
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10c      	bne.n	8003e6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe ff0b 	bl	8002c74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2203      	movs	r2, #3
 8003e64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e66:	f7fe fd3f 	bl	80028e8 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e6c:	e029      	b.n	8003ec2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f043 0210 	orr.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e023      	b.n	8003ed2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e8a:	f7fe fd2d 	bl	80028e8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d914      	bls.n	8003ec2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0210 	orr.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e007      	b.n	8003ed2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1dc      	bne.n	8003e8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <LL_ADC_IsEnabled>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <LL_ADC_IsEnabled+0x18>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <LL_ADC_IsEnabled+0x1a>
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d101      	bne.n	8003f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b09f      	sub	sp, #124	; 0x7c
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e093      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f52:	2300      	movs	r3, #0
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a47      	ldr	r2, [pc, #284]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d102      	bne.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	e001      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e072      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ffb8 	bl	8003f00 <LL_ADC_REG_IsConversionOngoing>
 8003f90:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ffb2 	bl	8003f00 <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d154      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d151      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003faa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02c      	beq.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fc6:	035b      	lsls	r3, r3, #13
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd0:	4829      	ldr	r0, [pc, #164]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003fd2:	f7ff ff82 	bl	8003eda <LL_ADC_IsEnabled>
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4828      	ldr	r0, [pc, #160]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003fda:	f7ff ff7e 	bl	8003eda <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	431c      	orrs	r4, r3
 8003fe2:	4828      	ldr	r0, [pc, #160]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003fe4:	f7ff ff79 	bl	8003eda <LL_ADC_IsEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4323      	orrs	r3, r4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d137      	bne.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ff8:	f023 030f 	bic.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	6811      	ldr	r1, [r2, #0]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	6892      	ldr	r2, [r2, #8]
 8004004:	430a      	orrs	r2, r1
 8004006:	431a      	orrs	r2, r3
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	e028      	b.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800401a:	4817      	ldr	r0, [pc, #92]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800401c:	f7ff ff5d 	bl	8003eda <LL_ADC_IsEnabled>
 8004020:	4604      	mov	r4, r0
 8004022:	4816      	ldr	r0, [pc, #88]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004024:	f7ff ff59 	bl	8003eda <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	431c      	orrs	r4, r3
 800402c:	4815      	ldr	r0, [pc, #84]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800402e:	f7ff ff54 	bl	8003eda <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	4323      	orrs	r3, r4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d112      	bne.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004042:	f023 030f 	bic.w	r3, r3, #15
 8004046:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004048:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800404a:	e009      	b.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800405e:	e000      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004060:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800406a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800406e:	4618      	mov	r0, r3
 8004070:	377c      	adds	r7, #124	; 0x7c
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop
 8004078:	50040000 	.word	0x50040000
 800407c:	50040100 	.word	0x50040100
 8004080:	50040300 	.word	0x50040300
 8004084:	50040200 	.word	0x50040200

08004088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <__NVIC_SetPriorityGrouping+0x44>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a4:	4013      	ands	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <__NVIC_SetPriorityGrouping+0x44>)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	60d3      	str	r3, [r2, #12]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <__NVIC_GetPriorityGrouping+0x18>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	f003 0307 	and.w	r3, r3, #7
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	db0b      	blt.n	8004116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <__NVIC_EnableIRQ+0x38>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2001      	movs	r0, #1
 800410e:	fa00 f202 	lsl.w	r2, r0, r2
 8004112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000e100 	.word	0xe000e100

08004128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db0a      	blt.n	8004152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	490c      	ldr	r1, [pc, #48]	; (8004174 <__NVIC_SetPriority+0x4c>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	440b      	add	r3, r1
 800414c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004150:	e00a      	b.n	8004168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <__NVIC_SetPriority+0x50>)
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3b04      	subs	r3, #4
 8004160:	0112      	lsls	r2, r2, #4
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	440b      	add	r3, r1
 8004166:	761a      	strb	r2, [r3, #24]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000e100 	.word	0xe000e100
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	bf28      	it	cs
 800419a:	2304      	movcs	r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d902      	bls.n	80041ac <NVIC_EncodePriority+0x30>
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3b03      	subs	r3, #3
 80041aa:	e000      	b.n	80041ae <NVIC_EncodePriority+0x32>
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	43d9      	mvns	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	4313      	orrs	r3, r2
         );
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d301      	bcc.n	80041fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <SysTick_Config+0x40>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004202:	210f      	movs	r1, #15
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	f7ff ff8e 	bl	8004128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SysTick_Config+0x40>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <SysTick_Config+0x40>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000e010 	.word	0xe000e010

08004228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff29 	bl	8004088 <__NVIC_SetPriorityGrouping>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004250:	f7ff ff3e 	bl	80040d0 <__NVIC_GetPriorityGrouping>
 8004254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff8e 	bl	800417c <NVIC_EncodePriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff5d 	bl	8004128 <__NVIC_SetPriority>
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff31 	bl	80040ec <__NVIC_EnableIRQ>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffa2 	bl	80041e4 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0ac      	b.n	8004418 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f8b2 	bl	800442c <DFSDM_GetChannelFromInstance>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4a55      	ldr	r2, [pc, #340]	; (8004420 <HAL_DFSDM_ChannelInit+0x174>)
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e09f      	b.n	8004418 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fd fc7d 	bl	8001bd8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80042de:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_DFSDM_ChannelInit+0x178>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a4f      	ldr	r2, [pc, #316]	; (8004424 <HAL_DFSDM_ChannelInit+0x178>)
 80042e6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80042e8:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <HAL_DFSDM_ChannelInit+0x178>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d125      	bne.n	800433c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80042f0:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 80042f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042fa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4948      	ldr	r1, [pc, #288]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a46      	ldr	r2, [pc, #280]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 8004310:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004314:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	791b      	ldrb	r3, [r3, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	493f      	ldr	r1, [pc, #252]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <HAL_DFSDM_ChannelInit+0x17c>)
 8004336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800433a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800434a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800435a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004360:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 020f 	bic.w	r2, r2, #15
 8004378:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80043a0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6899      	ldr	r1, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	3b01      	subs	r3, #1
 80043b2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f002 0207 	and.w	r2, r2, #7
 80043cc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043f8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f810 	bl	800442c <DFSDM_GetChannelFromInstance>
 800440c:	4602      	mov	r2, r0
 800440e:	4904      	ldr	r1, [pc, #16]	; (8004420 <HAL_DFSDM_ChannelInit+0x174>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000218 	.word	0x20000218
 8004424:	20000214 	.word	0x20000214
 8004428:	40016000 	.word	0x40016000

0800442c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d102      	bne.n	8004442 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e02b      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <DFSDM_GetChannelFromInstance+0x80>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d102      	bne.n	8004450 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800444a:	2301      	movs	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e024      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <DFSDM_GetChannelFromInstance+0x84>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004458:	2302      	movs	r3, #2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e01d      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <DFSDM_GetChannelFromInstance+0x88>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d102      	bne.n	800446c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004466:	2304      	movs	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e016      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d102      	bne.n	800447a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004474:	2305      	movs	r3, #5
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00f      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <DFSDM_GetChannelFromInstance+0x90>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d102      	bne.n	8004488 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004482:	2306      	movs	r3, #6
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e008      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <DFSDM_GetChannelFromInstance+0x94>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d102      	bne.n	8004496 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004490:	2307      	movs	r3, #7
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e001      	b.n	800449a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004496:	2303      	movs	r3, #3
 8004498:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40016000 	.word	0x40016000
 80044ac:	40016020 	.word	0x40016020
 80044b0:	40016040 	.word	0x40016040
 80044b4:	40016080 	.word	0x40016080
 80044b8:	400160a0 	.word	0x400160a0
 80044bc:	400160c0 	.word	0x400160c0
 80044c0:	400160e0 	.word	0x400160e0

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d2:	e17f      	b.n	80047d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8171 	beq.w	80047ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00b      	beq.n	800450c <HAL_GPIO_Init+0x48>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d007      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004500:	2b11      	cmp	r3, #17
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b12      	cmp	r3, #18
 800450a:	d130      	bne.n	800456e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004542:	2201      	movs	r2, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 0201 	and.w	r2, r3, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d118      	bne.n	80045ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004580:	2201      	movs	r2, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0201 	and.w	r2, r3, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x128>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b12      	cmp	r3, #18
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80ac 	beq.w	80047ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_GPIO_Init+0x330>)
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_GPIO_Init+0x330>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6613      	str	r3, [r2, #96]	; 0x60
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_GPIO_Init+0x330>)
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800468e:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <HAL_GPIO_Init+0x334>)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	3302      	adds	r3, #2
 8004696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046b8:	d025      	beq.n	8004706 <HAL_GPIO_Init+0x242>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4f      	ldr	r2, [pc, #316]	; (80047fc <HAL_GPIO_Init+0x338>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <HAL_GPIO_Init+0x23e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4e      	ldr	r2, [pc, #312]	; (8004800 <HAL_GPIO_Init+0x33c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d019      	beq.n	80046fe <HAL_GPIO_Init+0x23a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4d      	ldr	r2, [pc, #308]	; (8004804 <HAL_GPIO_Init+0x340>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_GPIO_Init+0x236>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <HAL_GPIO_Init+0x344>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00d      	beq.n	80046f6 <HAL_GPIO_Init+0x232>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4b      	ldr	r2, [pc, #300]	; (800480c <HAL_GPIO_Init+0x348>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_GPIO_Init+0x22e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <HAL_GPIO_Init+0x34c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_GPIO_Init+0x22a>
 80046ea:	2306      	movs	r3, #6
 80046ec:	e00c      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046ee:	2307      	movs	r3, #7
 80046f0:	e00a      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x244>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x244>
 8004706:	2300      	movs	r3, #0
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	f002 0203 	and.w	r2, r2, #3
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004718:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_GPIO_Init+0x334>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800474a:	4a32      	ldr	r2, [pc, #200]	; (8004814 <HAL_GPIO_Init+0x350>)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_GPIO_Init+0x350>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047c8:	4a12      	ldr	r2, [pc, #72]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f ae78 	bne.w	80044d4 <HAL_GPIO_Init+0x10>
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40010000 	.word	0x40010000
 80047fc:	48000400 	.word	0x48000400
 8004800:	48000800 	.word	0x48000800
 8004804:	48000c00 	.word	0x48000c00
 8004808:	48001000 	.word	0x48001000
 800480c:	48001400 	.word	0x48001400
 8004810:	48001800 	.word	0x48001800
 8004814:	40010400 	.word	0x40010400

08004818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004826:	e0cd      	b.n	80049c4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004828:	2201      	movs	r2, #1
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80c0 	beq.w	80049be <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800483e:	4a68      	ldr	r2, [pc, #416]	; (80049e0 <HAL_GPIO_DeInit+0x1c8>)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004866:	d025      	beq.n	80048b4 <HAL_GPIO_DeInit+0x9c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <HAL_GPIO_DeInit+0x1cc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01f      	beq.n	80048b0 <HAL_GPIO_DeInit+0x98>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a5d      	ldr	r2, [pc, #372]	; (80049e8 <HAL_GPIO_DeInit+0x1d0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d019      	beq.n	80048ac <HAL_GPIO_DeInit+0x94>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a5c      	ldr	r2, [pc, #368]	; (80049ec <HAL_GPIO_DeInit+0x1d4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_GPIO_DeInit+0x90>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a5b      	ldr	r2, [pc, #364]	; (80049f0 <HAL_GPIO_DeInit+0x1d8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00d      	beq.n	80048a4 <HAL_GPIO_DeInit+0x8c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a5a      	ldr	r2, [pc, #360]	; (80049f4 <HAL_GPIO_DeInit+0x1dc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <HAL_GPIO_DeInit+0x88>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a59      	ldr	r2, [pc, #356]	; (80049f8 <HAL_GPIO_DeInit+0x1e0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_GPIO_DeInit+0x84>
 8004898:	2306      	movs	r3, #6
 800489a:	e00c      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 800489c:	2307      	movs	r3, #7
 800489e:	e00a      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048a0:	2305      	movs	r3, #5
 80048a2:	e008      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048a4:	2304      	movs	r3, #4
 80048a6:	e006      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048a8:	2303      	movs	r3, #3
 80048aa:	e004      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e002      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_GPIO_DeInit+0x9e>
 80048b4:	2300      	movs	r3, #0
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	f002 0203 	and.w	r2, r2, #3
 80048bc:	0092      	lsls	r2, r2, #2
 80048be:	4093      	lsls	r3, r2
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d132      	bne.n	800492c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80048c6:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	494b      	ldr	r1, [pc, #300]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80048d4:	4b49      	ldr	r3, [pc, #292]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	4947      	ldr	r1, [pc, #284]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048de:	4013      	ands	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80048e2:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	4944      	ldr	r1, [pc, #272]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	4940      	ldr	r1, [pc, #256]	; (80049fc <HAL_GPIO_DeInit+0x1e4>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800490e:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_GPIO_DeInit+0x1c8>)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43da      	mvns	r2, r3
 800491e:	4830      	ldr	r0, [pc, #192]	; (80049e0 <HAL_GPIO_DeInit+0x1c8>)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	400a      	ands	r2, r1
 8004926:	3302      	adds	r3, #2
 8004928:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	2103      	movs	r1, #3
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	08d2      	lsrs	r2, r2, #3
 8004960:	4019      	ands	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3208      	adds	r2, #8
 8004966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2103      	movs	r1, #3
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	2101      	movs	r1, #1
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2103      	movs	r1, #3
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	401a      	ands	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	2101      	movs	r1, #1
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	401a      	ands	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f47f af2b 	bne.w	8004828 <HAL_GPIO_DeInit+0x10>
  }
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40010000 	.word	0x40010000
 80049e4:	48000400 	.word	0x48000400
 80049e8:	48000800 	.word	0x48000800
 80049ec:	48000c00 	.word	0x48000c00
 80049f0:	48001000 	.word	0x48001000
 80049f4:	48001400 	.word	0x48001400
 80049f8:	48001800 	.word	0x48001800
 80049fc:	40010400 	.word	0x40010400

08004a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	887b      	ldrh	r3, [r7, #2]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e001      	b.n	8004a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a40:	787b      	ldrb	r3, [r7, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a4c:	e002      	b.n	8004a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a4e:	887a      	ldrh	r2, [r7, #2]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	43d9      	mvns	r1, r3
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	400b      	ands	r3, r1
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fb1a 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e081      	b.n	8004bda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd f8d8 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e006      	b.n	8004b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d104      	bne.n	8004b5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	ea42 0103 	orr.w	r1, r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e021      	b.n	8004c38 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fd f8a5 	bl	8001d5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	460b      	mov	r3, r1
 8004c54:	813b      	strh	r3, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	f040 80f9 	bne.w	8004e5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_I2C_Mem_Write+0x34>
 8004c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0ed      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Mem_Write+0x4e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0e6      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c96:	f7fd fe27 	bl	80028e8 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2319      	movs	r3, #25
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fac3 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0d1      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2221      	movs	r2, #33	; 0x21
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2240      	movs	r2, #64	; 0x40
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ce0:	88f8      	ldrh	r0, [r7, #6]
 8004ce2:	893a      	ldrh	r2, [r7, #8]
 8004ce4:	8979      	ldrh	r1, [r7, #10]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4603      	mov	r3, r0
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f9d3 	bl	800509c <I2C_RequestMemoryWrite>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0a9      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2bff      	cmp	r3, #255	; 0xff
 8004d10:	d90e      	bls.n	8004d30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	22ff      	movs	r2, #255	; 0xff
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	8979      	ldrh	r1, [r7, #10]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fba5 	bl	8005478 <I2C_TransferConfig>
 8004d2e:	e00f      	b.n	8004d50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	8979      	ldrh	r1, [r7, #10]
 8004d42:	2300      	movs	r3, #0
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb94 	bl	8005478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 faad 	bl	80052b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e07b      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d034      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x1c8>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d130      	bne.n	8004e08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	2200      	movs	r2, #0
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fa3f 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e04d      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2bff      	cmp	r3, #255	; 0xff
 8004dc8:	d90e      	bls.n	8004de8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	8979      	ldrh	r1, [r7, #10]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fb49 	bl	8005478 <I2C_TransferConfig>
 8004de6:	e00f      	b.n	8004e08 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	8979      	ldrh	r1, [r7, #10]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fb38 	bl	8005478 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d19e      	bne.n	8004d50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fa8c 	bl	8005334 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e01a      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_I2C_Mem_Write+0x224>)
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	fe00e800 	.word	0xfe00e800

08004e68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	813b      	strh	r3, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	f040 80fd 	bne.w	800508a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x34>
 8004e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0f1      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Read+0x4e>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0ea      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fd13 	bl	80028e8 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2319      	movs	r3, #25
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f9af 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0d5      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2222      	movs	r2, #34	; 0x22
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f08:	88f8      	ldrh	r0, [r7, #6]
 8004f0a:	893a      	ldrh	r2, [r7, #8]
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4603      	mov	r3, r0
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f913 	bl	8005144 <I2C_RequestMemoryRead>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0ad      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2bff      	cmp	r3, #255	; 0xff
 8004f38:	d90e      	bls.n	8004f58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	22ff      	movs	r2, #255	; 0xff
 8004f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	8979      	ldrh	r1, [r7, #10]
 8004f48:	4b52      	ldr	r3, [pc, #328]	; (8005094 <HAL_I2C_Mem_Read+0x22c>)
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fa91 	bl	8005478 <I2C_TransferConfig>
 8004f56:	e00f      	b.n	8004f78 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	8979      	ldrh	r1, [r7, #10]
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_I2C_Mem_Read+0x22c>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fa80 	bl	8005478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2104      	movs	r1, #4
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f956 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e07c      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d034      	beq.n	8005038 <HAL_I2C_Mem_Read+0x1d0>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d130      	bne.n	8005038 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f927 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04d      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	d90e      	bls.n	8005018 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	b2da      	uxtb	r2, r3
 8005006:	8979      	ldrh	r1, [r7, #10]
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fa31 	bl	8005478 <I2C_TransferConfig>
 8005016:	e00f      	b.n	8005038 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	b2da      	uxtb	r2, r3
 8005028:	8979      	ldrh	r1, [r7, #10]
 800502a:	2300      	movs	r3, #0
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fa20 	bl	8005478 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d19a      	bne.n	8004f78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f974 	bl	8005334 <I2C_WaitOnSTOPFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e01a      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2220      	movs	r2, #32
 800505c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6859      	ldr	r1, [r3, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_I2C_Mem_Read+0x230>)
 800506a:	400b      	ands	r3, r1
 800506c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	80002400 	.word	0x80002400
 8005098:	fe00e800 	.word	0xfe00e800

0800509c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	817b      	strh	r3, [r7, #10]
 80050ae:	460b      	mov	r3, r1
 80050b0:	813b      	strh	r3, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	8979      	ldrh	r1, [r7, #10]
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <I2C_RequestMemoryWrite+0xa4>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f9d7 	bl	8005478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f8f0 	bl	80052b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e02c      	b.n	8005138 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050e4:	893b      	ldrh	r3, [r7, #8]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28
 80050ee:	e015      	b.n	800511c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050f0:	893b      	ldrh	r3, [r7, #8]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8d6 	bl	80052b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e012      	b.n	8005138 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005112:	893b      	ldrh	r3, [r7, #8]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2200      	movs	r2, #0
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f884 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	80002000 	.word	0x80002000

08005144 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	817b      	strh	r3, [r7, #10]
 8005156:	460b      	mov	r3, r1
 8005158:	813b      	strh	r3, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	8979      	ldrh	r1, [r7, #10]
 8005164:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <I2C_RequestMemoryRead+0xa4>)
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f984 	bl	8005478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f89d 	bl	80052b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e02c      	b.n	80051de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800518a:	893b      	ldrh	r3, [r7, #8]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
 8005194:	e015      	b.n	80051c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	b29b      	uxth	r3, r3
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f883 	bl	80052b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e012      	b.n	80051de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051b8:	893b      	ldrh	r3, [r7, #8]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2140      	movs	r1, #64	; 0x40
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f831 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	80002000 	.word	0x80002000

080051ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d103      	bne.n	800520a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d007      	beq.n	8005228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	619a      	str	r2, [r3, #24]
  }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005244:	e022      	b.n	800528c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d01e      	beq.n	800528c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fd fb4b 	bl	80028e8 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d113      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e00f      	b.n	80052ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d0cd      	beq.n	8005246 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052c0:	e02c      	b.n	800531c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f870 	bl	80053ac <I2C_IsAcknowledgeFailed>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e02a      	b.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d01e      	beq.n	800531c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fd fb03 	bl	80028e8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d113      	bne.n	800531c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e007      	b.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d1cb      	bne.n	80052c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005340:	e028      	b.n	8005394 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f830 	bl	80053ac <I2C_IsAcknowledgeFailed>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e026      	b.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fd fac7 	bl	80028e8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d113      	bne.n	8005394 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e007      	b.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d1cf      	bne.n	8005342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d151      	bne.n	800546a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053c6:	e022      	b.n	800540e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d01e      	beq.n	800540e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fd fa8a 	bl	80028e8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_IsAcknowledgeFailed+0x3a>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d113      	bne.n	800540e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e02e      	b.n	800546c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d1d5      	bne.n	80053c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2210      	movs	r2, #16
 8005422:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2220      	movs	r2, #32
 800542a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fedd 	bl	80051ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <I2C_IsAcknowledgeFailed+0xc8>)
 800543e:	400b      	ands	r3, r1
 8005440:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	fe00e800 	.word	0xfe00e800

08005478 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	817b      	strh	r3, [r7, #10]
 8005486:	4613      	mov	r3, r2
 8005488:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	0d5b      	lsrs	r3, r3, #21
 8005494:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <I2C_TransferConfig+0x58>)
 800549a:	430b      	orrs	r3, r1
 800549c:	43db      	mvns	r3, r3
 800549e:	ea02 0103 	and.w	r1, r2, r3
 80054a2:	897b      	ldrh	r3, [r7, #10]
 80054a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054a8:	7a7b      	ldrb	r3, [r7, #9]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	03ff63ff 	.word	0x03ff63ff

080054d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d138      	bne.n	800555c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e032      	b.n	800555e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	; 0x24
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b20      	cmp	r3, #32
 800557e:	d139      	bne.n	80055f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800558a:	2302      	movs	r3, #2
 800558c:	e033      	b.n	80055f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2224      	movs	r2, #36	; 0x24
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005604:	b08f      	sub	sp, #60	; 0x3c
 8005606:	af0a      	add	r7, sp, #40	; 0x28
 8005608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e116      	b.n	8005842 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fce4 	bl	8001ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2203      	movs	r2, #3
 8005638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f002 fab9 	bl	8007bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	687e      	ldr	r6, [r7, #4]
 8005660:	466d      	mov	r5, sp
 8005662:	f106 0410 	add.w	r4, r6, #16
 8005666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800566a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800566c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800566e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005672:	e885 0003 	stmia.w	r5, {r0, r1}
 8005676:	1d33      	adds	r3, r6, #4
 8005678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800567a:	6838      	ldr	r0, [r7, #0]
 800567c:	f002 fa79 	bl	8007b72 <USB_CoreInit>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0d7      	b.n	8005842 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f002 faa7 	bl	8007bec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
 80056a2:	e04a      	b.n	800573a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	333d      	adds	r3, #61	; 0x3d
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	333c      	adds	r3, #60	; 0x3c
 80056c8:	7bfa      	ldrb	r2, [r7, #15]
 80056ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	b298      	uxth	r0, r3
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3342      	adds	r3, #66	; 0x42
 80056e0:	4602      	mov	r2, r0
 80056e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	333f      	adds	r3, #63	; 0x3f
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3344      	adds	r3, #68	; 0x44
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3348      	adds	r3, #72	; 0x48
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	3350      	adds	r3, #80	; 0x50
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	3301      	adds	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3af      	bcc.n	80056a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005744:	2300      	movs	r3, #0
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e044      	b.n	80057d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057b8:	7bfa      	ldrb	r2, [r7, #15]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	3301      	adds	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3b5      	bcc.n	800574a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	687e      	ldr	r6, [r7, #4]
 80057e6:	466d      	mov	r5, sp
 80057e8:	f106 0410 	add.w	r4, r6, #16
 80057ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80057fc:	1d33      	adds	r3, r6, #4
 80057fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005800:	6838      	ldr	r0, [r7, #0]
 8005802:	f002 fa1d 	bl	8007c40 <USB_DevInit>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e014      	b.n	8005842 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b01      	cmp	r3, #1
 800582e:	d102      	bne.n	8005836 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f80a 	bl	800584a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f002 fbad 	bl	8007f9a <USB_DevDisconnect>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800584a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587c:	f043 0303 	orr.w	r3, r3, #3
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800589e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40007000 	.word	0x40007000

080058b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_PWREx_GetVoltageRange+0x18>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40007000 	.word	0x40007000

080058d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d130      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80058e0:	4b23      	ldr	r3, [pc, #140]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d038      	beq.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ee:	4b20      	ldr	r3, [pc, #128]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058f6:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2232      	movs	r2, #50	; 0x32
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	0c9b      	lsrs	r3, r3, #18
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005914:	e002      	b.n	800591c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3b01      	subs	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d102      	bne.n	8005930 <HAL_PWREx_ControlVoltageScaling+0x60>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f2      	bne.n	8005916 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593c:	d110      	bne.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e00f      	b.n	8005962 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800594a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594e:	d007      	beq.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005958:	4a05      	ldr	r2, [pc, #20]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800595a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800595e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40007000 	.word	0x40007000
 8005974:	20000000 	.word	0x20000000
 8005978:	431bde83 	.word	0x431bde83

0800597c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a04      	ldr	r2, [pc, #16]	; (8005998 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800598a:	6053      	str	r3, [r2, #4]
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40007000 	.word	0x40007000

0800599c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80059a4:	f7fc ffa0 	bl	80028e8 <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e063      	b.n	8005a7c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fc f9eb 	bl	8001da4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80059ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f858 	bl	8005a88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	021a      	lsls	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	2120      	movs	r1, #32
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f850 	bl	8005aa4 <QSPI_WaitFlagStateUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005a08:	7afb      	ldrb	r3, [r7, #11]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d131      	bne.n	8005a72 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6852      	ldr	r2, [r2, #4]
 8005a20:	0611      	lsls	r1, r2, #24
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68d2      	ldr	r2, [r2, #12]
 8005a26:	4311      	orrs	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <HAL_QSPI_Init+0xe8>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6912      	ldr	r2, [r2, #16]
 8005a3e:	0411      	lsls	r1, r2, #16
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6952      	ldr	r2, [r2, #20]
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6992      	ldr	r2, [r2, #24]
 8005a4a:	4311      	orrs	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	ffe0f8fe 	.word	0xffe0f8fe

08005a88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ab4:	e01a      	b.n	8005aec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d016      	beq.n	8005aec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abe:	f7fc ff13 	bl	80028e8 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e00e      	b.n	8005b0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d1d6      	bne.n	8005ab6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e3d4      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b26:	4ba1      	ldr	r3, [pc, #644]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b30:	4b9e      	ldr	r3, [pc, #632]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80e4 	beq.w	8005d10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_RCC_OscConfig+0x4a>
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b0c      	cmp	r3, #12
 8005b52:	f040 808b 	bne.w	8005c6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 8087 	bne.w	8005c6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b5e:	4b93      	ldr	r3, [pc, #588]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_RCC_OscConfig+0x62>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e3ac      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	4b8c      	ldr	r3, [pc, #560]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <HAL_RCC_OscConfig+0x7c>
 8005b86:	4b89      	ldr	r3, [pc, #548]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8e:	e005      	b.n	8005b9c <HAL_RCC_OscConfig+0x88>
 8005b90:	4b86      	ldr	r3, [pc, #536]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d223      	bcs.n	8005be8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fd41 	bl	800662c <RCC_SetFlashLatencyFromMSIRange>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e38d      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bb4:	4b7d      	ldr	r3, [pc, #500]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7c      	ldr	r2, [pc, #496]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bba:	f043 0308 	orr.w	r3, r3, #8
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b7a      	ldr	r3, [pc, #488]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	4977      	ldr	r1, [pc, #476]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bd2:	4b76      	ldr	r3, [pc, #472]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	4972      	ldr	r1, [pc, #456]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	604b      	str	r3, [r1, #4]
 8005be6:	e025      	b.n	8005c34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005be8:	4b70      	ldr	r3, [pc, #448]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6f      	ldr	r2, [pc, #444]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bee:	f043 0308 	orr.w	r3, r3, #8
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	4b6d      	ldr	r3, [pc, #436]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	496a      	ldr	r1, [pc, #424]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c06:	4b69      	ldr	r3, [pc, #420]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4965      	ldr	r1, [pc, #404]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fd01 	bl	800662c <RCC_SetFlashLatencyFromMSIRange>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e34d      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c34:	f000 fc36 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	495a      	ldr	r1, [pc, #360]	; (8005db0 <HAL_RCC_OscConfig+0x29c>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <HAL_RCC_OscConfig+0x2a0>)
 8005c52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c54:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCC_OscConfig+0x2a4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fc fdf5 	bl	8002848 <HAL_InitTick>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d052      	beq.n	8005d0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	e331      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d032      	beq.n	8005cda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c74:	4b4d      	ldr	r3, [pc, #308]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4c      	ldr	r2, [pc, #304]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c80:	f7fc fe32 	bl	80028e8 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c88:	f7fc fe2e 	bl	80028e8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e31a      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c9a:	4b44      	ldr	r3, [pc, #272]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ca6:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a40      	ldr	r2, [pc, #256]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cac:	f043 0308 	orr.w	r3, r3, #8
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	4b3e      	ldr	r3, [pc, #248]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	493b      	ldr	r1, [pc, #236]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cc4:	4b39      	ldr	r3, [pc, #228]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	4936      	ldr	r1, [pc, #216]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
 8005cd8:	e01a      	b.n	8005d10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a33      	ldr	r2, [pc, #204]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ce6:	f7fc fdff 	bl	80028e8 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cee:	f7fc fdfb 	bl	80028e8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e2e7      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f0      	bne.n	8005cee <HAL_RCC_OscConfig+0x1da>
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d074      	beq.n	8005e06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x21a>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d10e      	bne.n	8005d46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d064      	beq.n	8005e04 <HAL_RCC_OscConfig+0x2f0>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d160      	bne.n	8005e04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e2c4      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x24a>
 8005d50:	4b16      	ldr	r3, [pc, #88]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e01d      	b.n	8005d9a <HAL_RCC_OscConfig+0x286>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d66:	d10c      	bne.n	8005d82 <HAL_RCC_OscConfig+0x26e>
 8005d68:	4b10      	ldr	r3, [pc, #64]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e00b      	b.n	8005d9a <HAL_RCC_OscConfig+0x286>
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a09      	ldr	r2, [pc, #36]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a06      	ldr	r2, [pc, #24]	; (8005dac <HAL_RCC_OscConfig+0x298>)
 8005d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fc fda1 	bl	80028e8 <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005da8:	e011      	b.n	8005dce <HAL_RCC_OscConfig+0x2ba>
 8005daa:	bf00      	nop
 8005dac:	40021000 	.word	0x40021000
 8005db0:	0800accc 	.word	0x0800accc
 8005db4:	20000000 	.word	0x20000000
 8005db8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dbc:	f7fc fd94 	bl	80028e8 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	; 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e280      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dce:	4baf      	ldr	r3, [pc, #700]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0x2a8>
 8005dda:	e014      	b.n	8005e06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc fd84 	bl	80028e8 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fc fd80 	bl	80028e8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e26c      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df6:	4ba5      	ldr	r3, [pc, #660]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x2d0>
 8005e02:	e000      	b.n	8005e06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d060      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_OscConfig+0x310>
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d119      	bne.n	8005e52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d116      	bne.n	8005e52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e24:	4b99      	ldr	r3, [pc, #612]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_OscConfig+0x328>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e249      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3c:	4b93      	ldr	r3, [pc, #588]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	4990      	ldr	r1, [pc, #576]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e50:	e040      	b.n	8005ed4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d023      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e5a:	4b8c      	ldr	r3, [pc, #560]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a8b      	ldr	r2, [pc, #556]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fc fd3f 	bl	80028e8 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fc fd3b 	bl	80028e8 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e227      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e80:	4b82      	ldr	r3, [pc, #520]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	4b7f      	ldr	r3, [pc, #508]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	497c      	ldr	r1, [pc, #496]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	e018      	b.n	8005ed4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea2:	4b7a      	ldr	r3, [pc, #488]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a79      	ldr	r2, [pc, #484]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fc fd1b 	bl	80028e8 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb6:	f7fc fd17 	bl	80028e8 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e203      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ec8:	4b70      	ldr	r3, [pc, #448]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f0      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03c      	beq.n	8005f5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee8:	4b68      	ldr	r3, [pc, #416]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eee:	4a67      	ldr	r2, [pc, #412]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fc fcf6 	bl	80028e8 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f00:	f7fc fcf2 	bl	80028e8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e1de      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f12:	4b5e      	ldr	r3, [pc, #376]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0ef      	beq.n	8005f00 <HAL_RCC_OscConfig+0x3ec>
 8005f20:	e01b      	b.n	8005f5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f22:	4b5a      	ldr	r3, [pc, #360]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	4a58      	ldr	r2, [pc, #352]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fc fcd9 	bl	80028e8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3a:	f7fc fcd5 	bl	80028e8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e1c1      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f4c:	4b4f      	ldr	r3, [pc, #316]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ef      	bne.n	8005f3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80a6 	beq.w	80060b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f6c:	4b47      	ldr	r3, [pc, #284]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f78:	4b44      	ldr	r3, [pc, #272]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7c:	4a43      	ldr	r2, [pc, #268]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	6593      	str	r3, [r2, #88]	; 0x58
 8005f84:	4b41      	ldr	r3, [pc, #260]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f90:	2301      	movs	r3, #1
 8005f92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f94:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <HAL_RCC_OscConfig+0x57c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d118      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa0:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <HAL_RCC_OscConfig+0x57c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a3a      	ldr	r2, [pc, #232]	; (8006090 <HAL_RCC_OscConfig+0x57c>)
 8005fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fac:	f7fc fc9c 	bl	80028e8 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb4:	f7fc fc98 	bl	80028e8 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e184      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc6:	4b32      	ldr	r3, [pc, #200]	; (8006090 <HAL_RCC_OscConfig+0x57c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d108      	bne.n	8005fec <HAL_RCC_OscConfig+0x4d8>
 8005fda:	4b2c      	ldr	r3, [pc, #176]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fea:	e024      	b.n	8006036 <HAL_RCC_OscConfig+0x522>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	d110      	bne.n	8006016 <HAL_RCC_OscConfig+0x502>
 8005ff4:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8005ffc:	f043 0304 	orr.w	r3, r3, #4
 8006000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <HAL_RCC_OscConfig+0x578>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006014:	e00f      	b.n	8006036 <HAL_RCC_OscConfig+0x522>
 8006016:	4b1d      	ldr	r3, [pc, #116]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_RCC_OscConfig+0x578>)
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006026:	4b19      	ldr	r3, [pc, #100]	; (800608c <HAL_RCC_OscConfig+0x578>)
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <HAL_RCC_OscConfig+0x578>)
 800602e:	f023 0304 	bic.w	r3, r3, #4
 8006032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603e:	f7fc fc53 	bl	80028e8 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fc4f 	bl	80028e8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e139      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <HAL_RCC_OscConfig+0x578>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ed      	beq.n	8006046 <HAL_RCC_OscConfig+0x532>
 800606a:	e01a      	b.n	80060a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc fc3c 	bl	80028e8 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006072:	e00f      	b.n	8006094 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006074:	f7fc fc38 	bl	80028e8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d906      	bls.n	8006094 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e122      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
 8006090:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006094:	4b90      	ldr	r3, [pc, #576]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e8      	bne.n	8006074 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b8b      	ldr	r3, [pc, #556]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	4a8a      	ldr	r2, [pc, #552]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8108 	beq.w	80062ce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	f040 80d0 	bne.w	8006268 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060c8:	4b83      	ldr	r3, [pc, #524]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f003 0203 	and.w	r2, r3, #3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d130      	bne.n	800613e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	3b01      	subs	r3, #1
 80060e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d127      	bne.n	800613e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d11f      	bne.n	800613e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006108:	2a07      	cmp	r2, #7
 800610a:	bf14      	ite	ne
 800610c:	2201      	movne	r2, #1
 800610e:	2200      	moveq	r2, #0
 8006110:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006112:	4293      	cmp	r3, r2
 8006114:	d113      	bne.n	800613e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	3b01      	subs	r3, #1
 8006124:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d109      	bne.n	800613e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	3b01      	subs	r3, #1
 8006138:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d06e      	beq.n	800621c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d069      	beq.n	8006218 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006144:	4b64      	ldr	r3, [pc, #400]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006150:	4b61      	ldr	r3, [pc, #388]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0b7      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006160:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5c      	ldr	r2, [pc, #368]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800616a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800616c:	f7fc fbbc 	bl	80028e8 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fc fbb8 	bl	80028e8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e0a4      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006186:	4b54      	ldr	r3, [pc, #336]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006192:	4b51      	ldr	r3, [pc, #324]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	4b51      	ldr	r3, [pc, #324]	; (80062dc <HAL_RCC_OscConfig+0x7c8>)
 8006198:	4013      	ands	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061a2:	3a01      	subs	r2, #1
 80061a4:	0112      	lsls	r2, r2, #4
 80061a6:	4311      	orrs	r1, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ac:	0212      	lsls	r2, r2, #8
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061b4:	0852      	lsrs	r2, r2, #1
 80061b6:	3a01      	subs	r2, #1
 80061b8:	0552      	lsls	r2, r2, #21
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061c0:	0852      	lsrs	r2, r2, #1
 80061c2:	3a01      	subs	r2, #1
 80061c4:	0652      	lsls	r2, r2, #25
 80061c6:	4311      	orrs	r1, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061cc:	0912      	lsrs	r2, r2, #4
 80061ce:	0452      	lsls	r2, r2, #17
 80061d0:	430a      	orrs	r2, r1
 80061d2:	4941      	ldr	r1, [pc, #260]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061d8:	4b3f      	ldr	r3, [pc, #252]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a3e      	ldr	r2, [pc, #248]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80061de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061e4:	4b3c      	ldr	r3, [pc, #240]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4a3b      	ldr	r2, [pc, #236]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80061ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061f0:	f7fc fb7a 	bl	80028e8 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f8:	f7fc fb76 	bl	80028e8 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e062      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800620a:	4b33      	ldr	r3, [pc, #204]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006216:	e05a      	b.n	80062ce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e059      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800621c:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d152      	bne.n	80062ce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006228:	4b2b      	ldr	r3, [pc, #172]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800622e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006232:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006234:	4b28      	ldr	r3, [pc, #160]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800623a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800623e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006240:	f7fc fb52 	bl	80028e8 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006248:	f7fc fb4e 	bl	80028e8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e03a      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x734>
 8006266:	e032      	b.n	80062ce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d02d      	beq.n	80062ca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006278:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 8006298:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800629c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7fc fb21 	bl	80028e8 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062aa:	f7fc fb1d 	bl	80028e8 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e009      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_RCC_OscConfig+0x7c4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f0      	bne.n	80062aa <HAL_RCC_OscConfig+0x796>
 80062c8:	e001      	b.n	80062ce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40021000 	.word	0x40021000
 80062dc:	f99d808c 	.word	0xf99d808c

080062e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0c8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f4:	4b66      	ldr	r3, [pc, #408]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d910      	bls.n	8006324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b63      	ldr	r3, [pc, #396]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 0207 	bic.w	r2, r3, #7
 800630a:	4961      	ldr	r1, [pc, #388]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006312:	4b5f      	ldr	r3, [pc, #380]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0b0      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d04c      	beq.n	80063ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d107      	bne.n	8006348 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006338:	4b56      	ldr	r3, [pc, #344]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d121      	bne.n	8006388 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e09e      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d107      	bne.n	8006360 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006350:	4b50      	ldr	r3, [pc, #320]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d115      	bne.n	8006388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e092      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006368:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e086      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006378:	4b46      	ldr	r3, [pc, #280]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e07e      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f023 0203 	bic.w	r2, r3, #3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	493f      	ldr	r1, [pc, #252]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639a:	f7fc faa5 	bl	80028e8 <HAL_GetTick>
 800639e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a0:	e00a      	b.n	80063b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a2:	f7fc faa1 	bl	80028e8 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e066      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b8:	4b36      	ldr	r3, [pc, #216]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 020c 	and.w	r2, r3, #12
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d1eb      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	492c      	ldr	r1, [pc, #176]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d210      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b26      	ldr	r3, [pc, #152]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 0207 	bic.w	r2, r3, #7
 80063fe:	4924      	ldr	r1, [pc, #144]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_ClockConfig+0x1b0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e036      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4918      	ldr	r1, [pc, #96]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b14      	ldr	r3, [pc, #80]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4910      	ldr	r1, [pc, #64]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006456:	f000 f825 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <HAL_RCC_ClockConfig+0x1b4>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	490c      	ldr	r1, [pc, #48]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7fc f9e4 	bl	8002848 <HAL_InitTick>
 8006480:	4603      	mov	r3, r0
 8006482:	72fb      	strb	r3, [r7, #11]

  return status;
 8006484:	7afb      	ldrb	r3, [r7, #11]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40022000 	.word	0x40022000
 8006494:	40021000 	.word	0x40021000
 8006498:	0800accc 	.word	0x0800accc
 800649c:	20000000 	.word	0x20000000
 80064a0:	20000014 	.word	0x20000014

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	2300      	movs	r3, #0
 80064b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b2:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064bc:	4b3b      	ldr	r3, [pc, #236]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d121      	bne.n	8006516 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d11e      	bne.n	8006516 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064d8:	4b34      	ldr	r3, [pc, #208]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d107      	bne.n	80064f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064e4:	4b31      	ldr	r3, [pc, #196]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e005      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064f4:	4b2d      	ldr	r3, [pc, #180]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10d      	bne.n	800652c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006514:	e00a      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b04      	cmp	r3, #4
 800651a:	d102      	bne.n	8006522 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	e004      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b08      	cmp	r3, #8
 8006526:	d101      	bne.n	800652c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800652a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b0c      	cmp	r3, #12
 8006530:	d134      	bne.n	800659c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d003      	beq.n	800654a <HAL_RCC_GetSysClockFreq+0xa6>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d003      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0xac>
 8006548:	e005      	b.n	8006556 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800654a:	4b1a      	ldr	r3, [pc, #104]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800654c:	617b      	str	r3, [r7, #20]
      break;
 800654e:	e005      	b.n	800655c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006550:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006552:	617b      	str	r3, [r7, #20]
      break;
 8006554:	e002      	b.n	800655c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	617b      	str	r3, [r7, #20]
      break;
 800655a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	3301      	adds	r3, #1
 8006568:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	fb02 f203 	mul.w	r2, r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	0e5b      	lsrs	r3, r3, #25
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	3301      	adds	r3, #1
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800659c:	69bb      	ldr	r3, [r7, #24]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40021000 	.word	0x40021000
 80065b0:	0800ace4 	.word	0x0800ace4
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	007a1200 	.word	0x007a1200

080065bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000000 	.word	0x20000000

080065d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065d8:	f7ff fff0 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4904      	ldr	r1, [pc, #16]	; (80065fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0800acdc 	.word	0x0800acdc

08006600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006604:	f7ff ffda 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	0adb      	lsrs	r3, r3, #11
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4904      	ldr	r1, [pc, #16]	; (8006628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40021000 	.word	0x40021000
 8006628:	0800acdc 	.word	0x0800acdc

0800662c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006638:	4b2a      	ldr	r3, [pc, #168]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006644:	f7ff f936 	bl	80058b4 <HAL_PWREx_GetVoltageRange>
 8006648:	6178      	str	r0, [r7, #20]
 800664a:	e014      	b.n	8006676 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006656:	6593      	str	r3, [r2, #88]	; 0x58
 8006658:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800665a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006664:	f7ff f926 	bl	80058b4 <HAL_PWREx_GetVoltageRange>
 8006668:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800666a:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006674:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667c:	d10b      	bne.n	8006696 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d919      	bls.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2ba0      	cmp	r3, #160	; 0xa0
 8006688:	d902      	bls.n	8006690 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800668a:	2302      	movs	r3, #2
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e013      	b.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006690:	2301      	movs	r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	e010      	b.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	d902      	bls.n	80066a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800669c:	2303      	movs	r3, #3
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	e00a      	b.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d102      	bne.n	80066ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066a8:	2302      	movs	r3, #2
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e004      	b.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b70      	cmp	r3, #112	; 0x70
 80066b2:	d101      	bne.n	80066b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066b4:	2301      	movs	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 0207 	bic.w	r2, r3, #7
 80066c0:	4909      	ldr	r1, [pc, #36]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d001      	beq.n	80066da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40022000 	.word	0x40022000

080066ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f4:	2300      	movs	r3, #0
 80066f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006704:	2b00      	cmp	r3, #0
 8006706:	d041      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006710:	d02a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006712:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006716:	d824      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800671c:	d008      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800671e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006722:	d81e      	bhi.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800672c:	d010      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800672e:	e018      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006730:	4b86      	ldr	r3, [pc, #536]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4a85      	ldr	r2, [pc, #532]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800673c:	e015      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f000 facb 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800674e:	e00c      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3320      	adds	r3, #32
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fbb6 	bl	8006ec8 <RCCEx_PLLSAI2_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006760:	e003      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	74fb      	strb	r3, [r7, #19]
      break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006770:	4b76      	ldr	r3, [pc, #472]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677e:	4973      	ldr	r1, [pc, #460]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006786:	e001      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	7cfb      	ldrb	r3, [r7, #19]
 800678a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d041      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067a0:	d02a      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067a6:	d824      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ac:	d008      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b2:	d81e      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80067b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067bc:	d010      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067be:	e018      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067c0:	4b62      	ldr	r3, [pc, #392]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a61      	ldr	r2, [pc, #388]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067cc:	e015      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fa83 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067de:	e00c      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3320      	adds	r3, #32
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb6e 	bl	8006ec8 <RCCEx_PLLSAI2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067f0:	e003      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	74fb      	strb	r3, [r7, #19]
      break;
 80067f6:	e000      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80067f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006800:	4b52      	ldr	r3, [pc, #328]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680e:	494f      	ldr	r1, [pc, #316]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006816:	e001      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	7cfb      	ldrb	r3, [r7, #19]
 800681a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a0 	beq.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682a:	2300      	movs	r3, #0
 800682c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800682e:	4b47      	ldr	r3, [pc, #284]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006844:	4b41      	ldr	r3, [pc, #260]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	4a40      	ldr	r2, [pc, #256]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684e:	6593      	str	r3, [r2, #88]	; 0x58
 8006850:	4b3e      	ldr	r3, [pc, #248]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800685c:	2301      	movs	r3, #1
 800685e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006860:	4b3b      	ldr	r3, [pc, #236]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a3a      	ldr	r2, [pc, #232]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800686c:	f7fc f83c 	bl	80028e8 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006872:	e009      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006874:	f7fc f838 	bl	80028e8 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d902      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	74fb      	strb	r3, [r7, #19]
        break;
 8006886:	e005      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006888:	4b31      	ldr	r3, [pc, #196]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0ef      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006894:	7cfb      	ldrb	r3, [r7, #19]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d15c      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800689a:	4b2c      	ldr	r3, [pc, #176]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01f      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d019      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068b8:	4b24      	ldr	r3, [pc, #144]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c4:	4b21      	ldr	r3, [pc, #132]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	4a20      	ldr	r2, [pc, #128]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	4a1c      	ldr	r2, [pc, #112]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fb fff7 	bl	80028e8 <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fc:	e00b      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fb fff3 	bl	80028e8 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d902      	bls.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	74fb      	strb	r3, [r7, #19]
            break;
 8006914:	e006      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0ec      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006924:	7cfb      	ldrb	r3, [r7, #19]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10c      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692a:	4b08      	ldr	r3, [pc, #32]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800693a:	4904      	ldr	r1, [pc, #16]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006942:	e009      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006944:	7cfb      	ldrb	r3, [r7, #19]
 8006946:	74bb      	strb	r3, [r7, #18]
 8006948:	e006      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
 8006950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006958:	7c7b      	ldrb	r3, [r7, #17]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800695e:	4b9e      	ldr	r3, [pc, #632]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006962:	4a9d      	ldr	r2, [pc, #628]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006968:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006976:	4b98      	ldr	r3, [pc, #608]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f023 0203 	bic.w	r2, r3, #3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	4994      	ldr	r1, [pc, #592]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006998:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f023 020c 	bic.w	r2, r3, #12
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	498c      	ldr	r1, [pc, #560]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069ba:	4b87      	ldr	r3, [pc, #540]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	4983      	ldr	r1, [pc, #524]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069dc:	4b7e      	ldr	r3, [pc, #504]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	497b      	ldr	r1, [pc, #492]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0310 	and.w	r3, r3, #16
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069fe:	4b76      	ldr	r3, [pc, #472]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0c:	4972      	ldr	r1, [pc, #456]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a20:	4b6d      	ldr	r3, [pc, #436]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2e:	496a      	ldr	r1, [pc, #424]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a42:	4b65      	ldr	r3, [pc, #404]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	4961      	ldr	r1, [pc, #388]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a64:	4b5c      	ldr	r3, [pc, #368]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	4959      	ldr	r1, [pc, #356]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a86:	4b54      	ldr	r3, [pc, #336]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a94:	4950      	ldr	r1, [pc, #320]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa8:	4b4b      	ldr	r3, [pc, #300]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	4948      	ldr	r1, [pc, #288]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aca:	4b43      	ldr	r3, [pc, #268]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	493f      	ldr	r1, [pc, #252]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d028      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	4937      	ldr	r1, [pc, #220]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b0c:	4b32      	ldr	r3, [pc, #200]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4a31      	ldr	r2, [pc, #196]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b16:	60d3      	str	r3, [r2, #12]
 8006b18:	e011      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b22:	d10c      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 f8d8 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b3a:	7cfb      	ldrb	r3, [r7, #19]
 8006b3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d028      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b58:	491f      	ldr	r1, [pc, #124]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b68:	d106      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b74:	60d3      	str	r3, [r2, #12]
 8006b76:	e011      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b80:	d10c      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2101      	movs	r1, #1
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f8a9 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b92:	7cfb      	ldrb	r3, [r7, #19]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006b98:	7cfb      	ldrb	r3, [r7, #19]
 8006b9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d02b      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb6:	4908      	ldr	r1, [pc, #32]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc6:	d109      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc8:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a02      	ldr	r2, [pc, #8]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd2:	60d3      	str	r3, [r2, #12]
 8006bd4:	e014      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006bd6:	bf00      	nop
 8006bd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f877 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bf6:	7cfb      	ldrb	r3, [r7, #19]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d02f      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1a:	4928      	ldr	r1, [pc, #160]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c2a:	d10d      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	2102      	movs	r1, #2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f854 	bl	8006ce0 <RCCEx_PLLSAI1_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c3c:	7cfb      	ldrb	r3, [r7, #19]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d014      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c42:	7cfb      	ldrb	r3, [r7, #19]
 8006c44:	74bb      	strb	r3, [r7, #18]
 8006c46:	e011      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3320      	adds	r3, #32
 8006c56:	2102      	movs	r1, #2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f935 	bl	8006ec8 <RCCEx_PLLSAI2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c86:	490d      	ldr	r1, [pc, #52]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006caa:	4904      	ldr	r1, [pc, #16]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a04      	ldr	r2, [pc, #16]	; (8006cdc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	6013      	str	r3, [r2, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40021000 	.word	0x40021000

08006ce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cee:	4b75      	ldr	r3, [pc, #468]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cfa:	4b72      	ldr	r3, [pc, #456]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0203 	and.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d10d      	bne.n	8006d26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d12:	4b6c      	ldr	r3, [pc, #432]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
       ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d047      	beq.n	8006db6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
 8006d2a:	e044      	b.n	8006db6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d018      	beq.n	8006d66 <RCCEx_PLLSAI1_Config+0x86>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d825      	bhi.n	8006d84 <RCCEx_PLLSAI1_Config+0xa4>
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d002      	beq.n	8006d42 <RCCEx_PLLSAI1_Config+0x62>
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d009      	beq.n	8006d54 <RCCEx_PLLSAI1_Config+0x74>
 8006d40:	e020      	b.n	8006d84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d42:	4b60      	ldr	r3, [pc, #384]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11d      	bne.n	8006d8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d52:	e01a      	b.n	8006d8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d54:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d116      	bne.n	8006d8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e013      	b.n	8006d8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d66:	4b57      	ldr	r3, [pc, #348]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10f      	bne.n	8006d92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d72:	4b54      	ldr	r3, [pc, #336]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d82:	e006      	b.n	8006d92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e004      	b.n	8006d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10d      	bne.n	8006db6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d9a:	4b4a      	ldr	r3, [pc, #296]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	430b      	orrs	r3, r1
 8006db0:	4944      	ldr	r1, [pc, #272]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d17d      	bne.n	8006eb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006dbc:	4b41      	ldr	r3, [pc, #260]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc8:	f7fb fd8e 	bl	80028e8 <HAL_GetTick>
 8006dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dce:	e009      	b.n	8006de4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dd0:	f7fb fd8a 	bl	80028e8 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d902      	bls.n	8006de4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	73fb      	strb	r3, [r7, #15]
        break;
 8006de2:	e005      	b.n	8006df0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006de4:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1ef      	bne.n	8006dd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d160      	bne.n	8006eb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d111      	bne.n	8006e20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dfc:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	0211      	lsls	r1, r2, #8
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68d2      	ldr	r2, [r2, #12]
 8006e12:	0912      	lsrs	r2, r2, #4
 8006e14:	0452      	lsls	r2, r2, #17
 8006e16:	430a      	orrs	r2, r1
 8006e18:	492a      	ldr	r1, [pc, #168]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	610b      	str	r3, [r1, #16]
 8006e1e:	e027      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d112      	bne.n	8006e4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6892      	ldr	r2, [r2, #8]
 8006e36:	0211      	lsls	r1, r2, #8
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6912      	ldr	r2, [r2, #16]
 8006e3c:	0852      	lsrs	r2, r2, #1
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	0552      	lsls	r2, r2, #21
 8006e42:	430a      	orrs	r2, r1
 8006e44:	491f      	ldr	r1, [pc, #124]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	610b      	str	r3, [r1, #16]
 8006e4a:	e011      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6892      	ldr	r2, [r2, #8]
 8006e5c:	0211      	lsls	r1, r2, #8
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6952      	ldr	r2, [r2, #20]
 8006e62:	0852      	lsrs	r2, r2, #1
 8006e64:	3a01      	subs	r2, #1
 8006e66:	0652      	lsls	r2, r2, #25
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	4916      	ldr	r1, [pc, #88]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7c:	f7fb fd34 	bl	80028e8 <HAL_GetTick>
 8006e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e82:	e009      	b.n	8006e98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e84:	f7fb fd30 	bl	80028e8 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d902      	bls.n	8006e98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	73fb      	strb	r3, [r7, #15]
          break;
 8006e96:	e005      	b.n	8006ea4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0ef      	beq.n	8006e84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	4904      	ldr	r1, [pc, #16]	; (8006ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40021000 	.word	0x40021000

08006ec8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ed6:	4b6a      	ldr	r3, [pc, #424]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d018      	beq.n	8006f14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006ee2:	4b67      	ldr	r3, [pc, #412]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 0203 	and.w	r2, r3, #3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d10d      	bne.n	8006f0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006efa:	4b61      	ldr	r3, [pc, #388]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	091b      	lsrs	r3, r3, #4
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
       ||
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d047      	beq.n	8006f9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	73fb      	strb	r3, [r7, #15]
 8006f12:	e044      	b.n	8006f9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d018      	beq.n	8006f4e <RCCEx_PLLSAI2_Config+0x86>
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d825      	bhi.n	8006f6c <RCCEx_PLLSAI2_Config+0xa4>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d002      	beq.n	8006f2a <RCCEx_PLLSAI2_Config+0x62>
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d009      	beq.n	8006f3c <RCCEx_PLLSAI2_Config+0x74>
 8006f28:	e020      	b.n	8006f6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f2a:	4b55      	ldr	r3, [pc, #340]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d11d      	bne.n	8006f72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f3a:	e01a      	b.n	8006f72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f3c:	4b50      	ldr	r3, [pc, #320]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d116      	bne.n	8006f76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f4c:	e013      	b.n	8006f76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f4e:	4b4c      	ldr	r3, [pc, #304]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f5a:	4b49      	ldr	r3, [pc, #292]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f6a:	e006      	b.n	8006f7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e004      	b.n	8006f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f72:	bf00      	nop
 8006f74:	e002      	b.n	8006f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f76:	bf00      	nop
 8006f78:	e000      	b.n	8006f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	430b      	orrs	r3, r1
 8006f98:	4939      	ldr	r1, [pc, #228]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d167      	bne.n	8007074 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fa4:	4b36      	ldr	r3, [pc, #216]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a35      	ldr	r2, [pc, #212]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb0:	f7fb fc9a 	bl	80028e8 <HAL_GetTick>
 8006fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fb6:	e009      	b.n	8006fcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fb8:	f7fb fc96 	bl	80028e8 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d902      	bls.n	8006fcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8006fca:	e005      	b.n	8006fd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fcc:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1ef      	bne.n	8006fb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d14a      	bne.n	8007074 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d111      	bne.n	8007008 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fe4:	4b26      	ldr	r3, [pc, #152]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6892      	ldr	r2, [r2, #8]
 8006ff4:	0211      	lsls	r1, r2, #8
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	68d2      	ldr	r2, [r2, #12]
 8006ffa:	0912      	lsrs	r2, r2, #4
 8006ffc:	0452      	lsls	r2, r2, #17
 8006ffe:	430a      	orrs	r2, r1
 8007000:	491f      	ldr	r1, [pc, #124]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007002:	4313      	orrs	r3, r2
 8007004:	614b      	str	r3, [r1, #20]
 8007006:	e011      	b.n	800702c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007008:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007010:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6892      	ldr	r2, [r2, #8]
 8007018:	0211      	lsls	r1, r2, #8
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6912      	ldr	r2, [r2, #16]
 800701e:	0852      	lsrs	r2, r2, #1
 8007020:	3a01      	subs	r2, #1
 8007022:	0652      	lsls	r2, r2, #25
 8007024:	430a      	orrs	r2, r1
 8007026:	4916      	ldr	r1, [pc, #88]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007028:	4313      	orrs	r3, r2
 800702a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800702c:	4b14      	ldr	r3, [pc, #80]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a13      	ldr	r2, [pc, #76]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fb fc56 	bl	80028e8 <HAL_GetTick>
 800703c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800703e:	e009      	b.n	8007054 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007040:	f7fb fc52 	bl	80028e8 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d902      	bls.n	8007054 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	73fb      	strb	r3, [r7, #15]
          break;
 8007052:	e005      	b.n	8007060 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0ef      	beq.n	8007040 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4904      	ldr	r1, [pc, #16]	; (8007080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007070:	4313      	orrs	r3, r2
 8007072:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000

08007084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e095      	b.n	80071c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	2b00      	cmp	r3, #0
 800709c:	d108      	bne.n	80070b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a6:	d009      	beq.n	80070bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	61da      	str	r2, [r3, #28]
 80070ae:	e005      	b.n	80070bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa fea8 	bl	8001e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070fc:	d902      	bls.n	8007104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e002      	b.n	800710a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007112:	d007      	beq.n	8007124 <HAL_SPI_Init+0xa0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800711c:	d002      	beq.n	8007124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	ea42 0103 	orr.w	r1, r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f003 0204 	and.w	r2, r3, #4
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80071a0:	ea42 0103 	orr.w	r1, r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e040      	b.n	800725e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fa fe61 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2224      	movs	r2, #36	; 0x24
 80071f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f8c1 	bl	8007390 <UART_SetConfig>
 800720e:	4603      	mov	r3, r0
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e022      	b.n	800725e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fb3f 	bl	80078a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007234:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007244:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fbc6 	bl	80079e8 <UART_CheckIdleState>
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b08a      	sub	sp, #40	; 0x28
 800726a:	af02      	add	r7, sp, #8
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800727a:	2b20      	cmp	r3, #32
 800727c:	f040 8082 	bne.w	8007384 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Transmit+0x26>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e07a      	b.n	8007386 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UART_Transmit+0x38>
 800729a:	2302      	movs	r3, #2
 800729c:	e073      	b.n	8007386 <HAL_UART_Transmit+0x120>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2221      	movs	r2, #33	; 0x21
 80072b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b4:	f7fb fb18 	bl	80028e8 <HAL_GetTick>
 80072b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d108      	bne.n	80072e6 <HAL_UART_Transmit+0x80>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e003      	b.n	80072ee <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80072f6:	e02d      	b.n	8007354 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2200      	movs	r2, #0
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fbb9 	bl	8007a7a <UART_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e039      	b.n	8007386 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007324:	b292      	uxth	r2, r2
 8007326:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	3302      	adds	r3, #2
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e008      	b.n	8007342 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b292      	uxth	r2, r2
 800733a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1cb      	bne.n	80072f8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fb85 	bl	8007a7a <UART_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e005      	b.n	8007386 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e000      	b.n	8007386 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007384:	2302      	movs	r3, #2
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4bad      	ldr	r3, [pc, #692]	; (8007670 <UART_SetConfig+0x2e0>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4aa2      	ldr	r2, [pc, #648]	; (8007674 <UART_SetConfig+0x2e4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a99      	ldr	r2, [pc, #612]	; (8007678 <UART_SetConfig+0x2e8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d121      	bne.n	800745a <UART_SetConfig+0xca>
 8007416:	4b99      	ldr	r3, [pc, #612]	; (800767c <UART_SetConfig+0x2ec>)
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b03      	cmp	r3, #3
 8007422:	d817      	bhi.n	8007454 <UART_SetConfig+0xc4>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x9c>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007449 	.word	0x08007449
 8007434:	08007443 	.word	0x08007443
 8007438:	0800744f 	.word	0x0800744f
 800743c:	2301      	movs	r3, #1
 800743e:	76fb      	strb	r3, [r7, #27]
 8007440:	e0e7      	b.n	8007612 <UART_SetConfig+0x282>
 8007442:	2302      	movs	r3, #2
 8007444:	76fb      	strb	r3, [r7, #27]
 8007446:	e0e4      	b.n	8007612 <UART_SetConfig+0x282>
 8007448:	2304      	movs	r3, #4
 800744a:	76fb      	strb	r3, [r7, #27]
 800744c:	e0e1      	b.n	8007612 <UART_SetConfig+0x282>
 800744e:	2308      	movs	r3, #8
 8007450:	76fb      	strb	r3, [r7, #27]
 8007452:	e0de      	b.n	8007612 <UART_SetConfig+0x282>
 8007454:	2310      	movs	r3, #16
 8007456:	76fb      	strb	r3, [r7, #27]
 8007458:	e0db      	b.n	8007612 <UART_SetConfig+0x282>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a88      	ldr	r2, [pc, #544]	; (8007680 <UART_SetConfig+0x2f0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d132      	bne.n	80074ca <UART_SetConfig+0x13a>
 8007464:	4b85      	ldr	r3, [pc, #532]	; (800767c <UART_SetConfig+0x2ec>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	2b0c      	cmp	r3, #12
 8007470:	d828      	bhi.n	80074c4 <UART_SetConfig+0x134>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0xe8>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074c5 	.word	0x080074c5
 8007484:	080074c5 	.word	0x080074c5
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074c5 	.word	0x080074c5
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074b3 	.word	0x080074b3
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074c5 	.word	0x080074c5
 80074a8:	080074bf 	.word	0x080074bf
 80074ac:	2300      	movs	r3, #0
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e0af      	b.n	8007612 <UART_SetConfig+0x282>
 80074b2:	2302      	movs	r3, #2
 80074b4:	76fb      	strb	r3, [r7, #27]
 80074b6:	e0ac      	b.n	8007612 <UART_SetConfig+0x282>
 80074b8:	2304      	movs	r3, #4
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e0a9      	b.n	8007612 <UART_SetConfig+0x282>
 80074be:	2308      	movs	r3, #8
 80074c0:	76fb      	strb	r3, [r7, #27]
 80074c2:	e0a6      	b.n	8007612 <UART_SetConfig+0x282>
 80074c4:	2310      	movs	r3, #16
 80074c6:	76fb      	strb	r3, [r7, #27]
 80074c8:	e0a3      	b.n	8007612 <UART_SetConfig+0x282>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a6d      	ldr	r2, [pc, #436]	; (8007684 <UART_SetConfig+0x2f4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d120      	bne.n	8007516 <UART_SetConfig+0x186>
 80074d4:	4b69      	ldr	r3, [pc, #420]	; (800767c <UART_SetConfig+0x2ec>)
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074de:	2b30      	cmp	r3, #48	; 0x30
 80074e0:	d013      	beq.n	800750a <UART_SetConfig+0x17a>
 80074e2:	2b30      	cmp	r3, #48	; 0x30
 80074e4:	d814      	bhi.n	8007510 <UART_SetConfig+0x180>
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d009      	beq.n	80074fe <UART_SetConfig+0x16e>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d810      	bhi.n	8007510 <UART_SetConfig+0x180>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <UART_SetConfig+0x168>
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d006      	beq.n	8007504 <UART_SetConfig+0x174>
 80074f6:	e00b      	b.n	8007510 <UART_SetConfig+0x180>
 80074f8:	2300      	movs	r3, #0
 80074fa:	76fb      	strb	r3, [r7, #27]
 80074fc:	e089      	b.n	8007612 <UART_SetConfig+0x282>
 80074fe:	2302      	movs	r3, #2
 8007500:	76fb      	strb	r3, [r7, #27]
 8007502:	e086      	b.n	8007612 <UART_SetConfig+0x282>
 8007504:	2304      	movs	r3, #4
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e083      	b.n	8007612 <UART_SetConfig+0x282>
 800750a:	2308      	movs	r3, #8
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e080      	b.n	8007612 <UART_SetConfig+0x282>
 8007510:	2310      	movs	r3, #16
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	e07d      	b.n	8007612 <UART_SetConfig+0x282>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a5b      	ldr	r2, [pc, #364]	; (8007688 <UART_SetConfig+0x2f8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d120      	bne.n	8007562 <UART_SetConfig+0x1d2>
 8007520:	4b56      	ldr	r3, [pc, #344]	; (800767c <UART_SetConfig+0x2ec>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800752a:	2bc0      	cmp	r3, #192	; 0xc0
 800752c:	d013      	beq.n	8007556 <UART_SetConfig+0x1c6>
 800752e:	2bc0      	cmp	r3, #192	; 0xc0
 8007530:	d814      	bhi.n	800755c <UART_SetConfig+0x1cc>
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d009      	beq.n	800754a <UART_SetConfig+0x1ba>
 8007536:	2b80      	cmp	r3, #128	; 0x80
 8007538:	d810      	bhi.n	800755c <UART_SetConfig+0x1cc>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <UART_SetConfig+0x1b4>
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d006      	beq.n	8007550 <UART_SetConfig+0x1c0>
 8007542:	e00b      	b.n	800755c <UART_SetConfig+0x1cc>
 8007544:	2300      	movs	r3, #0
 8007546:	76fb      	strb	r3, [r7, #27]
 8007548:	e063      	b.n	8007612 <UART_SetConfig+0x282>
 800754a:	2302      	movs	r3, #2
 800754c:	76fb      	strb	r3, [r7, #27]
 800754e:	e060      	b.n	8007612 <UART_SetConfig+0x282>
 8007550:	2304      	movs	r3, #4
 8007552:	76fb      	strb	r3, [r7, #27]
 8007554:	e05d      	b.n	8007612 <UART_SetConfig+0x282>
 8007556:	2308      	movs	r3, #8
 8007558:	76fb      	strb	r3, [r7, #27]
 800755a:	e05a      	b.n	8007612 <UART_SetConfig+0x282>
 800755c:	2310      	movs	r3, #16
 800755e:	76fb      	strb	r3, [r7, #27]
 8007560:	e057      	b.n	8007612 <UART_SetConfig+0x282>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a49      	ldr	r2, [pc, #292]	; (800768c <UART_SetConfig+0x2fc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d125      	bne.n	80075b8 <UART_SetConfig+0x228>
 800756c:	4b43      	ldr	r3, [pc, #268]	; (800767c <UART_SetConfig+0x2ec>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800757a:	d017      	beq.n	80075ac <UART_SetConfig+0x21c>
 800757c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007580:	d817      	bhi.n	80075b2 <UART_SetConfig+0x222>
 8007582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007586:	d00b      	beq.n	80075a0 <UART_SetConfig+0x210>
 8007588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758c:	d811      	bhi.n	80075b2 <UART_SetConfig+0x222>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <UART_SetConfig+0x20a>
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d006      	beq.n	80075a6 <UART_SetConfig+0x216>
 8007598:	e00b      	b.n	80075b2 <UART_SetConfig+0x222>
 800759a:	2300      	movs	r3, #0
 800759c:	76fb      	strb	r3, [r7, #27]
 800759e:	e038      	b.n	8007612 <UART_SetConfig+0x282>
 80075a0:	2302      	movs	r3, #2
 80075a2:	76fb      	strb	r3, [r7, #27]
 80075a4:	e035      	b.n	8007612 <UART_SetConfig+0x282>
 80075a6:	2304      	movs	r3, #4
 80075a8:	76fb      	strb	r3, [r7, #27]
 80075aa:	e032      	b.n	8007612 <UART_SetConfig+0x282>
 80075ac:	2308      	movs	r3, #8
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e02f      	b.n	8007612 <UART_SetConfig+0x282>
 80075b2:	2310      	movs	r3, #16
 80075b4:	76fb      	strb	r3, [r7, #27]
 80075b6:	e02c      	b.n	8007612 <UART_SetConfig+0x282>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2d      	ldr	r2, [pc, #180]	; (8007674 <UART_SetConfig+0x2e4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d125      	bne.n	800760e <UART_SetConfig+0x27e>
 80075c2:	4b2e      	ldr	r3, [pc, #184]	; (800767c <UART_SetConfig+0x2ec>)
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d0:	d017      	beq.n	8007602 <UART_SetConfig+0x272>
 80075d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d6:	d817      	bhi.n	8007608 <UART_SetConfig+0x278>
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	d00b      	beq.n	80075f6 <UART_SetConfig+0x266>
 80075de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e2:	d811      	bhi.n	8007608 <UART_SetConfig+0x278>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <UART_SetConfig+0x260>
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ec:	d006      	beq.n	80075fc <UART_SetConfig+0x26c>
 80075ee:	e00b      	b.n	8007608 <UART_SetConfig+0x278>
 80075f0:	2300      	movs	r3, #0
 80075f2:	76fb      	strb	r3, [r7, #27]
 80075f4:	e00d      	b.n	8007612 <UART_SetConfig+0x282>
 80075f6:	2302      	movs	r3, #2
 80075f8:	76fb      	strb	r3, [r7, #27]
 80075fa:	e00a      	b.n	8007612 <UART_SetConfig+0x282>
 80075fc:	2304      	movs	r3, #4
 80075fe:	76fb      	strb	r3, [r7, #27]
 8007600:	e007      	b.n	8007612 <UART_SetConfig+0x282>
 8007602:	2308      	movs	r3, #8
 8007604:	76fb      	strb	r3, [r7, #27]
 8007606:	e004      	b.n	8007612 <UART_SetConfig+0x282>
 8007608:	2310      	movs	r3, #16
 800760a:	76fb      	strb	r3, [r7, #27]
 800760c:	e001      	b.n	8007612 <UART_SetConfig+0x282>
 800760e:	2310      	movs	r3, #16
 8007610:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a17      	ldr	r2, [pc, #92]	; (8007674 <UART_SetConfig+0x2e4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	f040 8087 	bne.w	800772c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800761e:	7efb      	ldrb	r3, [r7, #27]
 8007620:	2b08      	cmp	r3, #8
 8007622:	d837      	bhi.n	8007694 <UART_SetConfig+0x304>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x29c>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007651 	.word	0x08007651
 8007630:	08007695 	.word	0x08007695
 8007634:	08007659 	.word	0x08007659
 8007638:	08007695 	.word	0x08007695
 800763c:	0800765f 	.word	0x0800765f
 8007640:	08007695 	.word	0x08007695
 8007644:	08007695 	.word	0x08007695
 8007648:	08007695 	.word	0x08007695
 800764c:	08007667 	.word	0x08007667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007650:	f7fe ffc0 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8007654:	6178      	str	r0, [r7, #20]
        break;
 8007656:	e022      	b.n	800769e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007658:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <UART_SetConfig+0x300>)
 800765a:	617b      	str	r3, [r7, #20]
        break;
 800765c:	e01f      	b.n	800769e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765e:	f7fe ff21 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8007662:	6178      	str	r0, [r7, #20]
        break;
 8007664:	e01b      	b.n	800769e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766a:	617b      	str	r3, [r7, #20]
        break;
 800766c:	e017      	b.n	800769e <UART_SetConfig+0x30e>
 800766e:	bf00      	nop
 8007670:	efff69f3 	.word	0xefff69f3
 8007674:	40008000 	.word	0x40008000
 8007678:	40013800 	.word	0x40013800
 800767c:	40021000 	.word	0x40021000
 8007680:	40004400 	.word	0x40004400
 8007684:	40004800 	.word	0x40004800
 8007688:	40004c00 	.word	0x40004c00
 800768c:	40005000 	.word	0x40005000
 8007690:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	76bb      	strb	r3, [r7, #26]
        break;
 800769c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80f1 	beq.w	8007888 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4413      	add	r3, r2
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d305      	bcc.n	80076c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d902      	bls.n	80076c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	76bb      	strb	r3, [r7, #26]
 80076c6:	e0df      	b.n	8007888 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f04f 0100 	mov.w	r1, #0
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	020b      	lsls	r3, r1, #8
 80076da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076de:	0202      	lsls	r2, r0, #8
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	6849      	ldr	r1, [r1, #4]
 80076e4:	0849      	lsrs	r1, r1, #1
 80076e6:	4608      	mov	r0, r1
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	1814      	adds	r4, r2, r0
 80076ee:	eb43 0501 	adc.w	r5, r3, r1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f9 fa52 	bl	8000ba8 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4613      	mov	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007712:	d308      	bcc.n	8007726 <UART_SetConfig+0x396>
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800771a:	d204      	bcs.n	8007726 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	e0b0      	b.n	8007888 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	76bb      	strb	r3, [r7, #26]
 800772a:	e0ad      	b.n	8007888 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007734:	d15c      	bne.n	80077f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007736:	7efb      	ldrb	r3, [r7, #27]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d828      	bhi.n	800778e <UART_SetConfig+0x3fe>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x3b4>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007769 	.word	0x08007769
 8007748:	08007771 	.word	0x08007771
 800774c:	08007779 	.word	0x08007779
 8007750:	0800778f 	.word	0x0800778f
 8007754:	0800777f 	.word	0x0800777f
 8007758:	0800778f 	.word	0x0800778f
 800775c:	0800778f 	.word	0x0800778f
 8007760:	0800778f 	.word	0x0800778f
 8007764:	08007787 	.word	0x08007787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007768:	f7fe ff34 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 800776c:	6178      	str	r0, [r7, #20]
        break;
 800776e:	e013      	b.n	8007798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007770:	f7fe ff46 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 8007774:	6178      	str	r0, [r7, #20]
        break;
 8007776:	e00f      	b.n	8007798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007778:	4b49      	ldr	r3, [pc, #292]	; (80078a0 <UART_SetConfig+0x510>)
 800777a:	617b      	str	r3, [r7, #20]
        break;
 800777c:	e00c      	b.n	8007798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777e:	f7fe fe91 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8007782:	6178      	str	r0, [r7, #20]
        break;
 8007784:	e008      	b.n	8007798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778a:	617b      	str	r3, [r7, #20]
        break;
 800778c:	e004      	b.n	8007798 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	76bb      	strb	r3, [r7, #26]
        break;
 8007796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d074      	beq.n	8007888 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	005a      	lsls	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	441a      	add	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b0f      	cmp	r3, #15
 80077ba:	d916      	bls.n	80077ea <UART_SetConfig+0x45a>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c2:	d212      	bcs.n	80077ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f023 030f 	bic.w	r3, r3, #15
 80077cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	b29a      	uxth	r2, r3
 80077da:	89fb      	ldrh	r3, [r7, #14]
 80077dc:	4313      	orrs	r3, r2
 80077de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	89fa      	ldrh	r2, [r7, #14]
 80077e6:	60da      	str	r2, [r3, #12]
 80077e8:	e04e      	b.n	8007888 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	76bb      	strb	r3, [r7, #26]
 80077ee:	e04b      	b.n	8007888 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077f0:	7efb      	ldrb	r3, [r7, #27]
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d827      	bhi.n	8007846 <UART_SetConfig+0x4b6>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <UART_SetConfig+0x46c>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007829 	.word	0x08007829
 8007804:	08007831 	.word	0x08007831
 8007808:	08007847 	.word	0x08007847
 800780c:	08007837 	.word	0x08007837
 8007810:	08007847 	.word	0x08007847
 8007814:	08007847 	.word	0x08007847
 8007818:	08007847 	.word	0x08007847
 800781c:	0800783f 	.word	0x0800783f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007820:	f7fe fed8 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8007824:	6178      	str	r0, [r7, #20]
        break;
 8007826:	e013      	b.n	8007850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007828:	f7fe feea 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 800782c:	6178      	str	r0, [r7, #20]
        break;
 800782e:	e00f      	b.n	8007850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007830:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <UART_SetConfig+0x510>)
 8007832:	617b      	str	r3, [r7, #20]
        break;
 8007834:	e00c      	b.n	8007850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007836:	f7fe fe35 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 800783a:	6178      	str	r0, [r7, #20]
        break;
 800783c:	e008      	b.n	8007850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007842:	617b      	str	r3, [r7, #20]
        break;
 8007844:	e004      	b.n	8007850 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	76bb      	strb	r3, [r7, #26]
        break;
 800784e:	bf00      	nop
    }

    if (pclk != 0U)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d018      	beq.n	8007888 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	085a      	lsrs	r2, r3, #1
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	441a      	add	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	b29b      	uxth	r3, r3
 800786a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d908      	bls.n	8007884 <UART_SetConfig+0x4f4>
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007878:	d204      	bcs.n	8007884 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	e001      	b.n	8007888 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007894:	7ebb      	ldrb	r3, [r7, #26]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bdb0      	pop	{r4, r5, r7, pc}
 800789e:	bf00      	nop
 80078a0:	00f42400 	.word	0x00f42400

080078a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01a      	beq.n	80079ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a2:	d10a      	bne.n	80079ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	605a      	str	r2, [r3, #4]
  }
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079f8:	f7fa ff76 	bl	80028e8 <HAL_GetTick>
 80079fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d10e      	bne.n	8007a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f82d 	bl	8007a7a <UART_WaitOnFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e023      	b.n	8007a72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d10e      	bne.n	8007a56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f817 	bl	8007a7a <UART_WaitOnFlagUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e00d      	b.n	8007a72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	603b      	str	r3, [r7, #0]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a8a:	e05e      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a92:	d05a      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a94:	f7fa ff28 	bl	80028e8 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11b      	bne.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ab8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e043      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02c      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afe:	d124      	bne.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e00f      	b.n	8007b6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4013      	ands	r3, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	bf0c      	ite	eq
 8007b5a:	2301      	moveq	r3, #1
 8007b5c:	2300      	movne	r3, #0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	461a      	mov	r2, r3
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d091      	beq.n	8007a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b72:	b084      	sub	sp, #16
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	f107 001c 	add.w	r0, r7, #28
 8007b80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa23 	bl	8007fdc <USB_CoreReset>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
 8007bac:	e005      	b.n	8007bba <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bc6:	b004      	add	sp, #16
 8007bc8:	4770      	bx	lr

08007bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f023 0201 	bic.w	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d106      	bne.n	8007c18 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]
 8007c16:	e00b      	b.n	8007c30 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60da      	str	r2, [r3, #12]
 8007c2a:	e001      	b.n	8007c30 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e003      	b.n	8007c38 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007c30:	2032      	movs	r0, #50	; 0x32
 8007c32:	f7fa fe65 	bl	8002900 <HAL_Delay>

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c40:	b084      	sub	sp, #16
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	e009      	b.n	8007c74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	3340      	adds	r3, #64	; 0x40
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b0e      	cmp	r3, #14
 8007c78:	d9f2      	bls.n	8007c60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d11c      	bne.n	8007cba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e005      	b.n	8007cc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	4619      	mov	r1, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	680b      	ldr	r3, [r1, #0]
 8007ce4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ce6:	2103      	movs	r1, #3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f93d 	bl	8007f68 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cee:	2110      	movs	r1, #16
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f8f1 	bl	8007ed8 <USB_FlushTxFifo>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f90f 	bl	8007f24 <USB_FlushRxFifo>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	461a      	mov	r2, r3
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d22:	461a      	mov	r2, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2300      	movs	r3, #0
 8007d32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	e043      	b.n	8007dc2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d50:	d118      	bne.n	8007d84 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	461a      	mov	r2, r3
 8007d66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e013      	b.n	8007d96 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e008      	b.n	8007d96 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	461a      	mov	r2, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	461a      	mov	r2, r3
 8007db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3b7      	bcc.n	8007d3a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dca:	2300      	movs	r3, #0
 8007dcc:	613b      	str	r3, [r7, #16]
 8007dce:	e043      	b.n	8007e58 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de6:	d118      	bne.n	8007e1a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e013      	b.n	8007e2c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	461a      	mov	r2, r3
 8007e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e008      	b.n	8007e2c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	461a      	mov	r2, r3
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3301      	adds	r3, #1
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d3b7      	bcc.n	8007dd0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f043 0210 	orr.w	r2, r3, #16
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <USB_DevInit+0x294>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f043 0208 	orr.w	r2, r3, #8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eba:	f043 0304 	orr.w	r3, r3, #4
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ece:	b004      	add	sp, #16
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	803c3800 	.word	0x803c3800

08007ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <USB_FlushTxFifo+0x48>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d901      	bls.n	8007f04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e006      	b.n	8007f12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d0f0      	beq.n	8007ef2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	00030d40 	.word	0x00030d40

08007f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2210      	movs	r2, #16
 8007f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4a09      	ldr	r2, [pc, #36]	; (8007f64 <USB_FlushRxFifo+0x40>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d901      	bls.n	8007f48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e006      	b.n	8007f56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d0f0      	beq.n	8007f36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	00030d40 	.word	0x00030d40

08007f68 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc8:	f043 0302 	orr.w	r3, r3, #2
 8007fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a13      	ldr	r2, [pc, #76]	; (8008040 <USB_CoreReset+0x64>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e01b      	b.n	8008032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	daf2      	bge.n	8007fe8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f043 0201 	orr.w	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4a09      	ldr	r2, [pc, #36]	; (8008040 <USB_CoreReset+0x64>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e006      	b.n	8008032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b01      	cmp	r3, #1
 800802e:	d0f0      	beq.n	8008012 <USB_CoreReset+0x36>

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	00030d40 	.word	0x00030d40

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	; (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	2000001c 	.word	0x2000001c

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	; (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	; (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	; (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	; (8008094 <__libc_init_array+0x44>)
 8008064:	f002 fd80 	bl	800ab68 <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	0800b0fc 	.word	0x0800b0fc
 800808c:	0800b0fc 	.word	0x0800b0fc
 8008090:	0800b0fc 	.word	0x0800b0fc
 8008094:	0800b100 	.word	0x0800b100

08008098 <memcpy>:
 8008098:	440a      	add	r2, r1
 800809a:	4291      	cmp	r1, r2
 800809c:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a0:	d100      	bne.n	80080a4 <memcpy+0xc>
 80080a2:	4770      	bx	lr
 80080a4:	b510      	push	{r4, lr}
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d1f9      	bne.n	80080a6 <memcpy+0xe>
 80080b2:	bd10      	pop	{r4, pc}

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <__cvt>:
 80080c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	ec55 4b10 	vmov	r4, r5, d0
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	460e      	mov	r6, r1
 80080d0:	4619      	mov	r1, r3
 80080d2:	462b      	mov	r3, r5
 80080d4:	bfbb      	ittet	lt
 80080d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080da:	461d      	movlt	r5, r3
 80080dc:	2300      	movge	r3, #0
 80080de:	232d      	movlt	r3, #45	; 0x2d
 80080e0:	700b      	strb	r3, [r1, #0]
 80080e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080e8:	4691      	mov	r9, r2
 80080ea:	f023 0820 	bic.w	r8, r3, #32
 80080ee:	bfbc      	itt	lt
 80080f0:	4622      	movlt	r2, r4
 80080f2:	4614      	movlt	r4, r2
 80080f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080f8:	d005      	beq.n	8008106 <__cvt+0x42>
 80080fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080fe:	d100      	bne.n	8008102 <__cvt+0x3e>
 8008100:	3601      	adds	r6, #1
 8008102:	2102      	movs	r1, #2
 8008104:	e000      	b.n	8008108 <__cvt+0x44>
 8008106:	2103      	movs	r1, #3
 8008108:	ab03      	add	r3, sp, #12
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	ab02      	add	r3, sp, #8
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	ec45 4b10 	vmov	d0, r4, r5
 8008114:	4653      	mov	r3, sl
 8008116:	4632      	mov	r2, r6
 8008118:	f000 fe1a 	bl	8008d50 <_dtoa_r>
 800811c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008120:	4607      	mov	r7, r0
 8008122:	d102      	bne.n	800812a <__cvt+0x66>
 8008124:	f019 0f01 	tst.w	r9, #1
 8008128:	d022      	beq.n	8008170 <__cvt+0xac>
 800812a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800812e:	eb07 0906 	add.w	r9, r7, r6
 8008132:	d110      	bne.n	8008156 <__cvt+0x92>
 8008134:	783b      	ldrb	r3, [r7, #0]
 8008136:	2b30      	cmp	r3, #48	; 0x30
 8008138:	d10a      	bne.n	8008150 <__cvt+0x8c>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008146:	b918      	cbnz	r0, 8008150 <__cvt+0x8c>
 8008148:	f1c6 0601 	rsb	r6, r6, #1
 800814c:	f8ca 6000 	str.w	r6, [sl]
 8008150:	f8da 3000 	ldr.w	r3, [sl]
 8008154:	4499      	add	r9, r3
 8008156:	2200      	movs	r2, #0
 8008158:	2300      	movs	r3, #0
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	f7f8 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008162:	b108      	cbz	r0, 8008168 <__cvt+0xa4>
 8008164:	f8cd 900c 	str.w	r9, [sp, #12]
 8008168:	2230      	movs	r2, #48	; 0x30
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	454b      	cmp	r3, r9
 800816e:	d307      	bcc.n	8008180 <__cvt+0xbc>
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008174:	1bdb      	subs	r3, r3, r7
 8008176:	4638      	mov	r0, r7
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	b004      	add	sp, #16
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	1c59      	adds	r1, r3, #1
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e7f0      	b.n	800816a <__cvt+0xa6>

08008188 <__exponent>:
 8008188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818a:	4603      	mov	r3, r0
 800818c:	2900      	cmp	r1, #0
 800818e:	bfb8      	it	lt
 8008190:	4249      	neglt	r1, r1
 8008192:	f803 2b02 	strb.w	r2, [r3], #2
 8008196:	bfb4      	ite	lt
 8008198:	222d      	movlt	r2, #45	; 0x2d
 800819a:	222b      	movge	r2, #43	; 0x2b
 800819c:	2909      	cmp	r1, #9
 800819e:	7042      	strb	r2, [r0, #1]
 80081a0:	dd2a      	ble.n	80081f8 <__exponent+0x70>
 80081a2:	f10d 0407 	add.w	r4, sp, #7
 80081a6:	46a4      	mov	ip, r4
 80081a8:	270a      	movs	r7, #10
 80081aa:	46a6      	mov	lr, r4
 80081ac:	460a      	mov	r2, r1
 80081ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80081b2:	fb07 1516 	mls	r5, r7, r6, r1
 80081b6:	3530      	adds	r5, #48	; 0x30
 80081b8:	2a63      	cmp	r2, #99	; 0x63
 80081ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80081be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081c2:	4631      	mov	r1, r6
 80081c4:	dcf1      	bgt.n	80081aa <__exponent+0x22>
 80081c6:	3130      	adds	r1, #48	; 0x30
 80081c8:	f1ae 0502 	sub.w	r5, lr, #2
 80081cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081d0:	1c44      	adds	r4, r0, #1
 80081d2:	4629      	mov	r1, r5
 80081d4:	4561      	cmp	r1, ip
 80081d6:	d30a      	bcc.n	80081ee <__exponent+0x66>
 80081d8:	f10d 0209 	add.w	r2, sp, #9
 80081dc:	eba2 020e 	sub.w	r2, r2, lr
 80081e0:	4565      	cmp	r5, ip
 80081e2:	bf88      	it	hi
 80081e4:	2200      	movhi	r2, #0
 80081e6:	4413      	add	r3, r2
 80081e8:	1a18      	subs	r0, r3, r0
 80081ea:	b003      	add	sp, #12
 80081ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081f6:	e7ed      	b.n	80081d4 <__exponent+0x4c>
 80081f8:	2330      	movs	r3, #48	; 0x30
 80081fa:	3130      	adds	r1, #48	; 0x30
 80081fc:	7083      	strb	r3, [r0, #2]
 80081fe:	70c1      	strb	r1, [r0, #3]
 8008200:	1d03      	adds	r3, r0, #4
 8008202:	e7f1      	b.n	80081e8 <__exponent+0x60>

08008204 <_printf_float>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	ed2d 8b02 	vpush	{d8}
 800820c:	b08d      	sub	sp, #52	; 0x34
 800820e:	460c      	mov	r4, r1
 8008210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008214:	4616      	mov	r6, r2
 8008216:	461f      	mov	r7, r3
 8008218:	4605      	mov	r5, r0
 800821a:	f001 fd3d 	bl	8009c98 <_localeconv_r>
 800821e:	f8d0 a000 	ldr.w	sl, [r0]
 8008222:	4650      	mov	r0, sl
 8008224:	f7f7 ffd4 	bl	80001d0 <strlen>
 8008228:	2300      	movs	r3, #0
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8d8 3000 	ldr.w	r3, [r8]
 8008234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008238:	3307      	adds	r3, #7
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	f103 0208 	add.w	r2, r3, #8
 8008242:	f8c8 2000 	str.w	r2, [r8]
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800824e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	f8cd 8018 	str.w	r8, [sp, #24]
 800825c:	ee08 0a10 	vmov	s16, r0
 8008260:	4b9f      	ldr	r3, [pc, #636]	; (80084e0 <_printf_float+0x2dc>)
 8008262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc5f 	bl	8000b2c <__aeabi_dcmpun>
 800826e:	bb88      	cbnz	r0, 80082d4 <_printf_float+0xd0>
 8008270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008274:	4b9a      	ldr	r3, [pc, #616]	; (80084e0 <_printf_float+0x2dc>)
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	f7f8 fc39 	bl	8000af0 <__aeabi_dcmple>
 800827e:	bb48      	cbnz	r0, 80082d4 <_printf_float+0xd0>
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fc28 	bl	8000adc <__aeabi_dcmplt>
 800828c:	b110      	cbz	r0, 8008294 <_printf_float+0x90>
 800828e:	232d      	movs	r3, #45	; 0x2d
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008294:	4b93      	ldr	r3, [pc, #588]	; (80084e4 <_printf_float+0x2e0>)
 8008296:	4894      	ldr	r0, [pc, #592]	; (80084e8 <_printf_float+0x2e4>)
 8008298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800829c:	bf94      	ite	ls
 800829e:	4698      	movls	r8, r3
 80082a0:	4680      	movhi	r8, r0
 80082a2:	2303      	movs	r3, #3
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	f023 0204 	bic.w	r2, r3, #4
 80082ac:	6022      	str	r2, [r4, #0]
 80082ae:	f04f 0900 	mov.w	r9, #0
 80082b2:	9700      	str	r7, [sp, #0]
 80082b4:	4633      	mov	r3, r6
 80082b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f9d8 	bl	8008670 <_printf_common>
 80082c0:	3001      	adds	r0, #1
 80082c2:	f040 8090 	bne.w	80083e6 <_printf_float+0x1e2>
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	b00d      	add	sp, #52	; 0x34
 80082cc:	ecbd 8b02 	vpop	{d8}
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f8 fc26 	bl	8000b2c <__aeabi_dcmpun>
 80082e0:	b140      	cbz	r0, 80082f4 <_printf_float+0xf0>
 80082e2:	464b      	mov	r3, r9
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbc      	itt	lt
 80082e8:	232d      	movlt	r3, #45	; 0x2d
 80082ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ee:	487f      	ldr	r0, [pc, #508]	; (80084ec <_printf_float+0x2e8>)
 80082f0:	4b7f      	ldr	r3, [pc, #508]	; (80084f0 <_printf_float+0x2ec>)
 80082f2:	e7d1      	b.n	8008298 <_printf_float+0x94>
 80082f4:	6863      	ldr	r3, [r4, #4]
 80082f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082fa:	9206      	str	r2, [sp, #24]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	d13f      	bne.n	8008380 <_printf_float+0x17c>
 8008300:	2306      	movs	r3, #6
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	6861      	ldr	r1, [r4, #4]
 8008308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800830c:	2300      	movs	r3, #0
 800830e:	9303      	str	r3, [sp, #12]
 8008310:	ab0a      	add	r3, sp, #40	; 0x28
 8008312:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008316:	ab09      	add	r3, sp, #36	; 0x24
 8008318:	ec49 8b10 	vmov	d0, r8, r9
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	6022      	str	r2, [r4, #0]
 8008320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008324:	4628      	mov	r0, r5
 8008326:	f7ff fecd 	bl	80080c4 <__cvt>
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832e:	2b47      	cmp	r3, #71	; 0x47
 8008330:	4680      	mov	r8, r0
 8008332:	d108      	bne.n	8008346 <_printf_float+0x142>
 8008334:	1cc8      	adds	r0, r1, #3
 8008336:	db02      	blt.n	800833e <_printf_float+0x13a>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	4299      	cmp	r1, r3
 800833c:	dd41      	ble.n	80083c2 <_printf_float+0x1be>
 800833e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008342:	fa5f fb8b 	uxtb.w	fp, fp
 8008346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800834a:	d820      	bhi.n	800838e <_printf_float+0x18a>
 800834c:	3901      	subs	r1, #1
 800834e:	465a      	mov	r2, fp
 8008350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008354:	9109      	str	r1, [sp, #36]	; 0x24
 8008356:	f7ff ff17 	bl	8008188 <__exponent>
 800835a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835c:	1813      	adds	r3, r2, r0
 800835e:	2a01      	cmp	r2, #1
 8008360:	4681      	mov	r9, r0
 8008362:	6123      	str	r3, [r4, #16]
 8008364:	dc02      	bgt.n	800836c <_printf_float+0x168>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	07d2      	lsls	r2, r2, #31
 800836a:	d501      	bpl.n	8008370 <_printf_float+0x16c>
 800836c:	3301      	adds	r3, #1
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008374:	2b00      	cmp	r3, #0
 8008376:	d09c      	beq.n	80082b2 <_printf_float+0xae>
 8008378:	232d      	movs	r3, #45	; 0x2d
 800837a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837e:	e798      	b.n	80082b2 <_printf_float+0xae>
 8008380:	9a06      	ldr	r2, [sp, #24]
 8008382:	2a47      	cmp	r2, #71	; 0x47
 8008384:	d1be      	bne.n	8008304 <_printf_float+0x100>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bc      	bne.n	8008304 <_printf_float+0x100>
 800838a:	2301      	movs	r3, #1
 800838c:	e7b9      	b.n	8008302 <_printf_float+0xfe>
 800838e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008392:	d118      	bne.n	80083c6 <_printf_float+0x1c2>
 8008394:	2900      	cmp	r1, #0
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	dd0b      	ble.n	80083b2 <_printf_float+0x1ae>
 800839a:	6121      	str	r1, [r4, #16]
 800839c:	b913      	cbnz	r3, 80083a4 <_printf_float+0x1a0>
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	07d0      	lsls	r0, r2, #31
 80083a2:	d502      	bpl.n	80083aa <_printf_float+0x1a6>
 80083a4:	3301      	adds	r3, #1
 80083a6:	440b      	add	r3, r1
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	e7de      	b.n	8008370 <_printf_float+0x16c>
 80083b2:	b913      	cbnz	r3, 80083ba <_printf_float+0x1b6>
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	07d2      	lsls	r2, r2, #31
 80083b8:	d501      	bpl.n	80083be <_printf_float+0x1ba>
 80083ba:	3302      	adds	r3, #2
 80083bc:	e7f4      	b.n	80083a8 <_printf_float+0x1a4>
 80083be:	2301      	movs	r3, #1
 80083c0:	e7f2      	b.n	80083a8 <_printf_float+0x1a4>
 80083c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	4299      	cmp	r1, r3
 80083ca:	db05      	blt.n	80083d8 <_printf_float+0x1d4>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	6121      	str	r1, [r4, #16]
 80083d0:	07d8      	lsls	r0, r3, #31
 80083d2:	d5ea      	bpl.n	80083aa <_printf_float+0x1a6>
 80083d4:	1c4b      	adds	r3, r1, #1
 80083d6:	e7e7      	b.n	80083a8 <_printf_float+0x1a4>
 80083d8:	2900      	cmp	r1, #0
 80083da:	bfd4      	ite	le
 80083dc:	f1c1 0202 	rsble	r2, r1, #2
 80083e0:	2201      	movgt	r2, #1
 80083e2:	4413      	add	r3, r2
 80083e4:	e7e0      	b.n	80083a8 <_printf_float+0x1a4>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	055a      	lsls	r2, r3, #21
 80083ea:	d407      	bmi.n	80083fc <_printf_float+0x1f8>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	4642      	mov	r2, r8
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	d12c      	bne.n	8008454 <_printf_float+0x250>
 80083fa:	e764      	b.n	80082c6 <_printf_float+0xc2>
 80083fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008400:	f240 80e0 	bls.w	80085c4 <_printf_float+0x3c0>
 8008404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	f7f8 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008410:	2800      	cmp	r0, #0
 8008412:	d034      	beq.n	800847e <_printf_float+0x27a>
 8008414:	4a37      	ldr	r2, [pc, #220]	; (80084f4 <_printf_float+0x2f0>)
 8008416:	2301      	movs	r3, #1
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af51 	beq.w	80082c6 <_printf_float+0xc2>
 8008424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008428:	429a      	cmp	r2, r3
 800842a:	db02      	blt.n	8008432 <_printf_float+0x22e>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	07d8      	lsls	r0, r3, #31
 8008430:	d510      	bpl.n	8008454 <_printf_float+0x250>
 8008432:	ee18 3a10 	vmov	r3, s16
 8008436:	4652      	mov	r2, sl
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af41 	beq.w	80082c6 <_printf_float+0xc2>
 8008444:	f04f 0800 	mov.w	r8, #0
 8008448:	f104 091a 	add.w	r9, r4, #26
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	3b01      	subs	r3, #1
 8008450:	4543      	cmp	r3, r8
 8008452:	dc09      	bgt.n	8008468 <_printf_float+0x264>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	079b      	lsls	r3, r3, #30
 8008458:	f100 8105 	bmi.w	8008666 <_printf_float+0x462>
 800845c:	68e0      	ldr	r0, [r4, #12]
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	4298      	cmp	r0, r3
 8008462:	bfb8      	it	lt
 8008464:	4618      	movlt	r0, r3
 8008466:	e730      	b.n	80082ca <_printf_float+0xc6>
 8008468:	2301      	movs	r3, #1
 800846a:	464a      	mov	r2, r9
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f af27 	beq.w	80082c6 <_printf_float+0xc2>
 8008478:	f108 0801 	add.w	r8, r8, #1
 800847c:	e7e6      	b.n	800844c <_printf_float+0x248>
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc39      	bgt.n	80084f8 <_printf_float+0x2f4>
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <_printf_float+0x2f0>)
 8008486:	2301      	movs	r3, #1
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f af19 	beq.w	80082c6 <_printf_float+0xc2>
 8008494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008498:	4313      	orrs	r3, r2
 800849a:	d102      	bne.n	80084a2 <_printf_float+0x29e>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d5d8      	bpl.n	8008454 <_printf_float+0x250>
 80084a2:	ee18 3a10 	vmov	r3, s16
 80084a6:	4652      	mov	r2, sl
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f af09 	beq.w	80082c6 <_printf_float+0xc2>
 80084b4:	f04f 0900 	mov.w	r9, #0
 80084b8:	f104 0a1a 	add.w	sl, r4, #26
 80084bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084be:	425b      	negs	r3, r3
 80084c0:	454b      	cmp	r3, r9
 80084c2:	dc01      	bgt.n	80084c8 <_printf_float+0x2c4>
 80084c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c6:	e792      	b.n	80083ee <_printf_float+0x1ea>
 80084c8:	2301      	movs	r3, #1
 80084ca:	4652      	mov	r2, sl
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f aef7 	beq.w	80082c6 <_printf_float+0xc2>
 80084d8:	f109 0901 	add.w	r9, r9, #1
 80084dc:	e7ee      	b.n	80084bc <_printf_float+0x2b8>
 80084de:	bf00      	nop
 80084e0:	7fefffff 	.word	0x7fefffff
 80084e4:	0800ad18 	.word	0x0800ad18
 80084e8:	0800ad1c 	.word	0x0800ad1c
 80084ec:	0800ad24 	.word	0x0800ad24
 80084f0:	0800ad20 	.word	0x0800ad20
 80084f4:	0800ad28 	.word	0x0800ad28
 80084f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fc:	429a      	cmp	r2, r3
 80084fe:	bfa8      	it	ge
 8008500:	461a      	movge	r2, r3
 8008502:	2a00      	cmp	r2, #0
 8008504:	4691      	mov	r9, r2
 8008506:	dc37      	bgt.n	8008578 <_printf_float+0x374>
 8008508:	f04f 0b00 	mov.w	fp, #0
 800850c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008510:	f104 021a 	add.w	r2, r4, #26
 8008514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	eba3 0309 	sub.w	r3, r3, r9
 800851c:	455b      	cmp	r3, fp
 800851e:	dc33      	bgt.n	8008588 <_printf_float+0x384>
 8008520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008524:	429a      	cmp	r2, r3
 8008526:	db3b      	blt.n	80085a0 <_printf_float+0x39c>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07da      	lsls	r2, r3, #31
 800852c:	d438      	bmi.n	80085a0 <_printf_float+0x39c>
 800852e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	eba2 0901 	sub.w	r9, r2, r1
 800853a:	4599      	cmp	r9, r3
 800853c:	bfa8      	it	ge
 800853e:	4699      	movge	r9, r3
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	dc35      	bgt.n	80085b2 <_printf_float+0x3ae>
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800854e:	f104 0a1a 	add.w	sl, r4, #26
 8008552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	eba3 0309 	sub.w	r3, r3, r9
 800855c:	4543      	cmp	r3, r8
 800855e:	f77f af79 	ble.w	8008454 <_printf_float+0x250>
 8008562:	2301      	movs	r3, #1
 8008564:	4652      	mov	r2, sl
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f aeaa 	beq.w	80082c6 <_printf_float+0xc2>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	e7ec      	b.n	8008552 <_printf_float+0x34e>
 8008578:	4613      	mov	r3, r2
 800857a:	4631      	mov	r1, r6
 800857c:	4642      	mov	r2, r8
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	d1c0      	bne.n	8008508 <_printf_float+0x304>
 8008586:	e69e      	b.n	80082c6 <_printf_float+0xc2>
 8008588:	2301      	movs	r3, #1
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	9205      	str	r2, [sp, #20]
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f ae97 	beq.w	80082c6 <_printf_float+0xc2>
 8008598:	9a05      	ldr	r2, [sp, #20]
 800859a:	f10b 0b01 	add.w	fp, fp, #1
 800859e:	e7b9      	b.n	8008514 <_printf_float+0x310>
 80085a0:	ee18 3a10 	vmov	r3, s16
 80085a4:	4652      	mov	r2, sl
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	d1be      	bne.n	800852e <_printf_float+0x32a>
 80085b0:	e689      	b.n	80082c6 <_printf_float+0xc2>
 80085b2:	9a05      	ldr	r2, [sp, #20]
 80085b4:	464b      	mov	r3, r9
 80085b6:	4442      	add	r2, r8
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	d1c1      	bne.n	8008546 <_printf_float+0x342>
 80085c2:	e680      	b.n	80082c6 <_printf_float+0xc2>
 80085c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c6:	2a01      	cmp	r2, #1
 80085c8:	dc01      	bgt.n	80085ce <_printf_float+0x3ca>
 80085ca:	07db      	lsls	r3, r3, #31
 80085cc:	d538      	bpl.n	8008640 <_printf_float+0x43c>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4642      	mov	r2, r8
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	f43f ae74 	beq.w	80082c6 <_printf_float+0xc2>
 80085de:	ee18 3a10 	vmov	r3, s16
 80085e2:	4652      	mov	r2, sl
 80085e4:	4631      	mov	r1, r6
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b8      	blx	r7
 80085ea:	3001      	adds	r0, #1
 80085ec:	f43f ae6b 	beq.w	80082c6 <_printf_float+0xc2>
 80085f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	f7f8 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80085fc:	b9d8      	cbnz	r0, 8008636 <_printf_float+0x432>
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	f108 0201 	add.w	r2, r8, #1
 8008604:	3b01      	subs	r3, #1
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	d10e      	bne.n	800862e <_printf_float+0x42a>
 8008610:	e659      	b.n	80082c6 <_printf_float+0xc2>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f ae52 	beq.w	80082c6 <_printf_float+0xc2>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008628:	3b01      	subs	r3, #1
 800862a:	4543      	cmp	r3, r8
 800862c:	dcf1      	bgt.n	8008612 <_printf_float+0x40e>
 800862e:	464b      	mov	r3, r9
 8008630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008634:	e6dc      	b.n	80083f0 <_printf_float+0x1ec>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	f104 0a1a 	add.w	sl, r4, #26
 800863e:	e7f2      	b.n	8008626 <_printf_float+0x422>
 8008640:	2301      	movs	r3, #1
 8008642:	4642      	mov	r2, r8
 8008644:	e7df      	b.n	8008606 <_printf_float+0x402>
 8008646:	2301      	movs	r3, #1
 8008648:	464a      	mov	r2, r9
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f ae38 	beq.w	80082c6 <_printf_float+0xc2>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800865e:	1a5b      	subs	r3, r3, r1
 8008660:	4543      	cmp	r3, r8
 8008662:	dcf0      	bgt.n	8008646 <_printf_float+0x442>
 8008664:	e6fa      	b.n	800845c <_printf_float+0x258>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	f104 0919 	add.w	r9, r4, #25
 800866e:	e7f4      	b.n	800865a <_printf_float+0x456>

08008670 <_printf_common>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	4616      	mov	r6, r2
 8008676:	4699      	mov	r9, r3
 8008678:	688a      	ldr	r2, [r1, #8]
 800867a:	690b      	ldr	r3, [r1, #16]
 800867c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008680:	4293      	cmp	r3, r2
 8008682:	bfb8      	it	lt
 8008684:	4613      	movlt	r3, r2
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b10a      	cbz	r2, 8008696 <_printf_common+0x26>
 8008692:	3301      	adds	r3, #1
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	0699      	lsls	r1, r3, #26
 800869a:	bf42      	ittt	mi
 800869c:	6833      	ldrmi	r3, [r6, #0]
 800869e:	3302      	addmi	r3, #2
 80086a0:	6033      	strmi	r3, [r6, #0]
 80086a2:	6825      	ldr	r5, [r4, #0]
 80086a4:	f015 0506 	ands.w	r5, r5, #6
 80086a8:	d106      	bne.n	80086b8 <_printf_common+0x48>
 80086aa:	f104 0a19 	add.w	sl, r4, #25
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	6832      	ldr	r2, [r6, #0]
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc26      	bgt.n	8008706 <_printf_common+0x96>
 80086b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086bc:	1e13      	subs	r3, r2, #0
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	bf18      	it	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	0692      	lsls	r2, r2, #26
 80086c6:	d42b      	bmi.n	8008720 <_printf_common+0xb0>
 80086c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086cc:	4649      	mov	r1, r9
 80086ce:	4638      	mov	r0, r7
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d01e      	beq.n	8008714 <_printf_common+0xa4>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	68e5      	ldr	r5, [r4, #12]
 80086da:	6832      	ldr	r2, [r6, #0]
 80086dc:	f003 0306 	and.w	r3, r3, #6
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	bf08      	it	eq
 80086e4:	1aad      	subeq	r5, r5, r2
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	bf0c      	ite	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	2500      	movne	r5, #0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfc4      	itt	gt
 80086f6:	1a9b      	subgt	r3, r3, r2
 80086f8:	18ed      	addgt	r5, r5, r3
 80086fa:	2600      	movs	r6, #0
 80086fc:	341a      	adds	r4, #26
 80086fe:	42b5      	cmp	r5, r6
 8008700:	d11a      	bne.n	8008738 <_printf_common+0xc8>
 8008702:	2000      	movs	r0, #0
 8008704:	e008      	b.n	8008718 <_printf_common+0xa8>
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4649      	mov	r1, r9
 800870c:	4638      	mov	r0, r7
 800870e:	47c0      	blx	r8
 8008710:	3001      	adds	r0, #1
 8008712:	d103      	bne.n	800871c <_printf_common+0xac>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	3501      	adds	r5, #1
 800871e:	e7c6      	b.n	80086ae <_printf_common+0x3e>
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	2030      	movs	r0, #48	; 0x30
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800872a:	4422      	add	r2, r4
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008734:	3302      	adds	r3, #2
 8008736:	e7c7      	b.n	80086c8 <_printf_common+0x58>
 8008738:	2301      	movs	r3, #1
 800873a:	4622      	mov	r2, r4
 800873c:	4649      	mov	r1, r9
 800873e:	4638      	mov	r0, r7
 8008740:	47c0      	blx	r8
 8008742:	3001      	adds	r0, #1
 8008744:	d0e6      	beq.n	8008714 <_printf_common+0xa4>
 8008746:	3601      	adds	r6, #1
 8008748:	e7d9      	b.n	80086fe <_printf_common+0x8e>
	...

0800874c <_printf_i>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	4691      	mov	r9, r2
 8008754:	7e27      	ldrb	r7, [r4, #24]
 8008756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008758:	2f78      	cmp	r7, #120	; 0x78
 800875a:	4680      	mov	r8, r0
 800875c:	469a      	mov	sl, r3
 800875e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008762:	d807      	bhi.n	8008774 <_printf_i+0x28>
 8008764:	2f62      	cmp	r7, #98	; 0x62
 8008766:	d80a      	bhi.n	800877e <_printf_i+0x32>
 8008768:	2f00      	cmp	r7, #0
 800876a:	f000 80d8 	beq.w	800891e <_printf_i+0x1d2>
 800876e:	2f58      	cmp	r7, #88	; 0x58
 8008770:	f000 80a3 	beq.w	80088ba <_printf_i+0x16e>
 8008774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800877c:	e03a      	b.n	80087f4 <_printf_i+0xa8>
 800877e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008782:	2b15      	cmp	r3, #21
 8008784:	d8f6      	bhi.n	8008774 <_printf_i+0x28>
 8008786:	a001      	add	r0, pc, #4	; (adr r0, 800878c <_printf_i+0x40>)
 8008788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800878c:	080087e5 	.word	0x080087e5
 8008790:	080087f9 	.word	0x080087f9
 8008794:	08008775 	.word	0x08008775
 8008798:	08008775 	.word	0x08008775
 800879c:	08008775 	.word	0x08008775
 80087a0:	08008775 	.word	0x08008775
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008775 	.word	0x08008775
 80087ac:	08008775 	.word	0x08008775
 80087b0:	08008775 	.word	0x08008775
 80087b4:	08008775 	.word	0x08008775
 80087b8:	08008905 	.word	0x08008905
 80087bc:	08008829 	.word	0x08008829
 80087c0:	080088e7 	.word	0x080088e7
 80087c4:	08008775 	.word	0x08008775
 80087c8:	08008775 	.word	0x08008775
 80087cc:	08008927 	.word	0x08008927
 80087d0:	08008775 	.word	0x08008775
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008775 	.word	0x08008775
 80087dc:	08008775 	.word	0x08008775
 80087e0:	080088ef 	.word	0x080088ef
 80087e4:	680b      	ldr	r3, [r1, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	600a      	str	r2, [r1, #0]
 80087ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0a3      	b.n	8008940 <_printf_i+0x1f4>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	6808      	ldr	r0, [r1, #0]
 80087fc:	062e      	lsls	r6, r5, #24
 80087fe:	f100 0304 	add.w	r3, r0, #4
 8008802:	d50a      	bpl.n	800881a <_printf_i+0xce>
 8008804:	6805      	ldr	r5, [r0, #0]
 8008806:	600b      	str	r3, [r1, #0]
 8008808:	2d00      	cmp	r5, #0
 800880a:	da03      	bge.n	8008814 <_printf_i+0xc8>
 800880c:	232d      	movs	r3, #45	; 0x2d
 800880e:	426d      	negs	r5, r5
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	485e      	ldr	r0, [pc, #376]	; (8008990 <_printf_i+0x244>)
 8008816:	230a      	movs	r3, #10
 8008818:	e019      	b.n	800884e <_printf_i+0x102>
 800881a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800881e:	6805      	ldr	r5, [r0, #0]
 8008820:	600b      	str	r3, [r1, #0]
 8008822:	bf18      	it	ne
 8008824:	b22d      	sxthne	r5, r5
 8008826:	e7ef      	b.n	8008808 <_printf_i+0xbc>
 8008828:	680b      	ldr	r3, [r1, #0]
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	1d18      	adds	r0, r3, #4
 800882e:	6008      	str	r0, [r1, #0]
 8008830:	0628      	lsls	r0, r5, #24
 8008832:	d501      	bpl.n	8008838 <_printf_i+0xec>
 8008834:	681d      	ldr	r5, [r3, #0]
 8008836:	e002      	b.n	800883e <_printf_i+0xf2>
 8008838:	0669      	lsls	r1, r5, #25
 800883a:	d5fb      	bpl.n	8008834 <_printf_i+0xe8>
 800883c:	881d      	ldrh	r5, [r3, #0]
 800883e:	4854      	ldr	r0, [pc, #336]	; (8008990 <_printf_i+0x244>)
 8008840:	2f6f      	cmp	r7, #111	; 0x6f
 8008842:	bf0c      	ite	eq
 8008844:	2308      	moveq	r3, #8
 8008846:	230a      	movne	r3, #10
 8008848:	2100      	movs	r1, #0
 800884a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884e:	6866      	ldr	r6, [r4, #4]
 8008850:	60a6      	str	r6, [r4, #8]
 8008852:	2e00      	cmp	r6, #0
 8008854:	bfa2      	ittt	ge
 8008856:	6821      	ldrge	r1, [r4, #0]
 8008858:	f021 0104 	bicge.w	r1, r1, #4
 800885c:	6021      	strge	r1, [r4, #0]
 800885e:	b90d      	cbnz	r5, 8008864 <_printf_i+0x118>
 8008860:	2e00      	cmp	r6, #0
 8008862:	d04d      	beq.n	8008900 <_printf_i+0x1b4>
 8008864:	4616      	mov	r6, r2
 8008866:	fbb5 f1f3 	udiv	r1, r5, r3
 800886a:	fb03 5711 	mls	r7, r3, r1, r5
 800886e:	5dc7      	ldrb	r7, [r0, r7]
 8008870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008874:	462f      	mov	r7, r5
 8008876:	42bb      	cmp	r3, r7
 8008878:	460d      	mov	r5, r1
 800887a:	d9f4      	bls.n	8008866 <_printf_i+0x11a>
 800887c:	2b08      	cmp	r3, #8
 800887e:	d10b      	bne.n	8008898 <_printf_i+0x14c>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07df      	lsls	r7, r3, #31
 8008884:	d508      	bpl.n	8008898 <_printf_i+0x14c>
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4299      	cmp	r1, r3
 800888c:	bfde      	ittt	le
 800888e:	2330      	movle	r3, #48	; 0x30
 8008890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008898:	1b92      	subs	r2, r2, r6
 800889a:	6122      	str	r2, [r4, #16]
 800889c:	f8cd a000 	str.w	sl, [sp]
 80088a0:	464b      	mov	r3, r9
 80088a2:	aa03      	add	r2, sp, #12
 80088a4:	4621      	mov	r1, r4
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7ff fee2 	bl	8008670 <_printf_common>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d14c      	bne.n	800894a <_printf_i+0x1fe>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	b004      	add	sp, #16
 80088b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ba:	4835      	ldr	r0, [pc, #212]	; (8008990 <_printf_i+0x244>)
 80088bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	680e      	ldr	r6, [r1, #0]
 80088c4:	061f      	lsls	r7, r3, #24
 80088c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088ca:	600e      	str	r6, [r1, #0]
 80088cc:	d514      	bpl.n	80088f8 <_printf_i+0x1ac>
 80088ce:	07d9      	lsls	r1, r3, #31
 80088d0:	bf44      	itt	mi
 80088d2:	f043 0320 	orrmi.w	r3, r3, #32
 80088d6:	6023      	strmi	r3, [r4, #0]
 80088d8:	b91d      	cbnz	r5, 80088e2 <_printf_i+0x196>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f023 0320 	bic.w	r3, r3, #32
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2310      	movs	r3, #16
 80088e4:	e7b0      	b.n	8008848 <_printf_i+0xfc>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	2378      	movs	r3, #120	; 0x78
 80088f0:	4828      	ldr	r0, [pc, #160]	; (8008994 <_printf_i+0x248>)
 80088f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f6:	e7e3      	b.n	80088c0 <_printf_i+0x174>
 80088f8:	065e      	lsls	r6, r3, #25
 80088fa:	bf48      	it	mi
 80088fc:	b2ad      	uxthmi	r5, r5
 80088fe:	e7e6      	b.n	80088ce <_printf_i+0x182>
 8008900:	4616      	mov	r6, r2
 8008902:	e7bb      	b.n	800887c <_printf_i+0x130>
 8008904:	680b      	ldr	r3, [r1, #0]
 8008906:	6826      	ldr	r6, [r4, #0]
 8008908:	6960      	ldr	r0, [r4, #20]
 800890a:	1d1d      	adds	r5, r3, #4
 800890c:	600d      	str	r5, [r1, #0]
 800890e:	0635      	lsls	r5, r6, #24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	d501      	bpl.n	8008918 <_printf_i+0x1cc>
 8008914:	6018      	str	r0, [r3, #0]
 8008916:	e002      	b.n	800891e <_printf_i+0x1d2>
 8008918:	0671      	lsls	r1, r6, #25
 800891a:	d5fb      	bpl.n	8008914 <_printf_i+0x1c8>
 800891c:	8018      	strh	r0, [r3, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	4616      	mov	r6, r2
 8008924:	e7ba      	b.n	800889c <_printf_i+0x150>
 8008926:	680b      	ldr	r3, [r1, #0]
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	600a      	str	r2, [r1, #0]
 800892c:	681e      	ldr	r6, [r3, #0]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	2100      	movs	r1, #0
 8008932:	4630      	mov	r0, r6
 8008934:	f7f7 fc54 	bl	80001e0 <memchr>
 8008938:	b108      	cbz	r0, 800893e <_printf_i+0x1f2>
 800893a:	1b80      	subs	r0, r0, r6
 800893c:	6060      	str	r0, [r4, #4]
 800893e:	6863      	ldr	r3, [r4, #4]
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	2300      	movs	r3, #0
 8008944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008948:	e7a8      	b.n	800889c <_printf_i+0x150>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	4632      	mov	r2, r6
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d0ab      	beq.n	80088b0 <_printf_i+0x164>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	079b      	lsls	r3, r3, #30
 800895c:	d413      	bmi.n	8008986 <_printf_i+0x23a>
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	4298      	cmp	r0, r3
 8008964:	bfb8      	it	lt
 8008966:	4618      	movlt	r0, r3
 8008968:	e7a4      	b.n	80088b4 <_printf_i+0x168>
 800896a:	2301      	movs	r3, #1
 800896c:	4632      	mov	r2, r6
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	47d0      	blx	sl
 8008974:	3001      	adds	r0, #1
 8008976:	d09b      	beq.n	80088b0 <_printf_i+0x164>
 8008978:	3501      	adds	r5, #1
 800897a:	68e3      	ldr	r3, [r4, #12]
 800897c:	9903      	ldr	r1, [sp, #12]
 800897e:	1a5b      	subs	r3, r3, r1
 8008980:	42ab      	cmp	r3, r5
 8008982:	dcf2      	bgt.n	800896a <_printf_i+0x21e>
 8008984:	e7eb      	b.n	800895e <_printf_i+0x212>
 8008986:	2500      	movs	r5, #0
 8008988:	f104 0619 	add.w	r6, r4, #25
 800898c:	e7f5      	b.n	800897a <_printf_i+0x22e>
 800898e:	bf00      	nop
 8008990:	0800ad2a 	.word	0x0800ad2a
 8008994:	0800ad3b 	.word	0x0800ad3b

08008998 <iprintf>:
 8008998:	b40f      	push	{r0, r1, r2, r3}
 800899a:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <iprintf+0x2c>)
 800899c:	b513      	push	{r0, r1, r4, lr}
 800899e:	681c      	ldr	r4, [r3, #0]
 80089a0:	b124      	cbz	r4, 80089ac <iprintf+0x14>
 80089a2:	69a3      	ldr	r3, [r4, #24]
 80089a4:	b913      	cbnz	r3, 80089ac <iprintf+0x14>
 80089a6:	4620      	mov	r0, r4
 80089a8:	f001 f8d8 	bl	8009b5c <__sinit>
 80089ac:	ab05      	add	r3, sp, #20
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	68a1      	ldr	r1, [r4, #8]
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	4620      	mov	r0, r4
 80089b6:	f001 fe45 	bl	800a644 <_vfiprintf_r>
 80089ba:	b002      	add	sp, #8
 80089bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c0:	b004      	add	sp, #16
 80089c2:	4770      	bx	lr
 80089c4:	2000001c 	.word	0x2000001c

080089c8 <_puts_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	460e      	mov	r6, r1
 80089cc:	4605      	mov	r5, r0
 80089ce:	b118      	cbz	r0, 80089d8 <_puts_r+0x10>
 80089d0:	6983      	ldr	r3, [r0, #24]
 80089d2:	b90b      	cbnz	r3, 80089d8 <_puts_r+0x10>
 80089d4:	f001 f8c2 	bl	8009b5c <__sinit>
 80089d8:	69ab      	ldr	r3, [r5, #24]
 80089da:	68ac      	ldr	r4, [r5, #8]
 80089dc:	b913      	cbnz	r3, 80089e4 <_puts_r+0x1c>
 80089de:	4628      	mov	r0, r5
 80089e0:	f001 f8bc 	bl	8009b5c <__sinit>
 80089e4:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <_puts_r+0xd0>)
 80089e6:	429c      	cmp	r4, r3
 80089e8:	d120      	bne.n	8008a2c <_puts_r+0x64>
 80089ea:	686c      	ldr	r4, [r5, #4]
 80089ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d405      	bmi.n	80089fe <_puts_r+0x36>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	0598      	lsls	r0, r3, #22
 80089f6:	d402      	bmi.n	80089fe <_puts_r+0x36>
 80089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fa:	f001 f952 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	0719      	lsls	r1, r3, #28
 8008a02:	d51d      	bpl.n	8008a40 <_puts_r+0x78>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	b1db      	cbz	r3, 8008a40 <_puts_r+0x78>
 8008a08:	3e01      	subs	r6, #1
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a10:	3b01      	subs	r3, #1
 8008a12:	60a3      	str	r3, [r4, #8]
 8008a14:	bb39      	cbnz	r1, 8008a66 <_puts_r+0x9e>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da38      	bge.n	8008a8c <_puts_r+0xc4>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	210a      	movs	r1, #10
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f848 	bl	8008ab4 <__swbuf_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d011      	beq.n	8008a4c <_puts_r+0x84>
 8008a28:	250a      	movs	r5, #10
 8008a2a:	e011      	b.n	8008a50 <_puts_r+0x88>
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <_puts_r+0xd4>)
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	d101      	bne.n	8008a36 <_puts_r+0x6e>
 8008a32:	68ac      	ldr	r4, [r5, #8]
 8008a34:	e7da      	b.n	80089ec <_puts_r+0x24>
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <_puts_r+0xd8>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	bf08      	it	eq
 8008a3c:	68ec      	ldreq	r4, [r5, #12]
 8008a3e:	e7d5      	b.n	80089ec <_puts_r+0x24>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 f888 	bl	8008b58 <__swsetup_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d0dd      	beq.n	8008a08 <_puts_r+0x40>
 8008a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a52:	07da      	lsls	r2, r3, #31
 8008a54:	d405      	bmi.n	8008a62 <_puts_r+0x9a>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	059b      	lsls	r3, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_puts_r+0x9a>
 8008a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5e:	f001 f921 	bl	8009ca4 <__retarget_lock_release_recursive>
 8008a62:	4628      	mov	r0, r5
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	da04      	bge.n	8008a74 <_puts_r+0xac>
 8008a6a:	69a2      	ldr	r2, [r4, #24]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	dc06      	bgt.n	8008a7e <_puts_r+0xb6>
 8008a70:	290a      	cmp	r1, #10
 8008a72:	d004      	beq.n	8008a7e <_puts_r+0xb6>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	7019      	strb	r1, [r3, #0]
 8008a7c:	e7c5      	b.n	8008a0a <_puts_r+0x42>
 8008a7e:	4622      	mov	r2, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 f817 	bl	8008ab4 <__swbuf_r>
 8008a86:	3001      	adds	r0, #1
 8008a88:	d1bf      	bne.n	8008a0a <_puts_r+0x42>
 8008a8a:	e7df      	b.n	8008a4c <_puts_r+0x84>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	250a      	movs	r5, #10
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	701d      	strb	r5, [r3, #0]
 8008a96:	e7db      	b.n	8008a50 <_puts_r+0x88>
 8008a98:	0800ae00 	.word	0x0800ae00
 8008a9c:	0800ae20 	.word	0x0800ae20
 8008aa0:	0800ade0 	.word	0x0800ade0

08008aa4 <puts>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <puts+0xc>)
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f7ff bf8d 	b.w	80089c8 <_puts_r>
 8008aae:	bf00      	nop
 8008ab0:	2000001c 	.word	0x2000001c

08008ab4 <__swbuf_r>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	460e      	mov	r6, r1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	4605      	mov	r5, r0
 8008abc:	b118      	cbz	r0, 8008ac6 <__swbuf_r+0x12>
 8008abe:	6983      	ldr	r3, [r0, #24]
 8008ac0:	b90b      	cbnz	r3, 8008ac6 <__swbuf_r+0x12>
 8008ac2:	f001 f84b 	bl	8009b5c <__sinit>
 8008ac6:	4b21      	ldr	r3, [pc, #132]	; (8008b4c <__swbuf_r+0x98>)
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d12b      	bne.n	8008b24 <__swbuf_r+0x70>
 8008acc:	686c      	ldr	r4, [r5, #4]
 8008ace:	69a3      	ldr	r3, [r4, #24]
 8008ad0:	60a3      	str	r3, [r4, #8]
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	071a      	lsls	r2, r3, #28
 8008ad6:	d52f      	bpl.n	8008b38 <__swbuf_r+0x84>
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	b36b      	cbz	r3, 8008b38 <__swbuf_r+0x84>
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	1ac0      	subs	r0, r0, r3
 8008ae2:	6963      	ldr	r3, [r4, #20]
 8008ae4:	b2f6      	uxtb	r6, r6
 8008ae6:	4283      	cmp	r3, r0
 8008ae8:	4637      	mov	r7, r6
 8008aea:	dc04      	bgt.n	8008af6 <__swbuf_r+0x42>
 8008aec:	4621      	mov	r1, r4
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 ffa0 	bl	8009a34 <_fflush_r>
 8008af4:	bb30      	cbnz	r0, 8008b44 <__swbuf_r+0x90>
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	60a3      	str	r3, [r4, #8]
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	701e      	strb	r6, [r3, #0]
 8008b04:	6963      	ldr	r3, [r4, #20]
 8008b06:	3001      	adds	r0, #1
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	d004      	beq.n	8008b16 <__swbuf_r+0x62>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	07db      	lsls	r3, r3, #31
 8008b10:	d506      	bpl.n	8008b20 <__swbuf_r+0x6c>
 8008b12:	2e0a      	cmp	r6, #10
 8008b14:	d104      	bne.n	8008b20 <__swbuf_r+0x6c>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 ff8b 	bl	8009a34 <_fflush_r>
 8008b1e:	b988      	cbnz	r0, 8008b44 <__swbuf_r+0x90>
 8008b20:	4638      	mov	r0, r7
 8008b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <__swbuf_r+0x9c>)
 8008b26:	429c      	cmp	r4, r3
 8008b28:	d101      	bne.n	8008b2e <__swbuf_r+0x7a>
 8008b2a:	68ac      	ldr	r4, [r5, #8]
 8008b2c:	e7cf      	b.n	8008ace <__swbuf_r+0x1a>
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <__swbuf_r+0xa0>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	bf08      	it	eq
 8008b34:	68ec      	ldreq	r4, [r5, #12]
 8008b36:	e7ca      	b.n	8008ace <__swbuf_r+0x1a>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f000 f80c 	bl	8008b58 <__swsetup_r>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0cb      	beq.n	8008adc <__swbuf_r+0x28>
 8008b44:	f04f 37ff 	mov.w	r7, #4294967295
 8008b48:	e7ea      	b.n	8008b20 <__swbuf_r+0x6c>
 8008b4a:	bf00      	nop
 8008b4c:	0800ae00 	.word	0x0800ae00
 8008b50:	0800ae20 	.word	0x0800ae20
 8008b54:	0800ade0 	.word	0x0800ade0

08008b58 <__swsetup_r>:
 8008b58:	4b32      	ldr	r3, [pc, #200]	; (8008c24 <__swsetup_r+0xcc>)
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460c      	mov	r4, r1
 8008b62:	b125      	cbz	r5, 8008b6e <__swsetup_r+0x16>
 8008b64:	69ab      	ldr	r3, [r5, #24]
 8008b66:	b913      	cbnz	r3, 8008b6e <__swsetup_r+0x16>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f000 fff7 	bl	8009b5c <__sinit>
 8008b6e:	4b2e      	ldr	r3, [pc, #184]	; (8008c28 <__swsetup_r+0xd0>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	d10f      	bne.n	8008b94 <__swsetup_r+0x3c>
 8008b74:	686c      	ldr	r4, [r5, #4]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b7c:	0719      	lsls	r1, r3, #28
 8008b7e:	d42c      	bmi.n	8008bda <__swsetup_r+0x82>
 8008b80:	06dd      	lsls	r5, r3, #27
 8008b82:	d411      	bmi.n	8008ba8 <__swsetup_r+0x50>
 8008b84:	2309      	movs	r3, #9
 8008b86:	6033      	str	r3, [r6, #0]
 8008b88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	e03e      	b.n	8008c12 <__swsetup_r+0xba>
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <__swsetup_r+0xd4>)
 8008b96:	429c      	cmp	r4, r3
 8008b98:	d101      	bne.n	8008b9e <__swsetup_r+0x46>
 8008b9a:	68ac      	ldr	r4, [r5, #8]
 8008b9c:	e7eb      	b.n	8008b76 <__swsetup_r+0x1e>
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <__swsetup_r+0xd8>)
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	bf08      	it	eq
 8008ba4:	68ec      	ldreq	r4, [r5, #12]
 8008ba6:	e7e6      	b.n	8008b76 <__swsetup_r+0x1e>
 8008ba8:	0758      	lsls	r0, r3, #29
 8008baa:	d512      	bpl.n	8008bd2 <__swsetup_r+0x7a>
 8008bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bae:	b141      	cbz	r1, 8008bc2 <__swsetup_r+0x6a>
 8008bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	d002      	beq.n	8008bbe <__swsetup_r+0x66>
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f001 fc6f 	bl	800a49c <_free_r>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6063      	str	r3, [r4, #4]
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f043 0308 	orr.w	r3, r3, #8
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	b94b      	cbnz	r3, 8008bf2 <__swsetup_r+0x9a>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be8:	d003      	beq.n	8008bf2 <__swsetup_r+0x9a>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4630      	mov	r0, r6
 8008bee:	f001 f87f 	bl	8009cf0 <__smakebuf_r>
 8008bf2:	89a0      	ldrh	r0, [r4, #12]
 8008bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bf8:	f010 0301 	ands.w	r3, r0, #1
 8008bfc:	d00a      	beq.n	8008c14 <__swsetup_r+0xbc>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60a3      	str	r3, [r4, #8]
 8008c02:	6963      	ldr	r3, [r4, #20]
 8008c04:	425b      	negs	r3, r3
 8008c06:	61a3      	str	r3, [r4, #24]
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	b943      	cbnz	r3, 8008c1e <__swsetup_r+0xc6>
 8008c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c10:	d1ba      	bne.n	8008b88 <__swsetup_r+0x30>
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	0781      	lsls	r1, r0, #30
 8008c16:	bf58      	it	pl
 8008c18:	6963      	ldrpl	r3, [r4, #20]
 8008c1a:	60a3      	str	r3, [r4, #8]
 8008c1c:	e7f4      	b.n	8008c08 <__swsetup_r+0xb0>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e7f7      	b.n	8008c12 <__swsetup_r+0xba>
 8008c22:	bf00      	nop
 8008c24:	2000001c 	.word	0x2000001c
 8008c28:	0800ae00 	.word	0x0800ae00
 8008c2c:	0800ae20 	.word	0x0800ae20
 8008c30:	0800ade0 	.word	0x0800ade0

08008c34 <quorem>:
 8008c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	6903      	ldr	r3, [r0, #16]
 8008c3a:	690c      	ldr	r4, [r1, #16]
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	4607      	mov	r7, r0
 8008c40:	f2c0 8081 	blt.w	8008d46 <quorem+0x112>
 8008c44:	3c01      	subs	r4, #1
 8008c46:	f101 0814 	add.w	r8, r1, #20
 8008c4a:	f100 0514 	add.w	r5, r0, #20
 8008c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c6c:	d331      	bcc.n	8008cd2 <quorem+0x9e>
 8008c6e:	f04f 0e00 	mov.w	lr, #0
 8008c72:	4640      	mov	r0, r8
 8008c74:	46ac      	mov	ip, r5
 8008c76:	46f2      	mov	sl, lr
 8008c78:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c7c:	b293      	uxth	r3, r2
 8008c7e:	fb06 e303 	mla	r3, r6, r3, lr
 8008c82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ebaa 0303 	sub.w	r3, sl, r3
 8008c8c:	0c12      	lsrs	r2, r2, #16
 8008c8e:	f8dc a000 	ldr.w	sl, [ip]
 8008c92:	fb06 e202 	mla	r2, r6, r2, lr
 8008c96:	fa13 f38a 	uxtah	r3, r3, sl
 8008c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c9e:	fa1f fa82 	uxth.w	sl, r2
 8008ca2:	f8dc 2000 	ldr.w	r2, [ip]
 8008ca6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008caa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb4:	4581      	cmp	r9, r0
 8008cb6:	f84c 3b04 	str.w	r3, [ip], #4
 8008cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008cbe:	d2db      	bcs.n	8008c78 <quorem+0x44>
 8008cc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cc4:	b92b      	cbnz	r3, 8008cd2 <quorem+0x9e>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	3b04      	subs	r3, #4
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	d32e      	bcc.n	8008d2e <quorem+0xfa>
 8008cd0:	613c      	str	r4, [r7, #16]
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f001 fad2 	bl	800a27c <__mcmp>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	db24      	blt.n	8008d26 <quorem+0xf2>
 8008cdc:	3601      	adds	r6, #1
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f04f 0c00 	mov.w	ip, #0
 8008ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ce8:	f8d0 e000 	ldr.w	lr, [r0]
 8008cec:	b293      	uxth	r3, r2
 8008cee:	ebac 0303 	sub.w	r3, ip, r3
 8008cf2:	0c12      	lsrs	r2, r2, #16
 8008cf4:	fa13 f38e 	uxtah	r3, r3, lr
 8008cf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d06:	45c1      	cmp	r9, r8
 8008d08:	f840 3b04 	str.w	r3, [r0], #4
 8008d0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d10:	d2e8      	bcs.n	8008ce4 <quorem+0xb0>
 8008d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d1a:	b922      	cbnz	r2, 8008d26 <quorem+0xf2>
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	d30a      	bcc.n	8008d3a <quorem+0x106>
 8008d24:	613c      	str	r4, [r7, #16]
 8008d26:	4630      	mov	r0, r6
 8008d28:	b003      	add	sp, #12
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	3b04      	subs	r3, #4
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d1cc      	bne.n	8008cd0 <quorem+0x9c>
 8008d36:	3c01      	subs	r4, #1
 8008d38:	e7c7      	b.n	8008cca <quorem+0x96>
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d1f0      	bne.n	8008d24 <quorem+0xf0>
 8008d42:	3c01      	subs	r4, #1
 8008d44:	e7eb      	b.n	8008d1e <quorem+0xea>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e7ee      	b.n	8008d28 <quorem+0xf4>
 8008d4a:	0000      	movs	r0, r0
 8008d4c:	0000      	movs	r0, r0
	...

08008d50 <_dtoa_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	ed2d 8b02 	vpush	{d8}
 8008d58:	ec57 6b10 	vmov	r6, r7, d0
 8008d5c:	b095      	sub	sp, #84	; 0x54
 8008d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d64:	9105      	str	r1, [sp, #20]
 8008d66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d70:	b975      	cbnz	r5, 8008d90 <_dtoa_r+0x40>
 8008d72:	2010      	movs	r0, #16
 8008d74:	f000 fffc 	bl	8009d70 <malloc>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d7c:	b920      	cbnz	r0, 8008d88 <_dtoa_r+0x38>
 8008d7e:	4bb2      	ldr	r3, [pc, #712]	; (8009048 <_dtoa_r+0x2f8>)
 8008d80:	21ea      	movs	r1, #234	; 0xea
 8008d82:	48b2      	ldr	r0, [pc, #712]	; (800904c <_dtoa_r+0x2fc>)
 8008d84:	f001 fdf4 	bl	800a970 <__assert_func>
 8008d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d8c:	6005      	str	r5, [r0, #0]
 8008d8e:	60c5      	str	r5, [r0, #12]
 8008d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	b151      	cbz	r1, 8008dac <_dtoa_r+0x5c>
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	604a      	str	r2, [r1, #4]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4093      	lsls	r3, r2
 8008d9e:	608b      	str	r3, [r1, #8]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f001 f82d 	bl	8009e00 <_Bfree>
 8008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	1e3b      	subs	r3, r7, #0
 8008dae:	bfb9      	ittee	lt
 8008db0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008db4:	9303      	strlt	r3, [sp, #12]
 8008db6:	2300      	movge	r3, #0
 8008db8:	f8c8 3000 	strge.w	r3, [r8]
 8008dbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008dc0:	4ba3      	ldr	r3, [pc, #652]	; (8009050 <_dtoa_r+0x300>)
 8008dc2:	bfbc      	itt	lt
 8008dc4:	2201      	movlt	r2, #1
 8008dc6:	f8c8 2000 	strlt.w	r2, [r8]
 8008dca:	ea33 0309 	bics.w	r3, r3, r9
 8008dce:	d11b      	bne.n	8008e08 <_dtoa_r+0xb8>
 8008dd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ddc:	4333      	orrs	r3, r6
 8008dde:	f000 857a 	beq.w	80098d6 <_dtoa_r+0xb86>
 8008de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de4:	b963      	cbnz	r3, 8008e00 <_dtoa_r+0xb0>
 8008de6:	4b9b      	ldr	r3, [pc, #620]	; (8009054 <_dtoa_r+0x304>)
 8008de8:	e024      	b.n	8008e34 <_dtoa_r+0xe4>
 8008dea:	4b9b      	ldr	r3, [pc, #620]	; (8009058 <_dtoa_r+0x308>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	9800      	ldr	r0, [sp, #0]
 8008df6:	b015      	add	sp, #84	; 0x54
 8008df8:	ecbd 8b02 	vpop	{d8}
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	4b94      	ldr	r3, [pc, #592]	; (8009054 <_dtoa_r+0x304>)
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	3303      	adds	r3, #3
 8008e06:	e7f3      	b.n	8008df0 <_dtoa_r+0xa0>
 8008e08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	ec51 0b17 	vmov	r0, r1, d7
 8008e12:	2300      	movs	r3, #0
 8008e14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008e18:	f7f7 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	b158      	cbz	r0, 8008e38 <_dtoa_r+0xe8>
 8008e20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e22:	2301      	movs	r3, #1
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8551 	beq.w	80098d0 <_dtoa_r+0xb80>
 8008e2e:	488b      	ldr	r0, [pc, #556]	; (800905c <_dtoa_r+0x30c>)
 8008e30:	6018      	str	r0, [r3, #0]
 8008e32:	1e43      	subs	r3, r0, #1
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	e7dd      	b.n	8008df4 <_dtoa_r+0xa4>
 8008e38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008e3c:	aa12      	add	r2, sp, #72	; 0x48
 8008e3e:	a913      	add	r1, sp, #76	; 0x4c
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 fabf 	bl	800a3c4 <__d2b>
 8008e46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e4a:	4683      	mov	fp, r0
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	d07c      	beq.n	8008f4a <_dtoa_r+0x1fa>
 8008e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008e5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e6a:	4b7d      	ldr	r3, [pc, #500]	; (8009060 <_dtoa_r+0x310>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fa09 	bl	8000288 <__aeabi_dsub>
 8008e76:	a36e      	add	r3, pc, #440	; (adr r3, 8009030 <_dtoa_r+0x2e0>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fbbc 	bl	80005f8 <__aeabi_dmul>
 8008e80:	a36d      	add	r3, pc, #436	; (adr r3, 8009038 <_dtoa_r+0x2e8>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fa01 	bl	800028c <__adddf3>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	460f      	mov	r7, r1
 8008e90:	f7f7 fb48 	bl	8000524 <__aeabi_i2d>
 8008e94:	a36a      	add	r3, pc, #424	; (adr r3, 8009040 <_dtoa_r+0x2f0>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f7 f9f1 	bl	800028c <__adddf3>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	f7f7 fe53 	bl	8000b58 <__aeabi_d2iz>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 fe0e 	bl	8000adc <__aeabi_dcmplt>
 8008ec0:	b148      	cbz	r0, 8008ed6 <_dtoa_r+0x186>
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	f7f7 fb2e 	bl	8000524 <__aeabi_i2d>
 8008ec8:	4632      	mov	r2, r6
 8008eca:	463b      	mov	r3, r7
 8008ecc:	f7f7 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ed0:	b908      	cbnz	r0, 8008ed6 <_dtoa_r+0x186>
 8008ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ed6:	f1ba 0f16 	cmp.w	sl, #22
 8008eda:	d854      	bhi.n	8008f86 <_dtoa_r+0x236>
 8008edc:	4b61      	ldr	r3, [pc, #388]	; (8009064 <_dtoa_r+0x314>)
 8008ede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008eea:	f7f7 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d04b      	beq.n	8008f8a <_dtoa_r+0x23a>
 8008ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	930e      	str	r3, [sp, #56]	; 0x38
 8008efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008efc:	1b5d      	subs	r5, r3, r5
 8008efe:	1e6b      	subs	r3, r5, #1
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	bf43      	ittte	mi
 8008f04:	2300      	movmi	r3, #0
 8008f06:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f0a:	9304      	strmi	r3, [sp, #16]
 8008f0c:	f04f 0800 	movpl.w	r8, #0
 8008f10:	f1ba 0f00 	cmp.w	sl, #0
 8008f14:	db3b      	blt.n	8008f8e <_dtoa_r+0x23e>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f1c:	4453      	add	r3, sl
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	2300      	movs	r3, #0
 8008f22:	9306      	str	r3, [sp, #24]
 8008f24:	9b05      	ldr	r3, [sp, #20]
 8008f26:	2b09      	cmp	r3, #9
 8008f28:	d869      	bhi.n	8008ffe <_dtoa_r+0x2ae>
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	bfc4      	itt	gt
 8008f2e:	3b04      	subgt	r3, #4
 8008f30:	9305      	strgt	r3, [sp, #20]
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	f1a3 0302 	sub.w	r3, r3, #2
 8008f38:	bfcc      	ite	gt
 8008f3a:	2500      	movgt	r5, #0
 8008f3c:	2501      	movle	r5, #1
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d869      	bhi.n	8009016 <_dtoa_r+0x2c6>
 8008f42:	e8df f003 	tbb	[pc, r3]
 8008f46:	4e2c      	.short	0x4e2c
 8008f48:	5a4c      	.short	0x5a4c
 8008f4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008f4e:	441d      	add	r5, r3
 8008f50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	bfc1      	itttt	gt
 8008f58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f60:	fa09 f303 	lslgt.w	r3, r9, r3
 8008f64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f68:	bfda      	itte	le
 8008f6a:	f1c3 0320 	rsble	r3, r3, #32
 8008f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8008f72:	4318      	orrgt	r0, r3
 8008f74:	f7f7 fac6 	bl	8000504 <__aeabi_ui2d>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f80:	3d01      	subs	r5, #1
 8008f82:	9310      	str	r3, [sp, #64]	; 0x40
 8008f84:	e771      	b.n	8008e6a <_dtoa_r+0x11a>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e7b6      	b.n	8008ef8 <_dtoa_r+0x1a8>
 8008f8a:	900e      	str	r0, [sp, #56]	; 0x38
 8008f8c:	e7b5      	b.n	8008efa <_dtoa_r+0x1aa>
 8008f8e:	f1ca 0300 	rsb	r3, sl, #0
 8008f92:	9306      	str	r3, [sp, #24]
 8008f94:	2300      	movs	r3, #0
 8008f96:	eba8 080a 	sub.w	r8, r8, sl
 8008f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f9c:	e7c2      	b.n	8008f24 <_dtoa_r+0x1d4>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9308      	str	r3, [sp, #32]
 8008fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dc39      	bgt.n	800901c <_dtoa_r+0x2cc>
 8008fa8:	f04f 0901 	mov.w	r9, #1
 8008fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008fb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fb8:	2200      	movs	r2, #0
 8008fba:	6042      	str	r2, [r0, #4]
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	f102 0614 	add.w	r6, r2, #20
 8008fc2:	429e      	cmp	r6, r3
 8008fc4:	6841      	ldr	r1, [r0, #4]
 8008fc6:	d92f      	bls.n	8009028 <_dtoa_r+0x2d8>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fed9 	bl	8009d80 <_Balloc>
 8008fce:	9000      	str	r0, [sp, #0]
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d14b      	bne.n	800906c <_dtoa_r+0x31c>
 8008fd4:	4b24      	ldr	r3, [pc, #144]	; (8009068 <_dtoa_r+0x318>)
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fdc:	e6d1      	b.n	8008d82 <_dtoa_r+0x32>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e7de      	b.n	8008fa0 <_dtoa_r+0x250>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe8:	eb0a 0903 	add.w	r9, sl, r3
 8008fec:	f109 0301 	add.w	r3, r9, #1
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	bfb8      	it	lt
 8008ff6:	2301      	movlt	r3, #1
 8008ff8:	e7dd      	b.n	8008fb6 <_dtoa_r+0x266>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e7f2      	b.n	8008fe4 <_dtoa_r+0x294>
 8008ffe:	2501      	movs	r5, #1
 8009000:	2300      	movs	r3, #0
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	9508      	str	r5, [sp, #32]
 8009006:	f04f 39ff 	mov.w	r9, #4294967295
 800900a:	2200      	movs	r2, #0
 800900c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009010:	2312      	movs	r3, #18
 8009012:	9209      	str	r2, [sp, #36]	; 0x24
 8009014:	e7cf      	b.n	8008fb6 <_dtoa_r+0x266>
 8009016:	2301      	movs	r3, #1
 8009018:	9308      	str	r3, [sp, #32]
 800901a:	e7f4      	b.n	8009006 <_dtoa_r+0x2b6>
 800901c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009020:	f8cd 9004 	str.w	r9, [sp, #4]
 8009024:	464b      	mov	r3, r9
 8009026:	e7c6      	b.n	8008fb6 <_dtoa_r+0x266>
 8009028:	3101      	adds	r1, #1
 800902a:	6041      	str	r1, [r0, #4]
 800902c:	0052      	lsls	r2, r2, #1
 800902e:	e7c6      	b.n	8008fbe <_dtoa_r+0x26e>
 8009030:	636f4361 	.word	0x636f4361
 8009034:	3fd287a7 	.word	0x3fd287a7
 8009038:	8b60c8b3 	.word	0x8b60c8b3
 800903c:	3fc68a28 	.word	0x3fc68a28
 8009040:	509f79fb 	.word	0x509f79fb
 8009044:	3fd34413 	.word	0x3fd34413
 8009048:	0800ad59 	.word	0x0800ad59
 800904c:	0800ad70 	.word	0x0800ad70
 8009050:	7ff00000 	.word	0x7ff00000
 8009054:	0800ad55 	.word	0x0800ad55
 8009058:	0800ad4c 	.word	0x0800ad4c
 800905c:	0800ad29 	.word	0x0800ad29
 8009060:	3ff80000 	.word	0x3ff80000
 8009064:	0800aec8 	.word	0x0800aec8
 8009068:	0800adcf 	.word	0x0800adcf
 800906c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906e:	9a00      	ldr	r2, [sp, #0]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	2b0e      	cmp	r3, #14
 8009076:	f200 80ad 	bhi.w	80091d4 <_dtoa_r+0x484>
 800907a:	2d00      	cmp	r5, #0
 800907c:	f000 80aa 	beq.w	80091d4 <_dtoa_r+0x484>
 8009080:	f1ba 0f00 	cmp.w	sl, #0
 8009084:	dd36      	ble.n	80090f4 <_dtoa_r+0x3a4>
 8009086:	4ac3      	ldr	r2, [pc, #780]	; (8009394 <_dtoa_r+0x644>)
 8009088:	f00a 030f 	and.w	r3, sl, #15
 800908c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009090:	ed93 7b00 	vldr	d7, [r3]
 8009094:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009098:	ea4f 172a 	mov.w	r7, sl, asr #4
 800909c:	eeb0 8a47 	vmov.f32	s16, s14
 80090a0:	eef0 8a67 	vmov.f32	s17, s15
 80090a4:	d016      	beq.n	80090d4 <_dtoa_r+0x384>
 80090a6:	4bbc      	ldr	r3, [pc, #752]	; (8009398 <_dtoa_r+0x648>)
 80090a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090b0:	f7f7 fbcc 	bl	800084c <__aeabi_ddiv>
 80090b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b8:	f007 070f 	and.w	r7, r7, #15
 80090bc:	2503      	movs	r5, #3
 80090be:	4eb6      	ldr	r6, [pc, #728]	; (8009398 <_dtoa_r+0x648>)
 80090c0:	b957      	cbnz	r7, 80090d8 <_dtoa_r+0x388>
 80090c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c6:	ec53 2b18 	vmov	r2, r3, d8
 80090ca:	f7f7 fbbf 	bl	800084c <__aeabi_ddiv>
 80090ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d2:	e029      	b.n	8009128 <_dtoa_r+0x3d8>
 80090d4:	2502      	movs	r5, #2
 80090d6:	e7f2      	b.n	80090be <_dtoa_r+0x36e>
 80090d8:	07f9      	lsls	r1, r7, #31
 80090da:	d508      	bpl.n	80090ee <_dtoa_r+0x39e>
 80090dc:	ec51 0b18 	vmov	r0, r1, d8
 80090e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090e4:	f7f7 fa88 	bl	80005f8 <__aeabi_dmul>
 80090e8:	ec41 0b18 	vmov	d8, r0, r1
 80090ec:	3501      	adds	r5, #1
 80090ee:	107f      	asrs	r7, r7, #1
 80090f0:	3608      	adds	r6, #8
 80090f2:	e7e5      	b.n	80090c0 <_dtoa_r+0x370>
 80090f4:	f000 80a6 	beq.w	8009244 <_dtoa_r+0x4f4>
 80090f8:	f1ca 0600 	rsb	r6, sl, #0
 80090fc:	4ba5      	ldr	r3, [pc, #660]	; (8009394 <_dtoa_r+0x644>)
 80090fe:	4fa6      	ldr	r7, [pc, #664]	; (8009398 <_dtoa_r+0x648>)
 8009100:	f006 020f 	and.w	r2, r6, #15
 8009104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009118:	1136      	asrs	r6, r6, #4
 800911a:	2300      	movs	r3, #0
 800911c:	2502      	movs	r5, #2
 800911e:	2e00      	cmp	r6, #0
 8009120:	f040 8085 	bne.w	800922e <_dtoa_r+0x4de>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1d2      	bne.n	80090ce <_dtoa_r+0x37e>
 8009128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 808c 	beq.w	8009248 <_dtoa_r+0x4f8>
 8009130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009134:	4b99      	ldr	r3, [pc, #612]	; (800939c <_dtoa_r+0x64c>)
 8009136:	2200      	movs	r2, #0
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fcce 	bl	8000adc <__aeabi_dcmplt>
 8009140:	2800      	cmp	r0, #0
 8009142:	f000 8081 	beq.w	8009248 <_dtoa_r+0x4f8>
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d07d      	beq.n	8009248 <_dtoa_r+0x4f8>
 800914c:	f1b9 0f00 	cmp.w	r9, #0
 8009150:	dd3c      	ble.n	80091cc <_dtoa_r+0x47c>
 8009152:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	2200      	movs	r2, #0
 800915a:	4b91      	ldr	r3, [pc, #580]	; (80093a0 <_dtoa_r+0x650>)
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009168:	3501      	adds	r5, #1
 800916a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800916e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009172:	4628      	mov	r0, r5
 8009174:	f7f7 f9d6 	bl	8000524 <__aeabi_i2d>
 8009178:	4632      	mov	r2, r6
 800917a:	463b      	mov	r3, r7
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	4b88      	ldr	r3, [pc, #544]	; (80093a4 <_dtoa_r+0x654>)
 8009182:	2200      	movs	r2, #0
 8009184:	f7f7 f882 	bl	800028c <__adddf3>
 8009188:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800918c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d15c      	bne.n	8009252 <_dtoa_r+0x502>
 8009198:	4b83      	ldr	r3, [pc, #524]	; (80093a8 <_dtoa_r+0x658>)
 800919a:	2200      	movs	r2, #0
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 f872 	bl	8000288 <__aeabi_dsub>
 80091a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a8:	4606      	mov	r6, r0
 80091aa:	460f      	mov	r7, r1
 80091ac:	f7f7 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f040 8296 	bne.w	80096e2 <_dtoa_r+0x992>
 80091b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80091ba:	4630      	mov	r0, r6
 80091bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c0:	4639      	mov	r1, r7
 80091c2:	f7f7 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f040 8288 	bne.w	80096dc <_dtoa_r+0x98c>
 80091cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f2c0 8158 	blt.w	800948c <_dtoa_r+0x73c>
 80091dc:	f1ba 0f0e 	cmp.w	sl, #14
 80091e0:	f300 8154 	bgt.w	800948c <_dtoa_r+0x73c>
 80091e4:	4b6b      	ldr	r3, [pc, #428]	; (8009394 <_dtoa_r+0x644>)
 80091e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f280 80e3 	bge.w	80093bc <_dtoa_r+0x66c>
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f300 80df 	bgt.w	80093bc <_dtoa_r+0x66c>
 80091fe:	f040 826d 	bne.w	80096dc <_dtoa_r+0x98c>
 8009202:	4b69      	ldr	r3, [pc, #420]	; (80093a8 <_dtoa_r+0x658>)
 8009204:	2200      	movs	r2, #0
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 f9f5 	bl	80005f8 <__aeabi_dmul>
 800920e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009212:	f7f7 fc77 	bl	8000b04 <__aeabi_dcmpge>
 8009216:	9e01      	ldr	r6, [sp, #4]
 8009218:	4637      	mov	r7, r6
 800921a:	2800      	cmp	r0, #0
 800921c:	f040 8243 	bne.w	80096a6 <_dtoa_r+0x956>
 8009220:	9d00      	ldr	r5, [sp, #0]
 8009222:	2331      	movs	r3, #49	; 0x31
 8009224:	f805 3b01 	strb.w	r3, [r5], #1
 8009228:	f10a 0a01 	add.w	sl, sl, #1
 800922c:	e23f      	b.n	80096ae <_dtoa_r+0x95e>
 800922e:	07f2      	lsls	r2, r6, #31
 8009230:	d505      	bpl.n	800923e <_dtoa_r+0x4ee>
 8009232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	3501      	adds	r5, #1
 800923c:	2301      	movs	r3, #1
 800923e:	1076      	asrs	r6, r6, #1
 8009240:	3708      	adds	r7, #8
 8009242:	e76c      	b.n	800911e <_dtoa_r+0x3ce>
 8009244:	2502      	movs	r5, #2
 8009246:	e76f      	b.n	8009128 <_dtoa_r+0x3d8>
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	f8cd a01c 	str.w	sl, [sp, #28]
 800924e:	930c      	str	r3, [sp, #48]	; 0x30
 8009250:	e78d      	b.n	800916e <_dtoa_r+0x41e>
 8009252:	9900      	ldr	r1, [sp, #0]
 8009254:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009258:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <_dtoa_r+0x644>)
 800925a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800925e:	4401      	add	r1, r0
 8009260:	9102      	str	r1, [sp, #8]
 8009262:	9908      	ldr	r1, [sp, #32]
 8009264:	eeb0 8a47 	vmov.f32	s16, s14
 8009268:	eef0 8a67 	vmov.f32	s17, s15
 800926c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009274:	2900      	cmp	r1, #0
 8009276:	d045      	beq.n	8009304 <_dtoa_r+0x5b4>
 8009278:	494c      	ldr	r1, [pc, #304]	; (80093ac <_dtoa_r+0x65c>)
 800927a:	2000      	movs	r0, #0
 800927c:	f7f7 fae6 	bl	800084c <__aeabi_ddiv>
 8009280:	ec53 2b18 	vmov	r2, r3, d8
 8009284:	f7f7 f800 	bl	8000288 <__aeabi_dsub>
 8009288:	9d00      	ldr	r5, [sp, #0]
 800928a:	ec41 0b18 	vmov	d8, r0, r1
 800928e:	4639      	mov	r1, r7
 8009290:	4630      	mov	r0, r6
 8009292:	f7f7 fc61 	bl	8000b58 <__aeabi_d2iz>
 8009296:	900c      	str	r0, [sp, #48]	; 0x30
 8009298:	f7f7 f944 	bl	8000524 <__aeabi_i2d>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	f7f6 fff0 	bl	8000288 <__aeabi_dsub>
 80092a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092aa:	3330      	adds	r3, #48	; 0x30
 80092ac:	f805 3b01 	strb.w	r3, [r5], #1
 80092b0:	ec53 2b18 	vmov	r2, r3, d8
 80092b4:	4606      	mov	r6, r0
 80092b6:	460f      	mov	r7, r1
 80092b8:	f7f7 fc10 	bl	8000adc <__aeabi_dcmplt>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d165      	bne.n	800938c <_dtoa_r+0x63c>
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	4935      	ldr	r1, [pc, #212]	; (800939c <_dtoa_r+0x64c>)
 80092c6:	2000      	movs	r0, #0
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	ec53 2b18 	vmov	r2, r3, d8
 80092d0:	f7f7 fc04 	bl	8000adc <__aeabi_dcmplt>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	f040 80b9 	bne.w	800944c <_dtoa_r+0x6fc>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	429d      	cmp	r5, r3
 80092de:	f43f af75 	beq.w	80091cc <_dtoa_r+0x47c>
 80092e2:	4b2f      	ldr	r3, [pc, #188]	; (80093a0 <_dtoa_r+0x650>)
 80092e4:	ec51 0b18 	vmov	r0, r1, d8
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	4b2c      	ldr	r3, [pc, #176]	; (80093a0 <_dtoa_r+0x650>)
 80092f0:	ec41 0b18 	vmov	d8, r0, r1
 80092f4:	2200      	movs	r2, #0
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	e7c4      	b.n	800928e <_dtoa_r+0x53e>
 8009304:	ec51 0b17 	vmov	r0, r1, d7
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	9d00      	ldr	r5, [sp, #0]
 8009310:	930c      	str	r3, [sp, #48]	; 0x30
 8009312:	ec41 0b18 	vmov	d8, r0, r1
 8009316:	4639      	mov	r1, r7
 8009318:	4630      	mov	r0, r6
 800931a:	f7f7 fc1d 	bl	8000b58 <__aeabi_d2iz>
 800931e:	9011      	str	r0, [sp, #68]	; 0x44
 8009320:	f7f7 f900 	bl	8000524 <__aeabi_i2d>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffac 	bl	8000288 <__aeabi_dsub>
 8009330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009332:	3330      	adds	r3, #48	; 0x30
 8009334:	f805 3b01 	strb.w	r3, [r5], #1
 8009338:	9b02      	ldr	r3, [sp, #8]
 800933a:	429d      	cmp	r5, r3
 800933c:	4606      	mov	r6, r0
 800933e:	460f      	mov	r7, r1
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	d134      	bne.n	80093b0 <_dtoa_r+0x660>
 8009346:	4b19      	ldr	r3, [pc, #100]	; (80093ac <_dtoa_r+0x65c>)
 8009348:	ec51 0b18 	vmov	r0, r1, d8
 800934c:	f7f6 ff9e 	bl	800028c <__adddf3>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 fbde 	bl	8000b18 <__aeabi_dcmpgt>
 800935c:	2800      	cmp	r0, #0
 800935e:	d175      	bne.n	800944c <_dtoa_r+0x6fc>
 8009360:	ec53 2b18 	vmov	r2, r3, d8
 8009364:	4911      	ldr	r1, [pc, #68]	; (80093ac <_dtoa_r+0x65c>)
 8009366:	2000      	movs	r0, #0
 8009368:	f7f6 ff8e 	bl	8000288 <__aeabi_dsub>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8009378:	2800      	cmp	r0, #0
 800937a:	f43f af27 	beq.w	80091cc <_dtoa_r+0x47c>
 800937e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009380:	1e6b      	subs	r3, r5, #1
 8009382:	930c      	str	r3, [sp, #48]	; 0x30
 8009384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009388:	2b30      	cmp	r3, #48	; 0x30
 800938a:	d0f8      	beq.n	800937e <_dtoa_r+0x62e>
 800938c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009390:	e04a      	b.n	8009428 <_dtoa_r+0x6d8>
 8009392:	bf00      	nop
 8009394:	0800aec8 	.word	0x0800aec8
 8009398:	0800aea0 	.word	0x0800aea0
 800939c:	3ff00000 	.word	0x3ff00000
 80093a0:	40240000 	.word	0x40240000
 80093a4:	401c0000 	.word	0x401c0000
 80093a8:	40140000 	.word	0x40140000
 80093ac:	3fe00000 	.word	0x3fe00000
 80093b0:	4baf      	ldr	r3, [pc, #700]	; (8009670 <_dtoa_r+0x920>)
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	4606      	mov	r6, r0
 80093b8:	460f      	mov	r7, r1
 80093ba:	e7ac      	b.n	8009316 <_dtoa_r+0x5c6>
 80093bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093c0:	9d00      	ldr	r5, [sp, #0]
 80093c2:	4642      	mov	r2, r8
 80093c4:	464b      	mov	r3, r9
 80093c6:	4630      	mov	r0, r6
 80093c8:	4639      	mov	r1, r7
 80093ca:	f7f7 fa3f 	bl	800084c <__aeabi_ddiv>
 80093ce:	f7f7 fbc3 	bl	8000b58 <__aeabi_d2iz>
 80093d2:	9002      	str	r0, [sp, #8]
 80093d4:	f7f7 f8a6 	bl	8000524 <__aeabi_i2d>
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	f7f7 f90c 	bl	80005f8 <__aeabi_dmul>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4630      	mov	r0, r6
 80093e6:	4639      	mov	r1, r7
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	9e02      	ldr	r6, [sp, #8]
 80093ee:	9f01      	ldr	r7, [sp, #4]
 80093f0:	3630      	adds	r6, #48	; 0x30
 80093f2:	f805 6b01 	strb.w	r6, [r5], #1
 80093f6:	9e00      	ldr	r6, [sp, #0]
 80093f8:	1bae      	subs	r6, r5, r6
 80093fa:	42b7      	cmp	r7, r6
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	d137      	bne.n	8009472 <_dtoa_r+0x722>
 8009402:	f7f6 ff43 	bl	800028c <__adddf3>
 8009406:	4642      	mov	r2, r8
 8009408:	464b      	mov	r3, r9
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	f7f7 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 8009412:	b9c8      	cbnz	r0, 8009448 <_dtoa_r+0x6f8>
 8009414:	4642      	mov	r2, r8
 8009416:	464b      	mov	r3, r9
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f7 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009420:	b110      	cbz	r0, 8009428 <_dtoa_r+0x6d8>
 8009422:	9b02      	ldr	r3, [sp, #8]
 8009424:	07d9      	lsls	r1, r3, #31
 8009426:	d40f      	bmi.n	8009448 <_dtoa_r+0x6f8>
 8009428:	4620      	mov	r0, r4
 800942a:	4659      	mov	r1, fp
 800942c:	f000 fce8 	bl	8009e00 <_Bfree>
 8009430:	2300      	movs	r3, #0
 8009432:	702b      	strb	r3, [r5, #0]
 8009434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009436:	f10a 0001 	add.w	r0, sl, #1
 800943a:	6018      	str	r0, [r3, #0]
 800943c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800943e:	2b00      	cmp	r3, #0
 8009440:	f43f acd8 	beq.w	8008df4 <_dtoa_r+0xa4>
 8009444:	601d      	str	r5, [r3, #0]
 8009446:	e4d5      	b.n	8008df4 <_dtoa_r+0xa4>
 8009448:	f8cd a01c 	str.w	sl, [sp, #28]
 800944c:	462b      	mov	r3, r5
 800944e:	461d      	mov	r5, r3
 8009450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009454:	2a39      	cmp	r2, #57	; 0x39
 8009456:	d108      	bne.n	800946a <_dtoa_r+0x71a>
 8009458:	9a00      	ldr	r2, [sp, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d1f7      	bne.n	800944e <_dtoa_r+0x6fe>
 800945e:	9a07      	ldr	r2, [sp, #28]
 8009460:	9900      	ldr	r1, [sp, #0]
 8009462:	3201      	adds	r2, #1
 8009464:	9207      	str	r2, [sp, #28]
 8009466:	2230      	movs	r2, #48	; 0x30
 8009468:	700a      	strb	r2, [r1, #0]
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	3201      	adds	r2, #1
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	e78c      	b.n	800938c <_dtoa_r+0x63c>
 8009472:	4b7f      	ldr	r3, [pc, #508]	; (8009670 <_dtoa_r+0x920>)
 8009474:	2200      	movs	r2, #0
 8009476:	f7f7 f8bf 	bl	80005f8 <__aeabi_dmul>
 800947a:	2200      	movs	r2, #0
 800947c:	2300      	movs	r3, #0
 800947e:	4606      	mov	r6, r0
 8009480:	460f      	mov	r7, r1
 8009482:	f7f7 fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009486:	2800      	cmp	r0, #0
 8009488:	d09b      	beq.n	80093c2 <_dtoa_r+0x672>
 800948a:	e7cd      	b.n	8009428 <_dtoa_r+0x6d8>
 800948c:	9a08      	ldr	r2, [sp, #32]
 800948e:	2a00      	cmp	r2, #0
 8009490:	f000 80c4 	beq.w	800961c <_dtoa_r+0x8cc>
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	2a01      	cmp	r2, #1
 8009498:	f300 80a8 	bgt.w	80095ec <_dtoa_r+0x89c>
 800949c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800949e:	2a00      	cmp	r2, #0
 80094a0:	f000 80a0 	beq.w	80095e4 <_dtoa_r+0x894>
 80094a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094a8:	9e06      	ldr	r6, [sp, #24]
 80094aa:	4645      	mov	r5, r8
 80094ac:	9a04      	ldr	r2, [sp, #16]
 80094ae:	2101      	movs	r1, #1
 80094b0:	441a      	add	r2, r3
 80094b2:	4620      	mov	r0, r4
 80094b4:	4498      	add	r8, r3
 80094b6:	9204      	str	r2, [sp, #16]
 80094b8:	f000 fd5e 	bl	8009f78 <__i2b>
 80094bc:	4607      	mov	r7, r0
 80094be:	2d00      	cmp	r5, #0
 80094c0:	dd0b      	ble.n	80094da <_dtoa_r+0x78a>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd08      	ble.n	80094da <_dtoa_r+0x78a>
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	9a04      	ldr	r2, [sp, #16]
 80094cc:	bfa8      	it	ge
 80094ce:	462b      	movge	r3, r5
 80094d0:	eba8 0803 	sub.w	r8, r8, r3
 80094d4:	1aed      	subs	r5, r5, r3
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	9b06      	ldr	r3, [sp, #24]
 80094dc:	b1fb      	cbz	r3, 800951e <_dtoa_r+0x7ce>
 80094de:	9b08      	ldr	r3, [sp, #32]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 809f 	beq.w	8009624 <_dtoa_r+0x8d4>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	dd11      	ble.n	800950e <_dtoa_r+0x7be>
 80094ea:	4639      	mov	r1, r7
 80094ec:	4632      	mov	r2, r6
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fdfe 	bl	800a0f0 <__pow5mult>
 80094f4:	465a      	mov	r2, fp
 80094f6:	4601      	mov	r1, r0
 80094f8:	4607      	mov	r7, r0
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fd52 	bl	8009fa4 <__multiply>
 8009500:	4659      	mov	r1, fp
 8009502:	9007      	str	r0, [sp, #28]
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fc7b 	bl	8009e00 <_Bfree>
 800950a:	9b07      	ldr	r3, [sp, #28]
 800950c:	469b      	mov	fp, r3
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	1b9a      	subs	r2, r3, r6
 8009512:	d004      	beq.n	800951e <_dtoa_r+0x7ce>
 8009514:	4659      	mov	r1, fp
 8009516:	4620      	mov	r0, r4
 8009518:	f000 fdea 	bl	800a0f0 <__pow5mult>
 800951c:	4683      	mov	fp, r0
 800951e:	2101      	movs	r1, #1
 8009520:	4620      	mov	r0, r4
 8009522:	f000 fd29 	bl	8009f78 <__i2b>
 8009526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009528:	2b00      	cmp	r3, #0
 800952a:	4606      	mov	r6, r0
 800952c:	dd7c      	ble.n	8009628 <_dtoa_r+0x8d8>
 800952e:	461a      	mov	r2, r3
 8009530:	4601      	mov	r1, r0
 8009532:	4620      	mov	r0, r4
 8009534:	f000 fddc 	bl	800a0f0 <__pow5mult>
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	2b01      	cmp	r3, #1
 800953c:	4606      	mov	r6, r0
 800953e:	dd76      	ble.n	800962e <_dtoa_r+0x8de>
 8009540:	2300      	movs	r3, #0
 8009542:	9306      	str	r3, [sp, #24]
 8009544:	6933      	ldr	r3, [r6, #16]
 8009546:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800954a:	6918      	ldr	r0, [r3, #16]
 800954c:	f000 fcc4 	bl	8009ed8 <__hi0bits>
 8009550:	f1c0 0020 	rsb	r0, r0, #32
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	4418      	add	r0, r3
 8009558:	f010 001f 	ands.w	r0, r0, #31
 800955c:	f000 8086 	beq.w	800966c <_dtoa_r+0x91c>
 8009560:	f1c0 0320 	rsb	r3, r0, #32
 8009564:	2b04      	cmp	r3, #4
 8009566:	dd7f      	ble.n	8009668 <_dtoa_r+0x918>
 8009568:	f1c0 001c 	rsb	r0, r0, #28
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	4403      	add	r3, r0
 8009570:	4480      	add	r8, r0
 8009572:	4405      	add	r5, r0
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	dd05      	ble.n	8009588 <_dtoa_r+0x838>
 800957c:	4659      	mov	r1, fp
 800957e:	4642      	mov	r2, r8
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fe0f 	bl	800a1a4 <__lshift>
 8009586:	4683      	mov	fp, r0
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	dd05      	ble.n	800959a <_dtoa_r+0x84a>
 800958e:	4631      	mov	r1, r6
 8009590:	461a      	mov	r2, r3
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fe06 	bl	800a1a4 <__lshift>
 8009598:	4606      	mov	r6, r0
 800959a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d069      	beq.n	8009674 <_dtoa_r+0x924>
 80095a0:	4631      	mov	r1, r6
 80095a2:	4658      	mov	r0, fp
 80095a4:	f000 fe6a 	bl	800a27c <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	da63      	bge.n	8009674 <_dtoa_r+0x924>
 80095ac:	2300      	movs	r3, #0
 80095ae:	4659      	mov	r1, fp
 80095b0:	220a      	movs	r2, #10
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fc46 	bl	8009e44 <__multadd>
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095be:	4683      	mov	fp, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 818f 	beq.w	80098e4 <_dtoa_r+0xb94>
 80095c6:	4639      	mov	r1, r7
 80095c8:	2300      	movs	r3, #0
 80095ca:	220a      	movs	r2, #10
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 fc39 	bl	8009e44 <__multadd>
 80095d2:	f1b9 0f00 	cmp.w	r9, #0
 80095d6:	4607      	mov	r7, r0
 80095d8:	f300 808e 	bgt.w	80096f8 <_dtoa_r+0x9a8>
 80095dc:	9b05      	ldr	r3, [sp, #20]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	dc50      	bgt.n	8009684 <_dtoa_r+0x934>
 80095e2:	e089      	b.n	80096f8 <_dtoa_r+0x9a8>
 80095e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095ea:	e75d      	b.n	80094a8 <_dtoa_r+0x758>
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	1e5e      	subs	r6, r3, #1
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	42b3      	cmp	r3, r6
 80095f4:	bfbf      	itttt	lt
 80095f6:	9b06      	ldrlt	r3, [sp, #24]
 80095f8:	9606      	strlt	r6, [sp, #24]
 80095fa:	1af2      	sublt	r2, r6, r3
 80095fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80095fe:	bfb6      	itet	lt
 8009600:	189b      	addlt	r3, r3, r2
 8009602:	1b9e      	subge	r6, r3, r6
 8009604:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	bfb8      	it	lt
 800960a:	2600      	movlt	r6, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfb5      	itete	lt
 8009610:	eba8 0503 	sublt.w	r5, r8, r3
 8009614:	9b01      	ldrge	r3, [sp, #4]
 8009616:	2300      	movlt	r3, #0
 8009618:	4645      	movge	r5, r8
 800961a:	e747      	b.n	80094ac <_dtoa_r+0x75c>
 800961c:	9e06      	ldr	r6, [sp, #24]
 800961e:	9f08      	ldr	r7, [sp, #32]
 8009620:	4645      	mov	r5, r8
 8009622:	e74c      	b.n	80094be <_dtoa_r+0x76e>
 8009624:	9a06      	ldr	r2, [sp, #24]
 8009626:	e775      	b.n	8009514 <_dtoa_r+0x7c4>
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	2b01      	cmp	r3, #1
 800962c:	dc18      	bgt.n	8009660 <_dtoa_r+0x910>
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	b9b3      	cbnz	r3, 8009660 <_dtoa_r+0x910>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009638:	b9a3      	cbnz	r3, 8009664 <_dtoa_r+0x914>
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009640:	0d1b      	lsrs	r3, r3, #20
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	b12b      	cbz	r3, 8009652 <_dtoa_r+0x902>
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	f108 0801 	add.w	r8, r8, #1
 8009650:	2301      	movs	r3, #1
 8009652:	9306      	str	r3, [sp, #24]
 8009654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	f47f af74 	bne.w	8009544 <_dtoa_r+0x7f4>
 800965c:	2001      	movs	r0, #1
 800965e:	e779      	b.n	8009554 <_dtoa_r+0x804>
 8009660:	2300      	movs	r3, #0
 8009662:	e7f6      	b.n	8009652 <_dtoa_r+0x902>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	e7f4      	b.n	8009652 <_dtoa_r+0x902>
 8009668:	d085      	beq.n	8009576 <_dtoa_r+0x826>
 800966a:	4618      	mov	r0, r3
 800966c:	301c      	adds	r0, #28
 800966e:	e77d      	b.n	800956c <_dtoa_r+0x81c>
 8009670:	40240000 	.word	0x40240000
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dc38      	bgt.n	80096ec <_dtoa_r+0x99c>
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	2b02      	cmp	r3, #2
 800967e:	dd35      	ble.n	80096ec <_dtoa_r+0x99c>
 8009680:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009684:	f1b9 0f00 	cmp.w	r9, #0
 8009688:	d10d      	bne.n	80096a6 <_dtoa_r+0x956>
 800968a:	4631      	mov	r1, r6
 800968c:	464b      	mov	r3, r9
 800968e:	2205      	movs	r2, #5
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fbd7 	bl	8009e44 <__multadd>
 8009696:	4601      	mov	r1, r0
 8009698:	4606      	mov	r6, r0
 800969a:	4658      	mov	r0, fp
 800969c:	f000 fdee 	bl	800a27c <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f73f adbd 	bgt.w	8009220 <_dtoa_r+0x4d0>
 80096a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a8:	9d00      	ldr	r5, [sp, #0]
 80096aa:	ea6f 0a03 	mvn.w	sl, r3
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	4631      	mov	r1, r6
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fba3 	bl	8009e00 <_Bfree>
 80096ba:	2f00      	cmp	r7, #0
 80096bc:	f43f aeb4 	beq.w	8009428 <_dtoa_r+0x6d8>
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	d005      	beq.n	80096d2 <_dtoa_r+0x982>
 80096c6:	45b8      	cmp	r8, r7
 80096c8:	d003      	beq.n	80096d2 <_dtoa_r+0x982>
 80096ca:	4641      	mov	r1, r8
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fb97 	bl	8009e00 <_Bfree>
 80096d2:	4639      	mov	r1, r7
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fb93 	bl	8009e00 <_Bfree>
 80096da:	e6a5      	b.n	8009428 <_dtoa_r+0x6d8>
 80096dc:	2600      	movs	r6, #0
 80096de:	4637      	mov	r7, r6
 80096e0:	e7e1      	b.n	80096a6 <_dtoa_r+0x956>
 80096e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80096e8:	4637      	mov	r7, r6
 80096ea:	e599      	b.n	8009220 <_dtoa_r+0x4d0>
 80096ec:	9b08      	ldr	r3, [sp, #32]
 80096ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80fd 	beq.w	80098f2 <_dtoa_r+0xba2>
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	dd05      	ble.n	8009708 <_dtoa_r+0x9b8>
 80096fc:	4639      	mov	r1, r7
 80096fe:	462a      	mov	r2, r5
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fd4f 	bl	800a1a4 <__lshift>
 8009706:	4607      	mov	r7, r0
 8009708:	9b06      	ldr	r3, [sp, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d05c      	beq.n	80097c8 <_dtoa_r+0xa78>
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4620      	mov	r0, r4
 8009712:	f000 fb35 	bl	8009d80 <_Balloc>
 8009716:	4605      	mov	r5, r0
 8009718:	b928      	cbnz	r0, 8009726 <_dtoa_r+0x9d6>
 800971a:	4b80      	ldr	r3, [pc, #512]	; (800991c <_dtoa_r+0xbcc>)
 800971c:	4602      	mov	r2, r0
 800971e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009722:	f7ff bb2e 	b.w	8008d82 <_dtoa_r+0x32>
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	3202      	adds	r2, #2
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	f107 010c 	add.w	r1, r7, #12
 8009730:	300c      	adds	r0, #12
 8009732:	f7fe fcb1 	bl	8008098 <memcpy>
 8009736:	2201      	movs	r2, #1
 8009738:	4629      	mov	r1, r5
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fd32 	bl	800a1a4 <__lshift>
 8009740:	9b00      	ldr	r3, [sp, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	9b00      	ldr	r3, [sp, #0]
 8009748:	444b      	add	r3, r9
 800974a:	9307      	str	r3, [sp, #28]
 800974c:	9b02      	ldr	r3, [sp, #8]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	46b8      	mov	r8, r7
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	4607      	mov	r7, r0
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	4631      	mov	r1, r6
 800975c:	3b01      	subs	r3, #1
 800975e:	4658      	mov	r0, fp
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	f7ff fa67 	bl	8008c34 <quorem>
 8009766:	4603      	mov	r3, r0
 8009768:	3330      	adds	r3, #48	; 0x30
 800976a:	9004      	str	r0, [sp, #16]
 800976c:	4641      	mov	r1, r8
 800976e:	4658      	mov	r0, fp
 8009770:	9308      	str	r3, [sp, #32]
 8009772:	f000 fd83 	bl	800a27c <__mcmp>
 8009776:	463a      	mov	r2, r7
 8009778:	4681      	mov	r9, r0
 800977a:	4631      	mov	r1, r6
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fd99 	bl	800a2b4 <__mdiff>
 8009782:	68c2      	ldr	r2, [r0, #12]
 8009784:	9b08      	ldr	r3, [sp, #32]
 8009786:	4605      	mov	r5, r0
 8009788:	bb02      	cbnz	r2, 80097cc <_dtoa_r+0xa7c>
 800978a:	4601      	mov	r1, r0
 800978c:	4658      	mov	r0, fp
 800978e:	f000 fd75 	bl	800a27c <__mcmp>
 8009792:	9b08      	ldr	r3, [sp, #32]
 8009794:	4602      	mov	r2, r0
 8009796:	4629      	mov	r1, r5
 8009798:	4620      	mov	r0, r4
 800979a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800979e:	f000 fb2f 	bl	8009e00 <_Bfree>
 80097a2:	9b05      	ldr	r3, [sp, #20]
 80097a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a6:	9d01      	ldr	r5, [sp, #4]
 80097a8:	ea43 0102 	orr.w	r1, r3, r2
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	430b      	orrs	r3, r1
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	d10d      	bne.n	80097d0 <_dtoa_r+0xa80>
 80097b4:	2b39      	cmp	r3, #57	; 0x39
 80097b6:	d029      	beq.n	800980c <_dtoa_r+0xabc>
 80097b8:	f1b9 0f00 	cmp.w	r9, #0
 80097bc:	dd01      	ble.n	80097c2 <_dtoa_r+0xa72>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3331      	adds	r3, #49	; 0x31
 80097c2:	9a02      	ldr	r2, [sp, #8]
 80097c4:	7013      	strb	r3, [r2, #0]
 80097c6:	e774      	b.n	80096b2 <_dtoa_r+0x962>
 80097c8:	4638      	mov	r0, r7
 80097ca:	e7b9      	b.n	8009740 <_dtoa_r+0x9f0>
 80097cc:	2201      	movs	r2, #1
 80097ce:	e7e2      	b.n	8009796 <_dtoa_r+0xa46>
 80097d0:	f1b9 0f00 	cmp.w	r9, #0
 80097d4:	db06      	blt.n	80097e4 <_dtoa_r+0xa94>
 80097d6:	9905      	ldr	r1, [sp, #20]
 80097d8:	ea41 0909 	orr.w	r9, r1, r9
 80097dc:	9906      	ldr	r1, [sp, #24]
 80097de:	ea59 0101 	orrs.w	r1, r9, r1
 80097e2:	d120      	bne.n	8009826 <_dtoa_r+0xad6>
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	ddec      	ble.n	80097c2 <_dtoa_r+0xa72>
 80097e8:	4659      	mov	r1, fp
 80097ea:	2201      	movs	r2, #1
 80097ec:	4620      	mov	r0, r4
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	f000 fcd8 	bl	800a1a4 <__lshift>
 80097f4:	4631      	mov	r1, r6
 80097f6:	4683      	mov	fp, r0
 80097f8:	f000 fd40 	bl	800a27c <__mcmp>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	dc02      	bgt.n	8009808 <_dtoa_r+0xab8>
 8009802:	d1de      	bne.n	80097c2 <_dtoa_r+0xa72>
 8009804:	07da      	lsls	r2, r3, #31
 8009806:	d5dc      	bpl.n	80097c2 <_dtoa_r+0xa72>
 8009808:	2b39      	cmp	r3, #57	; 0x39
 800980a:	d1d8      	bne.n	80097be <_dtoa_r+0xa6e>
 800980c:	9a02      	ldr	r2, [sp, #8]
 800980e:	2339      	movs	r3, #57	; 0x39
 8009810:	7013      	strb	r3, [r2, #0]
 8009812:	462b      	mov	r3, r5
 8009814:	461d      	mov	r5, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800981c:	2a39      	cmp	r2, #57	; 0x39
 800981e:	d050      	beq.n	80098c2 <_dtoa_r+0xb72>
 8009820:	3201      	adds	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
 8009824:	e745      	b.n	80096b2 <_dtoa_r+0x962>
 8009826:	2a00      	cmp	r2, #0
 8009828:	dd03      	ble.n	8009832 <_dtoa_r+0xae2>
 800982a:	2b39      	cmp	r3, #57	; 0x39
 800982c:	d0ee      	beq.n	800980c <_dtoa_r+0xabc>
 800982e:	3301      	adds	r3, #1
 8009830:	e7c7      	b.n	80097c2 <_dtoa_r+0xa72>
 8009832:	9a01      	ldr	r2, [sp, #4]
 8009834:	9907      	ldr	r1, [sp, #28]
 8009836:	f802 3c01 	strb.w	r3, [r2, #-1]
 800983a:	428a      	cmp	r2, r1
 800983c:	d02a      	beq.n	8009894 <_dtoa_r+0xb44>
 800983e:	4659      	mov	r1, fp
 8009840:	2300      	movs	r3, #0
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fafd 	bl	8009e44 <__multadd>
 800984a:	45b8      	cmp	r8, r7
 800984c:	4683      	mov	fp, r0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	f04f 020a 	mov.w	r2, #10
 8009856:	4641      	mov	r1, r8
 8009858:	4620      	mov	r0, r4
 800985a:	d107      	bne.n	800986c <_dtoa_r+0xb1c>
 800985c:	f000 faf2 	bl	8009e44 <__multadd>
 8009860:	4680      	mov	r8, r0
 8009862:	4607      	mov	r7, r0
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	3301      	adds	r3, #1
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	e775      	b.n	8009758 <_dtoa_r+0xa08>
 800986c:	f000 faea 	bl	8009e44 <__multadd>
 8009870:	4639      	mov	r1, r7
 8009872:	4680      	mov	r8, r0
 8009874:	2300      	movs	r3, #0
 8009876:	220a      	movs	r2, #10
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fae3 	bl	8009e44 <__multadd>
 800987e:	4607      	mov	r7, r0
 8009880:	e7f0      	b.n	8009864 <_dtoa_r+0xb14>
 8009882:	f1b9 0f00 	cmp.w	r9, #0
 8009886:	9a00      	ldr	r2, [sp, #0]
 8009888:	bfcc      	ite	gt
 800988a:	464d      	movgt	r5, r9
 800988c:	2501      	movle	r5, #1
 800988e:	4415      	add	r5, r2
 8009890:	f04f 0800 	mov.w	r8, #0
 8009894:	4659      	mov	r1, fp
 8009896:	2201      	movs	r2, #1
 8009898:	4620      	mov	r0, r4
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	f000 fc82 	bl	800a1a4 <__lshift>
 80098a0:	4631      	mov	r1, r6
 80098a2:	4683      	mov	fp, r0
 80098a4:	f000 fcea 	bl	800a27c <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dcb2      	bgt.n	8009812 <_dtoa_r+0xac2>
 80098ac:	d102      	bne.n	80098b4 <_dtoa_r+0xb64>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	07db      	lsls	r3, r3, #31
 80098b2:	d4ae      	bmi.n	8009812 <_dtoa_r+0xac2>
 80098b4:	462b      	mov	r3, r5
 80098b6:	461d      	mov	r5, r3
 80098b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098bc:	2a30      	cmp	r2, #48	; 0x30
 80098be:	d0fa      	beq.n	80098b6 <_dtoa_r+0xb66>
 80098c0:	e6f7      	b.n	80096b2 <_dtoa_r+0x962>
 80098c2:	9a00      	ldr	r2, [sp, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d1a5      	bne.n	8009814 <_dtoa_r+0xac4>
 80098c8:	f10a 0a01 	add.w	sl, sl, #1
 80098cc:	2331      	movs	r3, #49	; 0x31
 80098ce:	e779      	b.n	80097c4 <_dtoa_r+0xa74>
 80098d0:	4b13      	ldr	r3, [pc, #76]	; (8009920 <_dtoa_r+0xbd0>)
 80098d2:	f7ff baaf 	b.w	8008e34 <_dtoa_r+0xe4>
 80098d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f47f aa86 	bne.w	8008dea <_dtoa_r+0x9a>
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <_dtoa_r+0xbd4>)
 80098e0:	f7ff baa8 	b.w	8008e34 <_dtoa_r+0xe4>
 80098e4:	f1b9 0f00 	cmp.w	r9, #0
 80098e8:	dc03      	bgt.n	80098f2 <_dtoa_r+0xba2>
 80098ea:	9b05      	ldr	r3, [sp, #20]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	f73f aec9 	bgt.w	8009684 <_dtoa_r+0x934>
 80098f2:	9d00      	ldr	r5, [sp, #0]
 80098f4:	4631      	mov	r1, r6
 80098f6:	4658      	mov	r0, fp
 80098f8:	f7ff f99c 	bl	8008c34 <quorem>
 80098fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009900:	f805 3b01 	strb.w	r3, [r5], #1
 8009904:	9a00      	ldr	r2, [sp, #0]
 8009906:	1aaa      	subs	r2, r5, r2
 8009908:	4591      	cmp	r9, r2
 800990a:	ddba      	ble.n	8009882 <_dtoa_r+0xb32>
 800990c:	4659      	mov	r1, fp
 800990e:	2300      	movs	r3, #0
 8009910:	220a      	movs	r2, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fa96 	bl	8009e44 <__multadd>
 8009918:	4683      	mov	fp, r0
 800991a:	e7eb      	b.n	80098f4 <_dtoa_r+0xba4>
 800991c:	0800adcf 	.word	0x0800adcf
 8009920:	0800ad28 	.word	0x0800ad28
 8009924:	0800ad4c 	.word	0x0800ad4c

08009928 <__sflush_r>:
 8009928:	898a      	ldrh	r2, [r1, #12]
 800992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	4605      	mov	r5, r0
 8009930:	0710      	lsls	r0, r2, #28
 8009932:	460c      	mov	r4, r1
 8009934:	d458      	bmi.n	80099e8 <__sflush_r+0xc0>
 8009936:	684b      	ldr	r3, [r1, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc05      	bgt.n	8009948 <__sflush_r+0x20>
 800993c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	dc02      	bgt.n	8009948 <__sflush_r+0x20>
 8009942:	2000      	movs	r0, #0
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994a:	2e00      	cmp	r6, #0
 800994c:	d0f9      	beq.n	8009942 <__sflush_r+0x1a>
 800994e:	2300      	movs	r3, #0
 8009950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009954:	682f      	ldr	r7, [r5, #0]
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	d032      	beq.n	80099c0 <__sflush_r+0x98>
 800995a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	075a      	lsls	r2, r3, #29
 8009960:	d505      	bpl.n	800996e <__sflush_r+0x46>
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	1ac0      	subs	r0, r0, r3
 8009966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009968:	b10b      	cbz	r3, 800996e <__sflush_r+0x46>
 800996a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800996c:	1ac0      	subs	r0, r0, r3
 800996e:	2300      	movs	r3, #0
 8009970:	4602      	mov	r2, r0
 8009972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	4628      	mov	r0, r5
 8009978:	47b0      	blx	r6
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	d106      	bne.n	800998e <__sflush_r+0x66>
 8009980:	6829      	ldr	r1, [r5, #0]
 8009982:	291d      	cmp	r1, #29
 8009984:	d82c      	bhi.n	80099e0 <__sflush_r+0xb8>
 8009986:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <__sflush_r+0x108>)
 8009988:	40ca      	lsrs	r2, r1
 800998a:	07d6      	lsls	r6, r2, #31
 800998c:	d528      	bpl.n	80099e0 <__sflush_r+0xb8>
 800998e:	2200      	movs	r2, #0
 8009990:	6062      	str	r2, [r4, #4]
 8009992:	04d9      	lsls	r1, r3, #19
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	6022      	str	r2, [r4, #0]
 8009998:	d504      	bpl.n	80099a4 <__sflush_r+0x7c>
 800999a:	1c42      	adds	r2, r0, #1
 800999c:	d101      	bne.n	80099a2 <__sflush_r+0x7a>
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	b903      	cbnz	r3, 80099a4 <__sflush_r+0x7c>
 80099a2:	6560      	str	r0, [r4, #84]	; 0x54
 80099a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a6:	602f      	str	r7, [r5, #0]
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d0ca      	beq.n	8009942 <__sflush_r+0x1a>
 80099ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b0:	4299      	cmp	r1, r3
 80099b2:	d002      	beq.n	80099ba <__sflush_r+0x92>
 80099b4:	4628      	mov	r0, r5
 80099b6:	f000 fd71 	bl	800a49c <_free_r>
 80099ba:	2000      	movs	r0, #0
 80099bc:	6360      	str	r0, [r4, #52]	; 0x34
 80099be:	e7c1      	b.n	8009944 <__sflush_r+0x1c>
 80099c0:	6a21      	ldr	r1, [r4, #32]
 80099c2:	2301      	movs	r3, #1
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	1c41      	adds	r1, r0, #1
 80099ca:	d1c7      	bne.n	800995c <__sflush_r+0x34>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0c4      	beq.n	800995c <__sflush_r+0x34>
 80099d2:	2b1d      	cmp	r3, #29
 80099d4:	d001      	beq.n	80099da <__sflush_r+0xb2>
 80099d6:	2b16      	cmp	r3, #22
 80099d8:	d101      	bne.n	80099de <__sflush_r+0xb6>
 80099da:	602f      	str	r7, [r5, #0]
 80099dc:	e7b1      	b.n	8009942 <__sflush_r+0x1a>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	e7ad      	b.n	8009944 <__sflush_r+0x1c>
 80099e8:	690f      	ldr	r7, [r1, #16]
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d0a9      	beq.n	8009942 <__sflush_r+0x1a>
 80099ee:	0793      	lsls	r3, r2, #30
 80099f0:	680e      	ldr	r6, [r1, #0]
 80099f2:	bf08      	it	eq
 80099f4:	694b      	ldreq	r3, [r1, #20]
 80099f6:	600f      	str	r7, [r1, #0]
 80099f8:	bf18      	it	ne
 80099fa:	2300      	movne	r3, #0
 80099fc:	eba6 0807 	sub.w	r8, r6, r7
 8009a00:	608b      	str	r3, [r1, #8]
 8009a02:	f1b8 0f00 	cmp.w	r8, #0
 8009a06:	dd9c      	ble.n	8009942 <__sflush_r+0x1a>
 8009a08:	6a21      	ldr	r1, [r4, #32]
 8009a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	463a      	mov	r2, r7
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dc06      	bgt.n	8009a26 <__sflush_r+0xfe>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e78e      	b.n	8009944 <__sflush_r+0x1c>
 8009a26:	4407      	add	r7, r0
 8009a28:	eba8 0800 	sub.w	r8, r8, r0
 8009a2c:	e7e9      	b.n	8009a02 <__sflush_r+0xda>
 8009a2e:	bf00      	nop
 8009a30:	20400001 	.word	0x20400001

08009a34 <_fflush_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	690b      	ldr	r3, [r1, #16]
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	b913      	cbnz	r3, 8009a44 <_fflush_r+0x10>
 8009a3e:	2500      	movs	r5, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	b118      	cbz	r0, 8009a4e <_fflush_r+0x1a>
 8009a46:	6983      	ldr	r3, [r0, #24]
 8009a48:	b90b      	cbnz	r3, 8009a4e <_fflush_r+0x1a>
 8009a4a:	f000 f887 	bl	8009b5c <__sinit>
 8009a4e:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <_fflush_r+0x6c>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d11b      	bne.n	8009a8c <_fflush_r+0x58>
 8009a54:	686c      	ldr	r4, [r5, #4]
 8009a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0ef      	beq.n	8009a3e <_fflush_r+0xa>
 8009a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a60:	07d0      	lsls	r0, r2, #31
 8009a62:	d404      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a64:	0599      	lsls	r1, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6a:	f000 f91a 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	4621      	mov	r1, r4
 8009a72:	f7ff ff59 	bl	8009928 <__sflush_r>
 8009a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a78:	07da      	lsls	r2, r3, #31
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	d4e0      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	059b      	lsls	r3, r3, #22
 8009a82:	d4dd      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a86:	f000 f90d 	bl	8009ca4 <__retarget_lock_release_recursive>
 8009a8a:	e7d9      	b.n	8009a40 <_fflush_r+0xc>
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <_fflush_r+0x70>)
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d101      	bne.n	8009a96 <_fflush_r+0x62>
 8009a92:	68ac      	ldr	r4, [r5, #8]
 8009a94:	e7df      	b.n	8009a56 <_fflush_r+0x22>
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <_fflush_r+0x74>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	bf08      	it	eq
 8009a9c:	68ec      	ldreq	r4, [r5, #12]
 8009a9e:	e7da      	b.n	8009a56 <_fflush_r+0x22>
 8009aa0:	0800ae00 	.word	0x0800ae00
 8009aa4:	0800ae20 	.word	0x0800ae20
 8009aa8:	0800ade0 	.word	0x0800ade0

08009aac <std>:
 8009aac:	2300      	movs	r3, #0
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aba:	6083      	str	r3, [r0, #8]
 8009abc:	8181      	strh	r1, [r0, #12]
 8009abe:	6643      	str	r3, [r0, #100]	; 0x64
 8009ac0:	81c2      	strh	r2, [r0, #14]
 8009ac2:	6183      	str	r3, [r0, #24]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	305c      	adds	r0, #92	; 0x5c
 8009aca:	f7fe faf3 	bl	80080b4 <memset>
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <std+0x38>)
 8009ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <std+0x3c>)
 8009ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <std+0x40>)
 8009ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <std+0x44>)
 8009adc:	6224      	str	r4, [r4, #32]
 8009ade:	6323      	str	r3, [r4, #48]	; 0x30
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800a8c5 	.word	0x0800a8c5
 8009ae8:	0800a8e7 	.word	0x0800a8e7
 8009aec:	0800a91f 	.word	0x0800a91f
 8009af0:	0800a943 	.word	0x0800a943

08009af4 <_cleanup_r>:
 8009af4:	4901      	ldr	r1, [pc, #4]	; (8009afc <_cleanup_r+0x8>)
 8009af6:	f000 b8af 	b.w	8009c58 <_fwalk_reent>
 8009afa:	bf00      	nop
 8009afc:	08009a35 	.word	0x08009a35

08009b00 <__sfmoreglue>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	1e4a      	subs	r2, r1, #1
 8009b04:	2568      	movs	r5, #104	; 0x68
 8009b06:	4355      	muls	r5, r2
 8009b08:	460e      	mov	r6, r1
 8009b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b0e:	f000 fd15 	bl	800a53c <_malloc_r>
 8009b12:	4604      	mov	r4, r0
 8009b14:	b140      	cbz	r0, 8009b28 <__sfmoreglue+0x28>
 8009b16:	2100      	movs	r1, #0
 8009b18:	e9c0 1600 	strd	r1, r6, [r0]
 8009b1c:	300c      	adds	r0, #12
 8009b1e:	60a0      	str	r0, [r4, #8]
 8009b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b24:	f7fe fac6 	bl	80080b4 <memset>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}

08009b2c <__sfp_lock_acquire>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sfp_lock_acquire+0x8>)
 8009b2e:	f000 b8b8 	b.w	8009ca2 <__retarget_lock_acquire_recursive>
 8009b32:	bf00      	nop
 8009b34:	200009d4 	.word	0x200009d4

08009b38 <__sfp_lock_release>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sfp_lock_release+0x8>)
 8009b3a:	f000 b8b3 	b.w	8009ca4 <__retarget_lock_release_recursive>
 8009b3e:	bf00      	nop
 8009b40:	200009d4 	.word	0x200009d4

08009b44 <__sinit_lock_acquire>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sinit_lock_acquire+0x8>)
 8009b46:	f000 b8ac 	b.w	8009ca2 <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	200009cf 	.word	0x200009cf

08009b50 <__sinit_lock_release>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__sinit_lock_release+0x8>)
 8009b52:	f000 b8a7 	b.w	8009ca4 <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	200009cf 	.word	0x200009cf

08009b5c <__sinit>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f7ff fff0 	bl	8009b44 <__sinit_lock_acquire>
 8009b64:	69a3      	ldr	r3, [r4, #24]
 8009b66:	b11b      	cbz	r3, 8009b70 <__sinit+0x14>
 8009b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b6c:	f7ff bff0 	b.w	8009b50 <__sinit_lock_release>
 8009b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b74:	6523      	str	r3, [r4, #80]	; 0x50
 8009b76:	4b13      	ldr	r3, [pc, #76]	; (8009bc4 <__sinit+0x68>)
 8009b78:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <__sinit+0x6c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	bf04      	itt	eq
 8009b82:	2301      	moveq	r3, #1
 8009b84:	61a3      	streq	r3, [r4, #24]
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 f820 	bl	8009bcc <__sfp>
 8009b8c:	6060      	str	r0, [r4, #4]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 f81c 	bl	8009bcc <__sfp>
 8009b94:	60a0      	str	r0, [r4, #8]
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f818 	bl	8009bcc <__sfp>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	60e0      	str	r0, [r4, #12]
 8009ba0:	2104      	movs	r1, #4
 8009ba2:	6860      	ldr	r0, [r4, #4]
 8009ba4:	f7ff ff82 	bl	8009aac <std>
 8009ba8:	68a0      	ldr	r0, [r4, #8]
 8009baa:	2201      	movs	r2, #1
 8009bac:	2109      	movs	r1, #9
 8009bae:	f7ff ff7d 	bl	8009aac <std>
 8009bb2:	68e0      	ldr	r0, [r4, #12]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	2112      	movs	r1, #18
 8009bb8:	f7ff ff78 	bl	8009aac <std>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61a3      	str	r3, [r4, #24]
 8009bc0:	e7d2      	b.n	8009b68 <__sinit+0xc>
 8009bc2:	bf00      	nop
 8009bc4:	0800ad14 	.word	0x0800ad14
 8009bc8:	08009af5 	.word	0x08009af5

08009bcc <__sfp>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	4607      	mov	r7, r0
 8009bd0:	f7ff ffac 	bl	8009b2c <__sfp_lock_acquire>
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <__sfp+0x84>)
 8009bd6:	681e      	ldr	r6, [r3, #0]
 8009bd8:	69b3      	ldr	r3, [r6, #24]
 8009bda:	b913      	cbnz	r3, 8009be2 <__sfp+0x16>
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff ffbd 	bl	8009b5c <__sinit>
 8009be2:	3648      	adds	r6, #72	; 0x48
 8009be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	d503      	bpl.n	8009bf4 <__sfp+0x28>
 8009bec:	6833      	ldr	r3, [r6, #0]
 8009bee:	b30b      	cbz	r3, 8009c34 <__sfp+0x68>
 8009bf0:	6836      	ldr	r6, [r6, #0]
 8009bf2:	e7f7      	b.n	8009be4 <__sfp+0x18>
 8009bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bf8:	b9d5      	cbnz	r5, 8009c30 <__sfp+0x64>
 8009bfa:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <__sfp+0x88>)
 8009bfc:	60e3      	str	r3, [r4, #12]
 8009bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c02:	6665      	str	r5, [r4, #100]	; 0x64
 8009c04:	f000 f84c 	bl	8009ca0 <__retarget_lock_init_recursive>
 8009c08:	f7ff ff96 	bl	8009b38 <__sfp_lock_release>
 8009c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c14:	6025      	str	r5, [r4, #0]
 8009c16:	61a5      	str	r5, [r4, #24]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c20:	f7fe fa48 	bl	80080b4 <memset>
 8009c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c30:	3468      	adds	r4, #104	; 0x68
 8009c32:	e7d9      	b.n	8009be8 <__sfp+0x1c>
 8009c34:	2104      	movs	r1, #4
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff ff62 	bl	8009b00 <__sfmoreglue>
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	6030      	str	r0, [r6, #0]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1d5      	bne.n	8009bf0 <__sfp+0x24>
 8009c44:	f7ff ff78 	bl	8009b38 <__sfp_lock_release>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	e7ee      	b.n	8009c2c <__sfp+0x60>
 8009c4e:	bf00      	nop
 8009c50:	0800ad14 	.word	0x0800ad14
 8009c54:	ffff0001 	.word	0xffff0001

08009c58 <_fwalk_reent>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	4688      	mov	r8, r1
 8009c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c64:	2700      	movs	r7, #0
 8009c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009c6e:	d505      	bpl.n	8009c7c <_fwalk_reent+0x24>
 8009c70:	6824      	ldr	r4, [r4, #0]
 8009c72:	2c00      	cmp	r4, #0
 8009c74:	d1f7      	bne.n	8009c66 <_fwalk_reent+0xe>
 8009c76:	4638      	mov	r0, r7
 8009c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7c:	89ab      	ldrh	r3, [r5, #12]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d907      	bls.n	8009c92 <_fwalk_reent+0x3a>
 8009c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c86:	3301      	adds	r3, #1
 8009c88:	d003      	beq.n	8009c92 <_fwalk_reent+0x3a>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	47c0      	blx	r8
 8009c90:	4307      	orrs	r7, r0
 8009c92:	3568      	adds	r5, #104	; 0x68
 8009c94:	e7e9      	b.n	8009c6a <_fwalk_reent+0x12>
	...

08009c98 <_localeconv_r>:
 8009c98:	4800      	ldr	r0, [pc, #0]	; (8009c9c <_localeconv_r+0x4>)
 8009c9a:	4770      	bx	lr
 8009c9c:	20000170 	.word	0x20000170

08009ca0 <__retarget_lock_init_recursive>:
 8009ca0:	4770      	bx	lr

08009ca2 <__retarget_lock_acquire_recursive>:
 8009ca2:	4770      	bx	lr

08009ca4 <__retarget_lock_release_recursive>:
 8009ca4:	4770      	bx	lr

08009ca6 <__swhatbuf_r>:
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	460e      	mov	r6, r1
 8009caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	b096      	sub	sp, #88	; 0x58
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	461d      	mov	r5, r3
 8009cb6:	da07      	bge.n	8009cc8 <__swhatbuf_r+0x22>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	89b3      	ldrh	r3, [r6, #12]
 8009cbe:	061a      	lsls	r2, r3, #24
 8009cc0:	d410      	bmi.n	8009ce4 <__swhatbuf_r+0x3e>
 8009cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc6:	e00e      	b.n	8009ce6 <__swhatbuf_r+0x40>
 8009cc8:	466a      	mov	r2, sp
 8009cca:	f000 fe91 	bl	800a9f0 <_fstat_r>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	dbf2      	blt.n	8009cb8 <__swhatbuf_r+0x12>
 8009cd2:	9a01      	ldr	r2, [sp, #4]
 8009cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cdc:	425a      	negs	r2, r3
 8009cde:	415a      	adcs	r2, r3
 8009ce0:	602a      	str	r2, [r5, #0]
 8009ce2:	e7ee      	b.n	8009cc2 <__swhatbuf_r+0x1c>
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	b016      	add	sp, #88	; 0x58
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cf0 <__smakebuf_r>:
 8009cf0:	898b      	ldrh	r3, [r1, #12]
 8009cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cf4:	079d      	lsls	r5, r3, #30
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	d507      	bpl.n	8009d0c <__smakebuf_r+0x1c>
 8009cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	2301      	movs	r3, #1
 8009d06:	6163      	str	r3, [r4, #20]
 8009d08:	b002      	add	sp, #8
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	ab01      	add	r3, sp, #4
 8009d0e:	466a      	mov	r2, sp
 8009d10:	f7ff ffc9 	bl	8009ca6 <__swhatbuf_r>
 8009d14:	9900      	ldr	r1, [sp, #0]
 8009d16:	4605      	mov	r5, r0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 fc0f 	bl	800a53c <_malloc_r>
 8009d1e:	b948      	cbnz	r0, 8009d34 <__smakebuf_r+0x44>
 8009d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d24:	059a      	lsls	r2, r3, #22
 8009d26:	d4ef      	bmi.n	8009d08 <__smakebuf_r+0x18>
 8009d28:	f023 0303 	bic.w	r3, r3, #3
 8009d2c:	f043 0302 	orr.w	r3, r3, #2
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	e7e3      	b.n	8009cfc <__smakebuf_r+0xc>
 8009d34:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <__smakebuf_r+0x7c>)
 8009d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	6020      	str	r0, [r4, #0]
 8009d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	9b00      	ldr	r3, [sp, #0]
 8009d44:	6163      	str	r3, [r4, #20]
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	6120      	str	r0, [r4, #16]
 8009d4a:	b15b      	cbz	r3, 8009d64 <__smakebuf_r+0x74>
 8009d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 fe5f 	bl	800aa14 <_isatty_r>
 8009d56:	b128      	cbz	r0, 8009d64 <__smakebuf_r+0x74>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	89a0      	ldrh	r0, [r4, #12]
 8009d66:	4305      	orrs	r5, r0
 8009d68:	81a5      	strh	r5, [r4, #12]
 8009d6a:	e7cd      	b.n	8009d08 <__smakebuf_r+0x18>
 8009d6c:	08009af5 	.word	0x08009af5

08009d70 <malloc>:
 8009d70:	4b02      	ldr	r3, [pc, #8]	; (8009d7c <malloc+0xc>)
 8009d72:	4601      	mov	r1, r0
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	f000 bbe1 	b.w	800a53c <_malloc_r>
 8009d7a:	bf00      	nop
 8009d7c:	2000001c 	.word	0x2000001c

08009d80 <_Balloc>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	b976      	cbnz	r6, 8009da8 <_Balloc+0x28>
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	f7ff fff0 	bl	8009d70 <malloc>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6260      	str	r0, [r4, #36]	; 0x24
 8009d94:	b920      	cbnz	r0, 8009da0 <_Balloc+0x20>
 8009d96:	4b18      	ldr	r3, [pc, #96]	; (8009df8 <_Balloc+0x78>)
 8009d98:	4818      	ldr	r0, [pc, #96]	; (8009dfc <_Balloc+0x7c>)
 8009d9a:	2166      	movs	r1, #102	; 0x66
 8009d9c:	f000 fde8 	bl	800a970 <__assert_func>
 8009da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009da4:	6006      	str	r6, [r0, #0]
 8009da6:	60c6      	str	r6, [r0, #12]
 8009da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009daa:	68f3      	ldr	r3, [r6, #12]
 8009dac:	b183      	cbz	r3, 8009dd0 <_Balloc+0x50>
 8009dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009db6:	b9b8      	cbnz	r0, 8009de8 <_Balloc+0x68>
 8009db8:	2101      	movs	r1, #1
 8009dba:	fa01 f605 	lsl.w	r6, r1, r5
 8009dbe:	1d72      	adds	r2, r6, #5
 8009dc0:	0092      	lsls	r2, r2, #2
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fb5a 	bl	800a47c <_calloc_r>
 8009dc8:	b160      	cbz	r0, 8009de4 <_Balloc+0x64>
 8009dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dce:	e00e      	b.n	8009dee <_Balloc+0x6e>
 8009dd0:	2221      	movs	r2, #33	; 0x21
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fb51 	bl	800a47c <_calloc_r>
 8009dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ddc:	60f0      	str	r0, [r6, #12]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e4      	bne.n	8009dae <_Balloc+0x2e>
 8009de4:	2000      	movs	r0, #0
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	6802      	ldr	r2, [r0, #0]
 8009dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dee:	2300      	movs	r3, #0
 8009df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009df4:	e7f7      	b.n	8009de6 <_Balloc+0x66>
 8009df6:	bf00      	nop
 8009df8:	0800ad59 	.word	0x0800ad59
 8009dfc:	0800ae40 	.word	0x0800ae40

08009e00 <_Bfree>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b976      	cbnz	r6, 8009e28 <_Bfree+0x28>
 8009e0a:	2010      	movs	r0, #16
 8009e0c:	f7ff ffb0 	bl	8009d70 <malloc>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6268      	str	r0, [r5, #36]	; 0x24
 8009e14:	b920      	cbnz	r0, 8009e20 <_Bfree+0x20>
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <_Bfree+0x3c>)
 8009e18:	4809      	ldr	r0, [pc, #36]	; (8009e40 <_Bfree+0x40>)
 8009e1a:	218a      	movs	r1, #138	; 0x8a
 8009e1c:	f000 fda8 	bl	800a970 <__assert_func>
 8009e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e24:	6006      	str	r6, [r0, #0]
 8009e26:	60c6      	str	r6, [r0, #12]
 8009e28:	b13c      	cbz	r4, 8009e3a <_Bfree+0x3a>
 8009e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e2c:	6862      	ldr	r2, [r4, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e34:	6021      	str	r1, [r4, #0]
 8009e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	0800ad59 	.word	0x0800ad59
 8009e40:	0800ae40 	.word	0x0800ae40

08009e44 <__multadd>:
 8009e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e48:	690e      	ldr	r6, [r1, #16]
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	4698      	mov	r8, r3
 8009e4e:	460c      	mov	r4, r1
 8009e50:	f101 0014 	add.w	r0, r1, #20
 8009e54:	2300      	movs	r3, #0
 8009e56:	6805      	ldr	r5, [r0, #0]
 8009e58:	b2a9      	uxth	r1, r5
 8009e5a:	fb02 8101 	mla	r1, r2, r1, r8
 8009e5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009e62:	0c2d      	lsrs	r5, r5, #16
 8009e64:	fb02 c505 	mla	r5, r2, r5, ip
 8009e68:	b289      	uxth	r1, r1
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009e70:	429e      	cmp	r6, r3
 8009e72:	f840 1b04 	str.w	r1, [r0], #4
 8009e76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009e7a:	dcec      	bgt.n	8009e56 <__multadd+0x12>
 8009e7c:	f1b8 0f00 	cmp.w	r8, #0
 8009e80:	d022      	beq.n	8009ec8 <__multadd+0x84>
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	42b3      	cmp	r3, r6
 8009e86:	dc19      	bgt.n	8009ebc <__multadd+0x78>
 8009e88:	6861      	ldr	r1, [r4, #4]
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	f7ff ff77 	bl	8009d80 <_Balloc>
 8009e92:	4605      	mov	r5, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <__multadd+0x5e>
 8009e96:	4602      	mov	r2, r0
 8009e98:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <__multadd+0x8c>)
 8009e9a:	480e      	ldr	r0, [pc, #56]	; (8009ed4 <__multadd+0x90>)
 8009e9c:	21b5      	movs	r1, #181	; 0xb5
 8009e9e:	f000 fd67 	bl	800a970 <__assert_func>
 8009ea2:	6922      	ldr	r2, [r4, #16]
 8009ea4:	3202      	adds	r2, #2
 8009ea6:	f104 010c 	add.w	r1, r4, #12
 8009eaa:	0092      	lsls	r2, r2, #2
 8009eac:	300c      	adds	r0, #12
 8009eae:	f7fe f8f3 	bl	8008098 <memcpy>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7ff ffa3 	bl	8009e00 <_Bfree>
 8009eba:	462c      	mov	r4, r5
 8009ebc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ec0:	3601      	adds	r6, #1
 8009ec2:	f8c3 8014 	str.w	r8, [r3, #20]
 8009ec6:	6126      	str	r6, [r4, #16]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ece:	bf00      	nop
 8009ed0:	0800adcf 	.word	0x0800adcf
 8009ed4:	0800ae40 	.word	0x0800ae40

08009ed8 <__hi0bits>:
 8009ed8:	0c03      	lsrs	r3, r0, #16
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	b9d3      	cbnz	r3, 8009f14 <__hi0bits+0x3c>
 8009ede:	0400      	lsls	r0, r0, #16
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ee6:	bf04      	itt	eq
 8009ee8:	0200      	lsleq	r0, r0, #8
 8009eea:	3308      	addeq	r3, #8
 8009eec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ef0:	bf04      	itt	eq
 8009ef2:	0100      	lsleq	r0, r0, #4
 8009ef4:	3304      	addeq	r3, #4
 8009ef6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009efa:	bf04      	itt	eq
 8009efc:	0080      	lsleq	r0, r0, #2
 8009efe:	3302      	addeq	r3, #2
 8009f00:	2800      	cmp	r0, #0
 8009f02:	db05      	blt.n	8009f10 <__hi0bits+0x38>
 8009f04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f08:	f103 0301 	add.w	r3, r3, #1
 8009f0c:	bf08      	it	eq
 8009f0e:	2320      	moveq	r3, #32
 8009f10:	4618      	mov	r0, r3
 8009f12:	4770      	bx	lr
 8009f14:	2300      	movs	r3, #0
 8009f16:	e7e4      	b.n	8009ee2 <__hi0bits+0xa>

08009f18 <__lo0bits>:
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	f013 0207 	ands.w	r2, r3, #7
 8009f1e:	4601      	mov	r1, r0
 8009f20:	d00b      	beq.n	8009f3a <__lo0bits+0x22>
 8009f22:	07da      	lsls	r2, r3, #31
 8009f24:	d424      	bmi.n	8009f70 <__lo0bits+0x58>
 8009f26:	0798      	lsls	r0, r3, #30
 8009f28:	bf49      	itett	mi
 8009f2a:	085b      	lsrmi	r3, r3, #1
 8009f2c:	089b      	lsrpl	r3, r3, #2
 8009f2e:	2001      	movmi	r0, #1
 8009f30:	600b      	strmi	r3, [r1, #0]
 8009f32:	bf5c      	itt	pl
 8009f34:	600b      	strpl	r3, [r1, #0]
 8009f36:	2002      	movpl	r0, #2
 8009f38:	4770      	bx	lr
 8009f3a:	b298      	uxth	r0, r3
 8009f3c:	b9b0      	cbnz	r0, 8009f6c <__lo0bits+0x54>
 8009f3e:	0c1b      	lsrs	r3, r3, #16
 8009f40:	2010      	movs	r0, #16
 8009f42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f46:	bf04      	itt	eq
 8009f48:	0a1b      	lsreq	r3, r3, #8
 8009f4a:	3008      	addeq	r0, #8
 8009f4c:	071a      	lsls	r2, r3, #28
 8009f4e:	bf04      	itt	eq
 8009f50:	091b      	lsreq	r3, r3, #4
 8009f52:	3004      	addeq	r0, #4
 8009f54:	079a      	lsls	r2, r3, #30
 8009f56:	bf04      	itt	eq
 8009f58:	089b      	lsreq	r3, r3, #2
 8009f5a:	3002      	addeq	r0, #2
 8009f5c:	07da      	lsls	r2, r3, #31
 8009f5e:	d403      	bmi.n	8009f68 <__lo0bits+0x50>
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	f100 0001 	add.w	r0, r0, #1
 8009f66:	d005      	beq.n	8009f74 <__lo0bits+0x5c>
 8009f68:	600b      	str	r3, [r1, #0]
 8009f6a:	4770      	bx	lr
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	e7e8      	b.n	8009f42 <__lo0bits+0x2a>
 8009f70:	2000      	movs	r0, #0
 8009f72:	4770      	bx	lr
 8009f74:	2020      	movs	r0, #32
 8009f76:	4770      	bx	lr

08009f78 <__i2b>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	f7ff feff 	bl	8009d80 <_Balloc>
 8009f82:	4602      	mov	r2, r0
 8009f84:	b928      	cbnz	r0, 8009f92 <__i2b+0x1a>
 8009f86:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <__i2b+0x24>)
 8009f88:	4805      	ldr	r0, [pc, #20]	; (8009fa0 <__i2b+0x28>)
 8009f8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f8e:	f000 fcef 	bl	800a970 <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	6144      	str	r4, [r0, #20]
 8009f96:	6103      	str	r3, [r0, #16]
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800adcf 	.word	0x0800adcf
 8009fa0:	0800ae40 	.word	0x0800ae40

08009fa4 <__multiply>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4614      	mov	r4, r2
 8009faa:	690a      	ldr	r2, [r1, #16]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	bfb8      	it	lt
 8009fb2:	460b      	movlt	r3, r1
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	bfbc      	itt	lt
 8009fb8:	4625      	movlt	r5, r4
 8009fba:	461c      	movlt	r4, r3
 8009fbc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009fc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009fc4:	68ab      	ldr	r3, [r5, #8]
 8009fc6:	6869      	ldr	r1, [r5, #4]
 8009fc8:	eb0a 0709 	add.w	r7, sl, r9
 8009fcc:	42bb      	cmp	r3, r7
 8009fce:	b085      	sub	sp, #20
 8009fd0:	bfb8      	it	lt
 8009fd2:	3101      	addlt	r1, #1
 8009fd4:	f7ff fed4 	bl	8009d80 <_Balloc>
 8009fd8:	b930      	cbnz	r0, 8009fe8 <__multiply+0x44>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	4b42      	ldr	r3, [pc, #264]	; (800a0e8 <__multiply+0x144>)
 8009fde:	4843      	ldr	r0, [pc, #268]	; (800a0ec <__multiply+0x148>)
 8009fe0:	f240 115d 	movw	r1, #349	; 0x15d
 8009fe4:	f000 fcc4 	bl	800a970 <__assert_func>
 8009fe8:	f100 0614 	add.w	r6, r0, #20
 8009fec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ff0:	4633      	mov	r3, r6
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	d31e      	bcc.n	800a036 <__multiply+0x92>
 8009ff8:	f105 0c14 	add.w	ip, r5, #20
 8009ffc:	f104 0314 	add.w	r3, r4, #20
 800a000:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a004:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a008:	9202      	str	r2, [sp, #8]
 800a00a:	ebac 0205 	sub.w	r2, ip, r5
 800a00e:	3a15      	subs	r2, #21
 800a010:	f022 0203 	bic.w	r2, r2, #3
 800a014:	3204      	adds	r2, #4
 800a016:	f105 0115 	add.w	r1, r5, #21
 800a01a:	458c      	cmp	ip, r1
 800a01c:	bf38      	it	cc
 800a01e:	2204      	movcc	r2, #4
 800a020:	9201      	str	r2, [sp, #4]
 800a022:	9a02      	ldr	r2, [sp, #8]
 800a024:	9303      	str	r3, [sp, #12]
 800a026:	429a      	cmp	r2, r3
 800a028:	d808      	bhi.n	800a03c <__multiply+0x98>
 800a02a:	2f00      	cmp	r7, #0
 800a02c:	dc55      	bgt.n	800a0da <__multiply+0x136>
 800a02e:	6107      	str	r7, [r0, #16]
 800a030:	b005      	add	sp, #20
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	f843 2b04 	str.w	r2, [r3], #4
 800a03a:	e7db      	b.n	8009ff4 <__multiply+0x50>
 800a03c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a040:	f1ba 0f00 	cmp.w	sl, #0
 800a044:	d020      	beq.n	800a088 <__multiply+0xe4>
 800a046:	f105 0e14 	add.w	lr, r5, #20
 800a04a:	46b1      	mov	r9, r6
 800a04c:	2200      	movs	r2, #0
 800a04e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a052:	f8d9 b000 	ldr.w	fp, [r9]
 800a056:	b2a1      	uxth	r1, r4
 800a058:	fa1f fb8b 	uxth.w	fp, fp
 800a05c:	fb0a b101 	mla	r1, sl, r1, fp
 800a060:	4411      	add	r1, r2
 800a062:	f8d9 2000 	ldr.w	r2, [r9]
 800a066:	0c24      	lsrs	r4, r4, #16
 800a068:	0c12      	lsrs	r2, r2, #16
 800a06a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a06e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a072:	b289      	uxth	r1, r1
 800a074:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a078:	45f4      	cmp	ip, lr
 800a07a:	f849 1b04 	str.w	r1, [r9], #4
 800a07e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a082:	d8e4      	bhi.n	800a04e <__multiply+0xaa>
 800a084:	9901      	ldr	r1, [sp, #4]
 800a086:	5072      	str	r2, [r6, r1]
 800a088:	9a03      	ldr	r2, [sp, #12]
 800a08a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a08e:	3304      	adds	r3, #4
 800a090:	f1b9 0f00 	cmp.w	r9, #0
 800a094:	d01f      	beq.n	800a0d6 <__multiply+0x132>
 800a096:	6834      	ldr	r4, [r6, #0]
 800a098:	f105 0114 	add.w	r1, r5, #20
 800a09c:	46b6      	mov	lr, r6
 800a09e:	f04f 0a00 	mov.w	sl, #0
 800a0a2:	880a      	ldrh	r2, [r1, #0]
 800a0a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a0a8:	fb09 b202 	mla	r2, r9, r2, fp
 800a0ac:	4492      	add	sl, r2
 800a0ae:	b2a4      	uxth	r4, r4
 800a0b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a0b4:	f84e 4b04 	str.w	r4, [lr], #4
 800a0b8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a0bc:	f8be 2000 	ldrh.w	r2, [lr]
 800a0c0:	0c24      	lsrs	r4, r4, #16
 800a0c2:	fb09 2404 	mla	r4, r9, r4, r2
 800a0c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a0ca:	458c      	cmp	ip, r1
 800a0cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a0d0:	d8e7      	bhi.n	800a0a2 <__multiply+0xfe>
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	50b4      	str	r4, [r6, r2]
 800a0d6:	3604      	adds	r6, #4
 800a0d8:	e7a3      	b.n	800a022 <__multiply+0x7e>
 800a0da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1a5      	bne.n	800a02e <__multiply+0x8a>
 800a0e2:	3f01      	subs	r7, #1
 800a0e4:	e7a1      	b.n	800a02a <__multiply+0x86>
 800a0e6:	bf00      	nop
 800a0e8:	0800adcf 	.word	0x0800adcf
 800a0ec:	0800ae40 	.word	0x0800ae40

0800a0f0 <__pow5mult>:
 800a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	4615      	mov	r5, r2
 800a0f6:	f012 0203 	ands.w	r2, r2, #3
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	d007      	beq.n	800a110 <__pow5mult+0x20>
 800a100:	4c25      	ldr	r4, [pc, #148]	; (800a198 <__pow5mult+0xa8>)
 800a102:	3a01      	subs	r2, #1
 800a104:	2300      	movs	r3, #0
 800a106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a10a:	f7ff fe9b 	bl	8009e44 <__multadd>
 800a10e:	4607      	mov	r7, r0
 800a110:	10ad      	asrs	r5, r5, #2
 800a112:	d03d      	beq.n	800a190 <__pow5mult+0xa0>
 800a114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a116:	b97c      	cbnz	r4, 800a138 <__pow5mult+0x48>
 800a118:	2010      	movs	r0, #16
 800a11a:	f7ff fe29 	bl	8009d70 <malloc>
 800a11e:	4602      	mov	r2, r0
 800a120:	6270      	str	r0, [r6, #36]	; 0x24
 800a122:	b928      	cbnz	r0, 800a130 <__pow5mult+0x40>
 800a124:	4b1d      	ldr	r3, [pc, #116]	; (800a19c <__pow5mult+0xac>)
 800a126:	481e      	ldr	r0, [pc, #120]	; (800a1a0 <__pow5mult+0xb0>)
 800a128:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a12c:	f000 fc20 	bl	800a970 <__assert_func>
 800a130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a134:	6004      	str	r4, [r0, #0]
 800a136:	60c4      	str	r4, [r0, #12]
 800a138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a140:	b94c      	cbnz	r4, 800a156 <__pow5mult+0x66>
 800a142:	f240 2171 	movw	r1, #625	; 0x271
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ff16 	bl	8009f78 <__i2b>
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a152:	4604      	mov	r4, r0
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	f04f 0900 	mov.w	r9, #0
 800a15a:	07eb      	lsls	r3, r5, #31
 800a15c:	d50a      	bpl.n	800a174 <__pow5mult+0x84>
 800a15e:	4639      	mov	r1, r7
 800a160:	4622      	mov	r2, r4
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff ff1e 	bl	8009fa4 <__multiply>
 800a168:	4639      	mov	r1, r7
 800a16a:	4680      	mov	r8, r0
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7ff fe47 	bl	8009e00 <_Bfree>
 800a172:	4647      	mov	r7, r8
 800a174:	106d      	asrs	r5, r5, #1
 800a176:	d00b      	beq.n	800a190 <__pow5mult+0xa0>
 800a178:	6820      	ldr	r0, [r4, #0]
 800a17a:	b938      	cbnz	r0, 800a18c <__pow5mult+0x9c>
 800a17c:	4622      	mov	r2, r4
 800a17e:	4621      	mov	r1, r4
 800a180:	4630      	mov	r0, r6
 800a182:	f7ff ff0f 	bl	8009fa4 <__multiply>
 800a186:	6020      	str	r0, [r4, #0]
 800a188:	f8c0 9000 	str.w	r9, [r0]
 800a18c:	4604      	mov	r4, r0
 800a18e:	e7e4      	b.n	800a15a <__pow5mult+0x6a>
 800a190:	4638      	mov	r0, r7
 800a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a196:	bf00      	nop
 800a198:	0800af90 	.word	0x0800af90
 800a19c:	0800ad59 	.word	0x0800ad59
 800a1a0:	0800ae40 	.word	0x0800ae40

0800a1a4 <__lshift>:
 800a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	6849      	ldr	r1, [r1, #4]
 800a1ac:	6923      	ldr	r3, [r4, #16]
 800a1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	4691      	mov	r9, r2
 800a1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1bc:	f108 0601 	add.w	r6, r8, #1
 800a1c0:	42b3      	cmp	r3, r6
 800a1c2:	db0b      	blt.n	800a1dc <__lshift+0x38>
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f7ff fddb 	bl	8009d80 <_Balloc>
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	b948      	cbnz	r0, 800a1e2 <__lshift+0x3e>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	4b28      	ldr	r3, [pc, #160]	; (800a274 <__lshift+0xd0>)
 800a1d2:	4829      	ldr	r0, [pc, #164]	; (800a278 <__lshift+0xd4>)
 800a1d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1d8:	f000 fbca 	bl	800a970 <__assert_func>
 800a1dc:	3101      	adds	r1, #1
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	e7ee      	b.n	800a1c0 <__lshift+0x1c>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f100 0114 	add.w	r1, r0, #20
 800a1e8:	f100 0210 	add.w	r2, r0, #16
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	4553      	cmp	r3, sl
 800a1f0:	db33      	blt.n	800a25a <__lshift+0xb6>
 800a1f2:	6920      	ldr	r0, [r4, #16]
 800a1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1f8:	f104 0314 	add.w	r3, r4, #20
 800a1fc:	f019 091f 	ands.w	r9, r9, #31
 800a200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a208:	d02b      	beq.n	800a262 <__lshift+0xbe>
 800a20a:	f1c9 0e20 	rsb	lr, r9, #32
 800a20e:	468a      	mov	sl, r1
 800a210:	2200      	movs	r2, #0
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	fa00 f009 	lsl.w	r0, r0, r9
 800a218:	4302      	orrs	r2, r0
 800a21a:	f84a 2b04 	str.w	r2, [sl], #4
 800a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a222:	459c      	cmp	ip, r3
 800a224:	fa22 f20e 	lsr.w	r2, r2, lr
 800a228:	d8f3      	bhi.n	800a212 <__lshift+0x6e>
 800a22a:	ebac 0304 	sub.w	r3, ip, r4
 800a22e:	3b15      	subs	r3, #21
 800a230:	f023 0303 	bic.w	r3, r3, #3
 800a234:	3304      	adds	r3, #4
 800a236:	f104 0015 	add.w	r0, r4, #21
 800a23a:	4584      	cmp	ip, r0
 800a23c:	bf38      	it	cc
 800a23e:	2304      	movcc	r3, #4
 800a240:	50ca      	str	r2, [r1, r3]
 800a242:	b10a      	cbz	r2, 800a248 <__lshift+0xa4>
 800a244:	f108 0602 	add.w	r6, r8, #2
 800a248:	3e01      	subs	r6, #1
 800a24a:	4638      	mov	r0, r7
 800a24c:	612e      	str	r6, [r5, #16]
 800a24e:	4621      	mov	r1, r4
 800a250:	f7ff fdd6 	bl	8009e00 <_Bfree>
 800a254:	4628      	mov	r0, r5
 800a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a25e:	3301      	adds	r3, #1
 800a260:	e7c5      	b.n	800a1ee <__lshift+0x4a>
 800a262:	3904      	subs	r1, #4
 800a264:	f853 2b04 	ldr.w	r2, [r3], #4
 800a268:	f841 2f04 	str.w	r2, [r1, #4]!
 800a26c:	459c      	cmp	ip, r3
 800a26e:	d8f9      	bhi.n	800a264 <__lshift+0xc0>
 800a270:	e7ea      	b.n	800a248 <__lshift+0xa4>
 800a272:	bf00      	nop
 800a274:	0800adcf 	.word	0x0800adcf
 800a278:	0800ae40 	.word	0x0800ae40

0800a27c <__mcmp>:
 800a27c:	b530      	push	{r4, r5, lr}
 800a27e:	6902      	ldr	r2, [r0, #16]
 800a280:	690c      	ldr	r4, [r1, #16]
 800a282:	1b12      	subs	r2, r2, r4
 800a284:	d10e      	bne.n	800a2a4 <__mcmp+0x28>
 800a286:	f100 0314 	add.w	r3, r0, #20
 800a28a:	3114      	adds	r1, #20
 800a28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a29c:	42a5      	cmp	r5, r4
 800a29e:	d003      	beq.n	800a2a8 <__mcmp+0x2c>
 800a2a0:	d305      	bcc.n	800a2ae <__mcmp+0x32>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	bd30      	pop	{r4, r5, pc}
 800a2a8:	4283      	cmp	r3, r0
 800a2aa:	d3f3      	bcc.n	800a294 <__mcmp+0x18>
 800a2ac:	e7fa      	b.n	800a2a4 <__mcmp+0x28>
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	e7f7      	b.n	800a2a4 <__mcmp+0x28>

0800a2b4 <__mdiff>:
 800a2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4617      	mov	r7, r2
 800a2c2:	f7ff ffdb 	bl	800a27c <__mcmp>
 800a2c6:	1e05      	subs	r5, r0, #0
 800a2c8:	d110      	bne.n	800a2ec <__mdiff+0x38>
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff fd57 	bl	8009d80 <_Balloc>
 800a2d2:	b930      	cbnz	r0, 800a2e2 <__mdiff+0x2e>
 800a2d4:	4b39      	ldr	r3, [pc, #228]	; (800a3bc <__mdiff+0x108>)
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	f240 2132 	movw	r1, #562	; 0x232
 800a2dc:	4838      	ldr	r0, [pc, #224]	; (800a3c0 <__mdiff+0x10c>)
 800a2de:	f000 fb47 	bl	800a970 <__assert_func>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	bfa4      	itt	ge
 800a2ee:	463b      	movge	r3, r7
 800a2f0:	4627      	movge	r7, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	bfa6      	itte	ge
 800a2f8:	461c      	movge	r4, r3
 800a2fa:	2500      	movge	r5, #0
 800a2fc:	2501      	movlt	r5, #1
 800a2fe:	f7ff fd3f 	bl	8009d80 <_Balloc>
 800a302:	b920      	cbnz	r0, 800a30e <__mdiff+0x5a>
 800a304:	4b2d      	ldr	r3, [pc, #180]	; (800a3bc <__mdiff+0x108>)
 800a306:	4602      	mov	r2, r0
 800a308:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a30c:	e7e6      	b.n	800a2dc <__mdiff+0x28>
 800a30e:	693e      	ldr	r6, [r7, #16]
 800a310:	60c5      	str	r5, [r0, #12]
 800a312:	6925      	ldr	r5, [r4, #16]
 800a314:	f107 0114 	add.w	r1, r7, #20
 800a318:	f104 0914 	add.w	r9, r4, #20
 800a31c:	f100 0e14 	add.w	lr, r0, #20
 800a320:	f107 0210 	add.w	r2, r7, #16
 800a324:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a328:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a32c:	46f2      	mov	sl, lr
 800a32e:	2700      	movs	r7, #0
 800a330:	f859 3b04 	ldr.w	r3, [r9], #4
 800a334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a338:	fa1f f883 	uxth.w	r8, r3
 800a33c:	fa17 f78b 	uxtah	r7, r7, fp
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	eba7 0808 	sub.w	r8, r7, r8
 800a346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a34a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a34e:	fa1f f888 	uxth.w	r8, r8
 800a352:	141f      	asrs	r7, r3, #16
 800a354:	454d      	cmp	r5, r9
 800a356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a35a:	f84a 3b04 	str.w	r3, [sl], #4
 800a35e:	d8e7      	bhi.n	800a330 <__mdiff+0x7c>
 800a360:	1b2b      	subs	r3, r5, r4
 800a362:	3b15      	subs	r3, #21
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	3304      	adds	r3, #4
 800a36a:	3415      	adds	r4, #21
 800a36c:	42a5      	cmp	r5, r4
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	4419      	add	r1, r3
 800a374:	4473      	add	r3, lr
 800a376:	469e      	mov	lr, r3
 800a378:	460d      	mov	r5, r1
 800a37a:	4565      	cmp	r5, ip
 800a37c:	d30e      	bcc.n	800a39c <__mdiff+0xe8>
 800a37e:	f10c 0203 	add.w	r2, ip, #3
 800a382:	1a52      	subs	r2, r2, r1
 800a384:	f022 0203 	bic.w	r2, r2, #3
 800a388:	3903      	subs	r1, #3
 800a38a:	458c      	cmp	ip, r1
 800a38c:	bf38      	it	cc
 800a38e:	2200      	movcc	r2, #0
 800a390:	441a      	add	r2, r3
 800a392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a396:	b17b      	cbz	r3, 800a3b8 <__mdiff+0x104>
 800a398:	6106      	str	r6, [r0, #16]
 800a39a:	e7a5      	b.n	800a2e8 <__mdiff+0x34>
 800a39c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a3a0:	fa17 f488 	uxtah	r4, r7, r8
 800a3a4:	1422      	asrs	r2, r4, #16
 800a3a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a3aa:	b2a4      	uxth	r4, r4
 800a3ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a3b0:	f84e 4b04 	str.w	r4, [lr], #4
 800a3b4:	1417      	asrs	r7, r2, #16
 800a3b6:	e7e0      	b.n	800a37a <__mdiff+0xc6>
 800a3b8:	3e01      	subs	r6, #1
 800a3ba:	e7ea      	b.n	800a392 <__mdiff+0xde>
 800a3bc:	0800adcf 	.word	0x0800adcf
 800a3c0:	0800ae40 	.word	0x0800ae40

0800a3c4 <__d2b>:
 800a3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	4689      	mov	r9, r1
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	ec57 6b10 	vmov	r6, r7, d0
 800a3d0:	4690      	mov	r8, r2
 800a3d2:	f7ff fcd5 	bl	8009d80 <_Balloc>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b930      	cbnz	r0, 800a3e8 <__d2b+0x24>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <__d2b+0xb0>)
 800a3de:	4826      	ldr	r0, [pc, #152]	; (800a478 <__d2b+0xb4>)
 800a3e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e4:	f000 fac4 	bl	800a970 <__assert_func>
 800a3e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3f0:	bb35      	cbnz	r5, 800a440 <__d2b+0x7c>
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	d028      	beq.n	800a44a <__d2b+0x86>
 800a3f8:	4668      	mov	r0, sp
 800a3fa:	9600      	str	r6, [sp, #0]
 800a3fc:	f7ff fd8c 	bl	8009f18 <__lo0bits>
 800a400:	9900      	ldr	r1, [sp, #0]
 800a402:	b300      	cbz	r0, 800a446 <__d2b+0x82>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	f1c0 0320 	rsb	r3, r0, #32
 800a40a:	fa02 f303 	lsl.w	r3, r2, r3
 800a40e:	430b      	orrs	r3, r1
 800a410:	40c2      	lsrs	r2, r0
 800a412:	6163      	str	r3, [r4, #20]
 800a414:	9201      	str	r2, [sp, #4]
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	61a3      	str	r3, [r4, #24]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2202      	movne	r2, #2
 800a420:	2201      	moveq	r2, #1
 800a422:	6122      	str	r2, [r4, #16]
 800a424:	b1d5      	cbz	r5, 800a45c <__d2b+0x98>
 800a426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a42a:	4405      	add	r5, r0
 800a42c:	f8c9 5000 	str.w	r5, [r9]
 800a430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a434:	f8c8 0000 	str.w	r0, [r8]
 800a438:	4620      	mov	r0, r4
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a444:	e7d5      	b.n	800a3f2 <__d2b+0x2e>
 800a446:	6161      	str	r1, [r4, #20]
 800a448:	e7e5      	b.n	800a416 <__d2b+0x52>
 800a44a:	a801      	add	r0, sp, #4
 800a44c:	f7ff fd64 	bl	8009f18 <__lo0bits>
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	6163      	str	r3, [r4, #20]
 800a454:	2201      	movs	r2, #1
 800a456:	6122      	str	r2, [r4, #16]
 800a458:	3020      	adds	r0, #32
 800a45a:	e7e3      	b.n	800a424 <__d2b+0x60>
 800a45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a464:	f8c9 0000 	str.w	r0, [r9]
 800a468:	6918      	ldr	r0, [r3, #16]
 800a46a:	f7ff fd35 	bl	8009ed8 <__hi0bits>
 800a46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a472:	e7df      	b.n	800a434 <__d2b+0x70>
 800a474:	0800adcf 	.word	0x0800adcf
 800a478:	0800ae40 	.word	0x0800ae40

0800a47c <_calloc_r>:
 800a47c:	b513      	push	{r0, r1, r4, lr}
 800a47e:	434a      	muls	r2, r1
 800a480:	4611      	mov	r1, r2
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	f000 f85a 	bl	800a53c <_malloc_r>
 800a488:	4604      	mov	r4, r0
 800a48a:	b118      	cbz	r0, 800a494 <_calloc_r+0x18>
 800a48c:	9a01      	ldr	r2, [sp, #4]
 800a48e:	2100      	movs	r1, #0
 800a490:	f7fd fe10 	bl	80080b4 <memset>
 800a494:	4620      	mov	r0, r4
 800a496:	b002      	add	sp, #8
 800a498:	bd10      	pop	{r4, pc}
	...

0800a49c <_free_r>:
 800a49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d048      	beq.n	800a534 <_free_r+0x98>
 800a4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a6:	9001      	str	r0, [sp, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ae:	bfb8      	it	lt
 800a4b0:	18e4      	addlt	r4, r4, r3
 800a4b2:	f000 fae3 	bl	800aa7c <__malloc_lock>
 800a4b6:	4a20      	ldr	r2, [pc, #128]	; (800a538 <_free_r+0x9c>)
 800a4b8:	9801      	ldr	r0, [sp, #4]
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	4615      	mov	r5, r2
 800a4be:	b933      	cbnz	r3, 800a4ce <_free_r+0x32>
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	6014      	str	r4, [r2, #0]
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ca:	f000 badd 	b.w	800aa88 <__malloc_unlock>
 800a4ce:	42a3      	cmp	r3, r4
 800a4d0:	d90b      	bls.n	800a4ea <_free_r+0x4e>
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	1862      	adds	r2, r4, r1
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bf04      	itt	eq
 800a4da:	681a      	ldreq	r2, [r3, #0]
 800a4dc:	685b      	ldreq	r3, [r3, #4]
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	bf04      	itt	eq
 800a4e2:	1852      	addeq	r2, r2, r1
 800a4e4:	6022      	streq	r2, [r4, #0]
 800a4e6:	602c      	str	r4, [r5, #0]
 800a4e8:	e7ec      	b.n	800a4c4 <_free_r+0x28>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x58>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x4e>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1855      	adds	r5, r2, r1
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x78>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	4421      	add	r1, r4
 800a500:	1854      	adds	r4, r2, r1
 800a502:	42a3      	cmp	r3, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1dd      	bne.n	800a4c4 <_free_r+0x28>
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4421      	add	r1, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	e7d7      	b.n	800a4c4 <_free_r+0x28>
 800a514:	d902      	bls.n	800a51c <_free_r+0x80>
 800a516:	230c      	movs	r3, #12
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7d3      	b.n	800a4c4 <_free_r+0x28>
 800a51c:	6825      	ldr	r5, [r4, #0]
 800a51e:	1961      	adds	r1, r4, r5
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7c7      	b.n	800a4c4 <_free_r+0x28>
 800a534:	b003      	add	sp, #12
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	20000238 	.word	0x20000238

0800a53c <_malloc_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	1ccd      	adds	r5, r1, #3
 800a540:	f025 0503 	bic.w	r5, r5, #3
 800a544:	3508      	adds	r5, #8
 800a546:	2d0c      	cmp	r5, #12
 800a548:	bf38      	it	cc
 800a54a:	250c      	movcc	r5, #12
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	4606      	mov	r6, r0
 800a550:	db01      	blt.n	800a556 <_malloc_r+0x1a>
 800a552:	42a9      	cmp	r1, r5
 800a554:	d903      	bls.n	800a55e <_malloc_r+0x22>
 800a556:	230c      	movs	r3, #12
 800a558:	6033      	str	r3, [r6, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55e:	f000 fa8d 	bl	800aa7c <__malloc_lock>
 800a562:	4921      	ldr	r1, [pc, #132]	; (800a5e8 <_malloc_r+0xac>)
 800a564:	680a      	ldr	r2, [r1, #0]
 800a566:	4614      	mov	r4, r2
 800a568:	b99c      	cbnz	r4, 800a592 <_malloc_r+0x56>
 800a56a:	4f20      	ldr	r7, [pc, #128]	; (800a5ec <_malloc_r+0xb0>)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	b923      	cbnz	r3, 800a57a <_malloc_r+0x3e>
 800a570:	4621      	mov	r1, r4
 800a572:	4630      	mov	r0, r6
 800a574:	f000 f996 	bl	800a8a4 <_sbrk_r>
 800a578:	6038      	str	r0, [r7, #0]
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	f000 f991 	bl	800a8a4 <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d123      	bne.n	800a5ce <_malloc_r+0x92>
 800a586:	230c      	movs	r3, #12
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 fa7c 	bl	800aa88 <__malloc_unlock>
 800a590:	e7e3      	b.n	800a55a <_malloc_r+0x1e>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	1b5b      	subs	r3, r3, r5
 800a596:	d417      	bmi.n	800a5c8 <_malloc_r+0x8c>
 800a598:	2b0b      	cmp	r3, #11
 800a59a:	d903      	bls.n	800a5a4 <_malloc_r+0x68>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	441c      	add	r4, r3
 800a5a0:	6025      	str	r5, [r4, #0]
 800a5a2:	e004      	b.n	800a5ae <_malloc_r+0x72>
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	42a2      	cmp	r2, r4
 800a5a8:	bf0c      	ite	eq
 800a5aa:	600b      	streq	r3, [r1, #0]
 800a5ac:	6053      	strne	r3, [r2, #4]
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f000 fa6a 	bl	800aa88 <__malloc_unlock>
 800a5b4:	f104 000b 	add.w	r0, r4, #11
 800a5b8:	1d23      	adds	r3, r4, #4
 800a5ba:	f020 0007 	bic.w	r0, r0, #7
 800a5be:	1ac2      	subs	r2, r0, r3
 800a5c0:	d0cc      	beq.n	800a55c <_malloc_r+0x20>
 800a5c2:	1a1b      	subs	r3, r3, r0
 800a5c4:	50a3      	str	r3, [r4, r2]
 800a5c6:	e7c9      	b.n	800a55c <_malloc_r+0x20>
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	6864      	ldr	r4, [r4, #4]
 800a5cc:	e7cc      	b.n	800a568 <_malloc_r+0x2c>
 800a5ce:	1cc4      	adds	r4, r0, #3
 800a5d0:	f024 0403 	bic.w	r4, r4, #3
 800a5d4:	42a0      	cmp	r0, r4
 800a5d6:	d0e3      	beq.n	800a5a0 <_malloc_r+0x64>
 800a5d8:	1a21      	subs	r1, r4, r0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f000 f962 	bl	800a8a4 <_sbrk_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d1dd      	bne.n	800a5a0 <_malloc_r+0x64>
 800a5e4:	e7cf      	b.n	800a586 <_malloc_r+0x4a>
 800a5e6:	bf00      	nop
 800a5e8:	20000238 	.word	0x20000238
 800a5ec:	2000023c 	.word	0x2000023c

0800a5f0 <__sfputc_r>:
 800a5f0:	6893      	ldr	r3, [r2, #8]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	b410      	push	{r4}
 800a5f8:	6093      	str	r3, [r2, #8]
 800a5fa:	da08      	bge.n	800a60e <__sfputc_r+0x1e>
 800a5fc:	6994      	ldr	r4, [r2, #24]
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	db01      	blt.n	800a606 <__sfputc_r+0x16>
 800a602:	290a      	cmp	r1, #10
 800a604:	d103      	bne.n	800a60e <__sfputc_r+0x1e>
 800a606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a60a:	f7fe ba53 	b.w	8008ab4 <__swbuf_r>
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	1c58      	adds	r0, r3, #1
 800a612:	6010      	str	r0, [r2, #0]
 800a614:	7019      	strb	r1, [r3, #0]
 800a616:	4608      	mov	r0, r1
 800a618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <__sfputs_r>:
 800a61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a620:	4606      	mov	r6, r0
 800a622:	460f      	mov	r7, r1
 800a624:	4614      	mov	r4, r2
 800a626:	18d5      	adds	r5, r2, r3
 800a628:	42ac      	cmp	r4, r5
 800a62a:	d101      	bne.n	800a630 <__sfputs_r+0x12>
 800a62c:	2000      	movs	r0, #0
 800a62e:	e007      	b.n	800a640 <__sfputs_r+0x22>
 800a630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a634:	463a      	mov	r2, r7
 800a636:	4630      	mov	r0, r6
 800a638:	f7ff ffda 	bl	800a5f0 <__sfputc_r>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d1f3      	bne.n	800a628 <__sfputs_r+0xa>
 800a640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a644 <_vfiprintf_r>:
 800a644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	460d      	mov	r5, r1
 800a64a:	b09d      	sub	sp, #116	; 0x74
 800a64c:	4614      	mov	r4, r2
 800a64e:	4698      	mov	r8, r3
 800a650:	4606      	mov	r6, r0
 800a652:	b118      	cbz	r0, 800a65c <_vfiprintf_r+0x18>
 800a654:	6983      	ldr	r3, [r0, #24]
 800a656:	b90b      	cbnz	r3, 800a65c <_vfiprintf_r+0x18>
 800a658:	f7ff fa80 	bl	8009b5c <__sinit>
 800a65c:	4b89      	ldr	r3, [pc, #548]	; (800a884 <_vfiprintf_r+0x240>)
 800a65e:	429d      	cmp	r5, r3
 800a660:	d11b      	bne.n	800a69a <_vfiprintf_r+0x56>
 800a662:	6875      	ldr	r5, [r6, #4]
 800a664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a666:	07d9      	lsls	r1, r3, #31
 800a668:	d405      	bmi.n	800a676 <_vfiprintf_r+0x32>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	059a      	lsls	r2, r3, #22
 800a66e:	d402      	bmi.n	800a676 <_vfiprintf_r+0x32>
 800a670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a672:	f7ff fb16 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	071b      	lsls	r3, r3, #28
 800a67a:	d501      	bpl.n	800a680 <_vfiprintf_r+0x3c>
 800a67c:	692b      	ldr	r3, [r5, #16]
 800a67e:	b9eb      	cbnz	r3, 800a6bc <_vfiprintf_r+0x78>
 800a680:	4629      	mov	r1, r5
 800a682:	4630      	mov	r0, r6
 800a684:	f7fe fa68 	bl	8008b58 <__swsetup_r>
 800a688:	b1c0      	cbz	r0, 800a6bc <_vfiprintf_r+0x78>
 800a68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a68c:	07dc      	lsls	r4, r3, #31
 800a68e:	d50e      	bpl.n	800a6ae <_vfiprintf_r+0x6a>
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	b01d      	add	sp, #116	; 0x74
 800a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69a:	4b7b      	ldr	r3, [pc, #492]	; (800a888 <_vfiprintf_r+0x244>)
 800a69c:	429d      	cmp	r5, r3
 800a69e:	d101      	bne.n	800a6a4 <_vfiprintf_r+0x60>
 800a6a0:	68b5      	ldr	r5, [r6, #8]
 800a6a2:	e7df      	b.n	800a664 <_vfiprintf_r+0x20>
 800a6a4:	4b79      	ldr	r3, [pc, #484]	; (800a88c <_vfiprintf_r+0x248>)
 800a6a6:	429d      	cmp	r5, r3
 800a6a8:	bf08      	it	eq
 800a6aa:	68f5      	ldreq	r5, [r6, #12]
 800a6ac:	e7da      	b.n	800a664 <_vfiprintf_r+0x20>
 800a6ae:	89ab      	ldrh	r3, [r5, #12]
 800a6b0:	0598      	lsls	r0, r3, #22
 800a6b2:	d4ed      	bmi.n	800a690 <_vfiprintf_r+0x4c>
 800a6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6b6:	f7ff faf5 	bl	8009ca4 <__retarget_lock_release_recursive>
 800a6ba:	e7e9      	b.n	800a690 <_vfiprintf_r+0x4c>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ca:	2330      	movs	r3, #48	; 0x30
 800a6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a890 <_vfiprintf_r+0x24c>
 800a6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6d4:	f04f 0901 	mov.w	r9, #1
 800a6d8:	4623      	mov	r3, r4
 800a6da:	469a      	mov	sl, r3
 800a6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e0:	b10a      	cbz	r2, 800a6e6 <_vfiprintf_r+0xa2>
 800a6e2:	2a25      	cmp	r2, #37	; 0x25
 800a6e4:	d1f9      	bne.n	800a6da <_vfiprintf_r+0x96>
 800a6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ea:	d00b      	beq.n	800a704 <_vfiprintf_r+0xc0>
 800a6ec:	465b      	mov	r3, fp
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7ff ff93 	bl	800a61e <__sfputs_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f000 80aa 	beq.w	800a852 <_vfiprintf_r+0x20e>
 800a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a700:	445a      	add	r2, fp
 800a702:	9209      	str	r2, [sp, #36]	; 0x24
 800a704:	f89a 3000 	ldrb.w	r3, [sl]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 80a2 	beq.w	800a852 <_vfiprintf_r+0x20e>
 800a70e:	2300      	movs	r3, #0
 800a710:	f04f 32ff 	mov.w	r2, #4294967295
 800a714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a718:	f10a 0a01 	add.w	sl, sl, #1
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	9307      	str	r3, [sp, #28]
 800a720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a724:	931a      	str	r3, [sp, #104]	; 0x68
 800a726:	4654      	mov	r4, sl
 800a728:	2205      	movs	r2, #5
 800a72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a72e:	4858      	ldr	r0, [pc, #352]	; (800a890 <_vfiprintf_r+0x24c>)
 800a730:	f7f5 fd56 	bl	80001e0 <memchr>
 800a734:	9a04      	ldr	r2, [sp, #16]
 800a736:	b9d8      	cbnz	r0, 800a770 <_vfiprintf_r+0x12c>
 800a738:	06d1      	lsls	r1, r2, #27
 800a73a:	bf44      	itt	mi
 800a73c:	2320      	movmi	r3, #32
 800a73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a742:	0713      	lsls	r3, r2, #28
 800a744:	bf44      	itt	mi
 800a746:	232b      	movmi	r3, #43	; 0x2b
 800a748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74c:	f89a 3000 	ldrb.w	r3, [sl]
 800a750:	2b2a      	cmp	r3, #42	; 0x2a
 800a752:	d015      	beq.n	800a780 <_vfiprintf_r+0x13c>
 800a754:	9a07      	ldr	r2, [sp, #28]
 800a756:	4654      	mov	r4, sl
 800a758:	2000      	movs	r0, #0
 800a75a:	f04f 0c0a 	mov.w	ip, #10
 800a75e:	4621      	mov	r1, r4
 800a760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a764:	3b30      	subs	r3, #48	; 0x30
 800a766:	2b09      	cmp	r3, #9
 800a768:	d94e      	bls.n	800a808 <_vfiprintf_r+0x1c4>
 800a76a:	b1b0      	cbz	r0, 800a79a <_vfiprintf_r+0x156>
 800a76c:	9207      	str	r2, [sp, #28]
 800a76e:	e014      	b.n	800a79a <_vfiprintf_r+0x156>
 800a770:	eba0 0308 	sub.w	r3, r0, r8
 800a774:	fa09 f303 	lsl.w	r3, r9, r3
 800a778:	4313      	orrs	r3, r2
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	46a2      	mov	sl, r4
 800a77e:	e7d2      	b.n	800a726 <_vfiprintf_r+0xe2>
 800a780:	9b03      	ldr	r3, [sp, #12]
 800a782:	1d19      	adds	r1, r3, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	9103      	str	r1, [sp, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bfbb      	ittet	lt
 800a78c:	425b      	neglt	r3, r3
 800a78e:	f042 0202 	orrlt.w	r2, r2, #2
 800a792:	9307      	strge	r3, [sp, #28]
 800a794:	9307      	strlt	r3, [sp, #28]
 800a796:	bfb8      	it	lt
 800a798:	9204      	strlt	r2, [sp, #16]
 800a79a:	7823      	ldrb	r3, [r4, #0]
 800a79c:	2b2e      	cmp	r3, #46	; 0x2e
 800a79e:	d10c      	bne.n	800a7ba <_vfiprintf_r+0x176>
 800a7a0:	7863      	ldrb	r3, [r4, #1]
 800a7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a4:	d135      	bne.n	800a812 <_vfiprintf_r+0x1ce>
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	1d1a      	adds	r2, r3, #4
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	9203      	str	r2, [sp, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfb8      	it	lt
 800a7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7b6:	3402      	adds	r4, #2
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8a0 <_vfiprintf_r+0x25c>
 800a7be:	7821      	ldrb	r1, [r4, #0]
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	f7f5 fd0c 	bl	80001e0 <memchr>
 800a7c8:	b140      	cbz	r0, 800a7dc <_vfiprintf_r+0x198>
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	eba0 000a 	sub.w	r0, r0, sl
 800a7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	4303      	orrs	r3, r0
 800a7d8:	3401      	adds	r4, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e0:	482c      	ldr	r0, [pc, #176]	; (800a894 <_vfiprintf_r+0x250>)
 800a7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7e6:	2206      	movs	r2, #6
 800a7e8:	f7f5 fcfa 	bl	80001e0 <memchr>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d03f      	beq.n	800a870 <_vfiprintf_r+0x22c>
 800a7f0:	4b29      	ldr	r3, [pc, #164]	; (800a898 <_vfiprintf_r+0x254>)
 800a7f2:	bb1b      	cbnz	r3, 800a83c <_vfiprintf_r+0x1f8>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	3307      	adds	r3, #7
 800a7f8:	f023 0307 	bic.w	r3, r3, #7
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	9303      	str	r3, [sp, #12]
 800a800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a802:	443b      	add	r3, r7
 800a804:	9309      	str	r3, [sp, #36]	; 0x24
 800a806:	e767      	b.n	800a6d8 <_vfiprintf_r+0x94>
 800a808:	fb0c 3202 	mla	r2, ip, r2, r3
 800a80c:	460c      	mov	r4, r1
 800a80e:	2001      	movs	r0, #1
 800a810:	e7a5      	b.n	800a75e <_vfiprintf_r+0x11a>
 800a812:	2300      	movs	r3, #0
 800a814:	3401      	adds	r4, #1
 800a816:	9305      	str	r3, [sp, #20]
 800a818:	4619      	mov	r1, r3
 800a81a:	f04f 0c0a 	mov.w	ip, #10
 800a81e:	4620      	mov	r0, r4
 800a820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a824:	3a30      	subs	r2, #48	; 0x30
 800a826:	2a09      	cmp	r2, #9
 800a828:	d903      	bls.n	800a832 <_vfiprintf_r+0x1ee>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0c5      	beq.n	800a7ba <_vfiprintf_r+0x176>
 800a82e:	9105      	str	r1, [sp, #20]
 800a830:	e7c3      	b.n	800a7ba <_vfiprintf_r+0x176>
 800a832:	fb0c 2101 	mla	r1, ip, r1, r2
 800a836:	4604      	mov	r4, r0
 800a838:	2301      	movs	r3, #1
 800a83a:	e7f0      	b.n	800a81e <_vfiprintf_r+0x1da>
 800a83c:	ab03      	add	r3, sp, #12
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	462a      	mov	r2, r5
 800a842:	4b16      	ldr	r3, [pc, #88]	; (800a89c <_vfiprintf_r+0x258>)
 800a844:	a904      	add	r1, sp, #16
 800a846:	4630      	mov	r0, r6
 800a848:	f7fd fcdc 	bl	8008204 <_printf_float>
 800a84c:	4607      	mov	r7, r0
 800a84e:	1c78      	adds	r0, r7, #1
 800a850:	d1d6      	bne.n	800a800 <_vfiprintf_r+0x1bc>
 800a852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a854:	07d9      	lsls	r1, r3, #31
 800a856:	d405      	bmi.n	800a864 <_vfiprintf_r+0x220>
 800a858:	89ab      	ldrh	r3, [r5, #12]
 800a85a:	059a      	lsls	r2, r3, #22
 800a85c:	d402      	bmi.n	800a864 <_vfiprintf_r+0x220>
 800a85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a860:	f7ff fa20 	bl	8009ca4 <__retarget_lock_release_recursive>
 800a864:	89ab      	ldrh	r3, [r5, #12]
 800a866:	065b      	lsls	r3, r3, #25
 800a868:	f53f af12 	bmi.w	800a690 <_vfiprintf_r+0x4c>
 800a86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a86e:	e711      	b.n	800a694 <_vfiprintf_r+0x50>
 800a870:	ab03      	add	r3, sp, #12
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	462a      	mov	r2, r5
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <_vfiprintf_r+0x258>)
 800a878:	a904      	add	r1, sp, #16
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7fd ff66 	bl	800874c <_printf_i>
 800a880:	e7e4      	b.n	800a84c <_vfiprintf_r+0x208>
 800a882:	bf00      	nop
 800a884:	0800ae00 	.word	0x0800ae00
 800a888:	0800ae20 	.word	0x0800ae20
 800a88c:	0800ade0 	.word	0x0800ade0
 800a890:	0800af9c 	.word	0x0800af9c
 800a894:	0800afa6 	.word	0x0800afa6
 800a898:	08008205 	.word	0x08008205
 800a89c:	0800a61f 	.word	0x0800a61f
 800a8a0:	0800afa2 	.word	0x0800afa2

0800a8a4 <_sbrk_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_sbrk_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f7 fcf2 	bl	8002298 <_sbrk>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_sbrk_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_sbrk_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200009d8 	.word	0x200009d8

0800a8c4 <__sread>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8cc:	f000 f8e2 	bl	800aa94 <_read_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	bfab      	itete	ge
 800a8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d8:	181b      	addge	r3, r3, r0
 800a8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8de:	bfac      	ite	ge
 800a8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8e2:	81a3      	strhlt	r3, [r4, #12]
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <__swrite>:
 800a8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	461f      	mov	r7, r3
 800a8ec:	898b      	ldrh	r3, [r1, #12]
 800a8ee:	05db      	lsls	r3, r3, #23
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	d505      	bpl.n	800a904 <__swrite+0x1e>
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	2200      	movs	r2, #0
 800a900:	f000 f898 	bl	800aa34 <_lseek_r>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	4628      	mov	r0, r5
 800a916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	f000 b817 	b.w	800a94c <_write_r>

0800a91e <__sseek>:
 800a91e:	b510      	push	{r4, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a926:	f000 f885 	bl	800aa34 <_lseek_r>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	bf15      	itete	ne
 800a930:	6560      	strne	r0, [r4, #84]	; 0x54
 800a932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a93a:	81a3      	strheq	r3, [r4, #12]
 800a93c:	bf18      	it	ne
 800a93e:	81a3      	strhne	r3, [r4, #12]
 800a940:	bd10      	pop	{r4, pc}

0800a942 <__sclose>:
 800a942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a946:	f000 b831 	b.w	800a9ac <_close_r>
	...

0800a94c <_write_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_write_r+0x20>)
 800a950:	4604      	mov	r4, r0
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f7 fc4c 	bl	80021f8 <_write>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_write_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_write_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	200009d8 	.word	0x200009d8

0800a970 <__assert_func>:
 800a970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a972:	4614      	mov	r4, r2
 800a974:	461a      	mov	r2, r3
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <__assert_func+0x2c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4605      	mov	r5, r0
 800a97c:	68d8      	ldr	r0, [r3, #12]
 800a97e:	b14c      	cbz	r4, 800a994 <__assert_func+0x24>
 800a980:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <__assert_func+0x30>)
 800a982:	9100      	str	r1, [sp, #0]
 800a984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a988:	4906      	ldr	r1, [pc, #24]	; (800a9a4 <__assert_func+0x34>)
 800a98a:	462b      	mov	r3, r5
 800a98c:	f000 f81e 	bl	800a9cc <fiprintf>
 800a990:	f000 f89f 	bl	800aad2 <abort>
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <__assert_func+0x38>)
 800a996:	461c      	mov	r4, r3
 800a998:	e7f3      	b.n	800a982 <__assert_func+0x12>
 800a99a:	bf00      	nop
 800a99c:	2000001c 	.word	0x2000001c
 800a9a0:	0800afad 	.word	0x0800afad
 800a9a4:	0800afba 	.word	0x0800afba
 800a9a8:	0800afe8 	.word	0x0800afe8

0800a9ac <_close_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d06      	ldr	r5, [pc, #24]	; (800a9c8 <_close_r+0x1c>)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	f7f7 fc3a 	bl	8002230 <_close>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_close_r+0x1a>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_close_r+0x1a>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	200009d8 	.word	0x200009d8

0800a9cc <fiprintf>:
 800a9cc:	b40e      	push	{r1, r2, r3}
 800a9ce:	b503      	push	{r0, r1, lr}
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	4805      	ldr	r0, [pc, #20]	; (800a9ec <fiprintf+0x20>)
 800a9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	f7ff fe31 	bl	800a644 <_vfiprintf_r>
 800a9e2:	b002      	add	sp, #8
 800a9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e8:	b003      	add	sp, #12
 800a9ea:	4770      	bx	lr
 800a9ec:	2000001c 	.word	0x2000001c

0800a9f0 <_fstat_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_fstat_r+0x20>)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	602b      	str	r3, [r5, #0]
 800a9fe:	f7f7 fc23 	bl	8002248 <_fstat>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d102      	bne.n	800aa0c <_fstat_r+0x1c>
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	b103      	cbz	r3, 800aa0c <_fstat_r+0x1c>
 800aa0a:	6023      	str	r3, [r4, #0]
 800aa0c:	bd38      	pop	{r3, r4, r5, pc}
 800aa0e:	bf00      	nop
 800aa10:	200009d8 	.word	0x200009d8

0800aa14 <_isatty_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d06      	ldr	r5, [pc, #24]	; (800aa30 <_isatty_r+0x1c>)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	602b      	str	r3, [r5, #0]
 800aa20:	f7f7 fc22 	bl	8002268 <_isatty>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_isatty_r+0x1a>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_isatty_r+0x1a>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	200009d8 	.word	0x200009d8

0800aa34 <_lseek_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_lseek_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f7 fc1b 	bl	800227e <_lseek>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_lseek_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_lseek_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	200009d8 	.word	0x200009d8

0800aa58 <__ascii_mbtowc>:
 800aa58:	b082      	sub	sp, #8
 800aa5a:	b901      	cbnz	r1, 800aa5e <__ascii_mbtowc+0x6>
 800aa5c:	a901      	add	r1, sp, #4
 800aa5e:	b142      	cbz	r2, 800aa72 <__ascii_mbtowc+0x1a>
 800aa60:	b14b      	cbz	r3, 800aa76 <__ascii_mbtowc+0x1e>
 800aa62:	7813      	ldrb	r3, [r2, #0]
 800aa64:	600b      	str	r3, [r1, #0]
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	1e10      	subs	r0, r2, #0
 800aa6a:	bf18      	it	ne
 800aa6c:	2001      	movne	r0, #1
 800aa6e:	b002      	add	sp, #8
 800aa70:	4770      	bx	lr
 800aa72:	4610      	mov	r0, r2
 800aa74:	e7fb      	b.n	800aa6e <__ascii_mbtowc+0x16>
 800aa76:	f06f 0001 	mvn.w	r0, #1
 800aa7a:	e7f8      	b.n	800aa6e <__ascii_mbtowc+0x16>

0800aa7c <__malloc_lock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__malloc_lock+0x8>)
 800aa7e:	f7ff b910 	b.w	8009ca2 <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	200009d0 	.word	0x200009d0

0800aa88 <__malloc_unlock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__malloc_unlock+0x8>)
 800aa8a:	f7ff b90b 	b.w	8009ca4 <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	200009d0 	.word	0x200009d0

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_read_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f7 fb8b 	bl	80021be <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	200009d8 	.word	0x200009d8

0800aab8 <__ascii_wctomb>:
 800aab8:	b149      	cbz	r1, 800aace <__ascii_wctomb+0x16>
 800aaba:	2aff      	cmp	r2, #255	; 0xff
 800aabc:	bf85      	ittet	hi
 800aabe:	238a      	movhi	r3, #138	; 0x8a
 800aac0:	6003      	strhi	r3, [r0, #0]
 800aac2:	700a      	strbls	r2, [r1, #0]
 800aac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800aac8:	bf98      	it	ls
 800aaca:	2001      	movls	r0, #1
 800aacc:	4770      	bx	lr
 800aace:	4608      	mov	r0, r1
 800aad0:	4770      	bx	lr

0800aad2 <abort>:
 800aad2:	b508      	push	{r3, lr}
 800aad4:	2006      	movs	r0, #6
 800aad6:	f000 f82b 	bl	800ab30 <raise>
 800aada:	2001      	movs	r0, #1
 800aadc:	f7f7 fb65 	bl	80021aa <_exit>

0800aae0 <_raise_r>:
 800aae0:	291f      	cmp	r1, #31
 800aae2:	b538      	push	{r3, r4, r5, lr}
 800aae4:	4604      	mov	r4, r0
 800aae6:	460d      	mov	r5, r1
 800aae8:	d904      	bls.n	800aaf4 <_raise_r+0x14>
 800aaea:	2316      	movs	r3, #22
 800aaec:	6003      	str	r3, [r0, #0]
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaf6:	b112      	cbz	r2, 800aafe <_raise_r+0x1e>
 800aaf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aafc:	b94b      	cbnz	r3, 800ab12 <_raise_r+0x32>
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 f830 	bl	800ab64 <_getpid_r>
 800ab04:	462a      	mov	r2, r5
 800ab06:	4601      	mov	r1, r0
 800ab08:	4620      	mov	r0, r4
 800ab0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0e:	f000 b817 	b.w	800ab40 <_kill_r>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d00a      	beq.n	800ab2c <_raise_r+0x4c>
 800ab16:	1c59      	adds	r1, r3, #1
 800ab18:	d103      	bne.n	800ab22 <_raise_r+0x42>
 800ab1a:	2316      	movs	r3, #22
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	2001      	movs	r0, #1
 800ab20:	e7e7      	b.n	800aaf2 <_raise_r+0x12>
 800ab22:	2400      	movs	r4, #0
 800ab24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab28:	4628      	mov	r0, r5
 800ab2a:	4798      	blx	r3
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	e7e0      	b.n	800aaf2 <_raise_r+0x12>

0800ab30 <raise>:
 800ab30:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <raise+0xc>)
 800ab32:	4601      	mov	r1, r0
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	f7ff bfd3 	b.w	800aae0 <_raise_r>
 800ab3a:	bf00      	nop
 800ab3c:	2000001c 	.word	0x2000001c

0800ab40 <_kill_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d07      	ldr	r5, [pc, #28]	; (800ab60 <_kill_r+0x20>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	602b      	str	r3, [r5, #0]
 800ab4e:	f7f7 fb1c 	bl	800218a <_kill>
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	d102      	bne.n	800ab5c <_kill_r+0x1c>
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	b103      	cbz	r3, 800ab5c <_kill_r+0x1c>
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	bd38      	pop	{r3, r4, r5, pc}
 800ab5e:	bf00      	nop
 800ab60:	200009d8 	.word	0x200009d8

0800ab64 <_getpid_r>:
 800ab64:	f7f7 bb09 	b.w	800217a <_getpid>

0800ab68 <_init>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr

0800ab74 <_fini>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr
